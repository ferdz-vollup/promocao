<?xml version="1.0"?>
<doc>
<assembly>
<name>
InnerLibs
</name>
</assembly>
<members>
<member name="T:InnerLibs.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:InnerLibs.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:InnerLibs.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:InnerLibs.Templatizer.HtmlContentExtractor">
 <summary>
 Extrai conteudo especifico de paginas HTML usando as instruçoes do <see cref="T:InnerLibs.Templatizer.HtmlContentExtractor.Rule"/>
 </summary>
</member>
<member name="P:InnerLibs.Templatizer.HtmlContentExtractor.Rule.Tag">
 <summary>
 Tag que será extraida do HTML. É permitido o uso de <see cref="T:System.Text.RegularExpressions.Regex"/>
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Templatizer.HtmlContentExtractor.Rule.Key">
 <summary>
 Nome da propriedade no qual o resultdado extraído será guardado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Templatizer.HtmlContentExtractor.Rule.MatchAllAttributtes">
 <summary>
 Instruçao que indica se todos os atirbutos deve ser idênticos para o conteúdo ser extraído.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Templatizer.HtmlContentExtractor.Rule.ContentAttribute">
 <summary>
 Key do atributo que será utilizado para extrair o conteúdo
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.HtmlContentExtractor.Rule.#ctor(System.String,System.String,System.Boolean,System.String)">
 <summary>
 Cria uma nova instância de regra
 </summary>
 <param name="Key">Nome da propriedade no qual o resultdado extraído será guardado</param>
 <param name="HtmlString">Tag que será extraida do HTML. É permitido o uso de <see cref="T:System.Text.RegularExpressions.Regex"/></param>
 <param name="MatchAllAttributtes">Instruçao que indica se todos os atirbutos deve ser idênticos para o conteúdo ser extraído.</param>
 <param name="ContentAttribute">Key do atributo que será utilizado para extrair o conteúdo.</param>
</member>
<member name="M:InnerLibs.Templatizer.HtmlContentExtractor.#ctor(System.String,InnerLibs.Templatizer.HtmlContentExtractor.Rule[])">
 <summary>
 Declara uma instancia de HtmlContentExtractor
 </summary>
 <param name="HTML">Conteído HTML</param>
 <param name="Rules">Regras para Extração</param>
</member>
<member name="M:InnerLibs.Templatizer.HtmlContentExtractor.#ctor(System.Uri,InnerLibs.Templatizer.HtmlContentExtractor.Rule[])">
 <summary>
 Declara uma instancia de HtmlContentExtractor
 </summary>
 <param name="URL">URL de requisição</param>
 <param name="Rules">Regras para Extração</param>
</member>
<member name="T:InnerLibs.Templatizer.Templatizer">
 <summary>
 Gera HTML dinâmico a partir de uma conexão com banco de dados e um template HTML
 </summary>
</member>
<member name="P:InnerLibs.Templatizer.Templatizer.FieldSelector">
 <summary>
 Seletor dos campos
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.Templatizer.ApplySelector(System.String)">
 <summary>
 Aplica um seletor ao nome do campo
 </summary>
 <param name="Name"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.Templatizer.SetSelector(System.String,System.String)">
 <summary>
 Altera os seletores padrão dos campos
 </summary>
 <param name="OpenSelector"> Seletor</param>
 <param name="CloseSelector"></param>
</member>
<member name="P:InnerLibs.Templatizer.Templatizer.DataBase">
 <summary>
 Conexão genérica de Banco de Dados
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Templatizer.Templatizer.TemplateDirectory">
 <summary>
 Pasta contendo os arquivos HTML utilizados como template
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Templatizer.Templatizer.ApplicationAssembly">
 <summary>
 Aplicaçao contendo os Resources (arquivos compilados internamente) dos arquivos HTML
 utilizados como template
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.Templatizer.Create``1(System.String,System.IO.DirectoryInfo)">
 <summary>
 Cria uma instancia de Templatizer diretamente de um diretório e uma connectionstring
 </summary>
 <typeparam name="ConnectionType">Tipo de ConnectionString</typeparam>
 <param name="ConnectionString">String de conexão com o banco</param>
 <param name="Directory">       Diretório com os arquivos SQL e os arquivos HTML</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.Templatizer.Create``1(System.String,System.Reflection.Assembly)">
 <summary>
 Cria uma instancia de Templatizer diretamente de um diretório e uma connectionstring
 </summary>
 <typeparam name="ConnectionType">Tipo de ConnectionString</typeparam>
 <param name="ConnectionString">   String de conexão com o banco</param>
 <param name="ApplicationAssembly">
 Assembly da aplicação onde estão os arquivos html e sql guardados como resources
 </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.Templatizer.#ctor(InnerLibs.DataBase)">
 <summary>
 Instancia um Novo Templatizer herdando a <see cref="P:InnerLibs.DataBase.ApplicationAssembly"/>
 </summary>
 <param name="DataBase">Conexão com o banco de dados</param>
</member>
<member name="M:InnerLibs.Templatizer.Templatizer.#ctor(InnerLibs.DataBase,System.IO.DirectoryInfo)">
 <summary>
 Instancia um Novo Templatizer utilizando uma Pasta para guardar os templates
 </summary>
 <param name="DataBase">      Conexão com o banco de dados</param>
 <param name="TemplateFolder">Pasta com os arquivos HTML dos templates</param>
</member>
<member name="M:InnerLibs.Templatizer.Templatizer.#ctor(InnerLibs.DataBase,System.Reflection.Assembly)">
 <summary>
 Instancia um Novo Templatizer utilizando uma Assembly para guardas os templates como resources
 </summary>
 <param name="DataBase">           Conexão com o banco de dados</param>
 <param name="ApplicationAssembly">
 Assembly da aplicação onde os arquivos HTML dos templates estão compilados
 </param>
</member>
<member name="M:InnerLibs.Templatizer.Templatizer.GetTemplateList">
 <summary>
 Traz a lista dos arquivos de template encontrados
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.Templatizer.GetTemplateContent(System.String)">
 <summary>
 Retorna o conteudo estático de um arquivo de template
 </summary>
 <param name="Templatefile">Nome do arquivo do template</param>
 <returns></returns>
</member>
<member name="F:InnerLibs.Templatizer.Templatizer.CustomValues">
 <summary>
 Valores customizados que serão acrescentados as colunas do Templatizer duranto o processamento
 </summary>
</member>
<member name="M:InnerLibs.Templatizer.Templatizer.AddCustomValue(System.String,System.Object)">
 <summary>
 Adiciona um valor customizado ao processamento do templatizer
 </summary>
 <param name="Key">Key</param>
 <param name="Value">Valor</param>
 <returns>Si prorio</returns>
</member>
<member name="M:InnerLibs.Templatizer.Templatizer.LoadTemplates(InnerLibs.Templatizer.Template[])">
 <summary>
 Processa os comandos SQL de varios templates e cria uma unica lista com todos eles
 </summary>
 <param name="Templates">Templates</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.Templatizer.LoadQuery(System.String,System.String,System.String)">
 <summary>
 Processa o comando SQL e retorna os resultados em HTML utilizando o arquivo de template especificado
 </summary>
 <param name="SQLQuery">     Comando SQL</param>
 <param name="TemplateFile"> Arquivo do Template</param>
 <param name="OrderByColumn">Coluna do resultado que será utilizado como ordem</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.Templatizer.LoadFile(System.String,System.String,System.String)">
 <summary>
 Processa o comando de um arquivo SQL e retorna os resultados em HTML utilizando o arquivo
 de template especificado
 </summary>
 <param name="CommandFile">  Arquivo de comando SQL</param>
 <param name="TemplateFile"> Arquivo do Template</param>
 <param name="OrderByColumn">Coluna do resultado que será utilizado como ordem</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.Templatizer.Templatizer.Load(System.String,System.String)">
 <summary>
 Processa um template configurado
 </summary>
 <param name="TemplateName"> Nome do template</param>
 <param name="OrderByColumn">Coluna utilizada para ordenar</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Templatizer.TemplateList">
 <summary>
 Lista de resultados gerados a partir de um ou mais templates
 </summary>
</member>
<member name="P:InnerLibs.Templatizer.TemplateList.Head">
 <summary>
 Conteudo da tag Head do template principal. é adicionado a string após o fim da recursão.
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.TemplateList.#ctor(InnerLibs.Templatizer.Template[])">
 <summary>
 Cria uma lista de templates a partir de varios templates
 </summary>
 <param name="Templates"></param>
</member>
<member name="M:InnerLibs.Templatizer.TemplateList.#ctor(InnerLibs.Templatizer.TemplateList[])">
 <summary>
 Cria uma lista de templates a partir de varias lista de templates
 </summary>
 <param name="Templates">Lista de templates</param>
</member>
<member name="M:InnerLibs.Templatizer.TemplateList.#ctor">
 <summary>
 Cria uma nova Lista vazia
 </summary>
</member>
<member name="M:InnerLibs.Templatizer.TemplateList.BuildHtml(InnerLibs.Templatizer.TemplateOrder)">
 <summary>
 Retorna uma string HTML com todos os templates processados e o conteúdo do Head
 </summary>
 <param name="OrderBy">Se TRUE, Ordem crescente</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.TemplateList.ToString">
 <summary>
 Retorna uma string HTML com todos os templates processados e o conteúdo do Head
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.TemplateList.SearchAny(System.String[])">
 <summary>
 Procura valores no <see cref="P:InnerLibs.Templatizer.Template.Data"/> que contenham qualquer um dos termos pesquisados
 </summary>
 <param name="SearchTerms">Termos Pesquisados</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.TemplateList.SearchAny(InnerLibs.Phonetic[])">
 <summary>
 Procura valores no <see cref="P:InnerLibs.Templatizer.Template.Data"/> que contenham qualquer um dos termos
 pesquisados usando comparação fonética
 </summary>
 <param name="SearchTerms">Termos Pesquisados</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.TemplateList.SearchAny(System.String[],System.String[])">
 <summary>
 Procura valores nas colunas especificadas do <see cref="P:InnerLibs.Templatizer.Template.Data"/> que contenham
 qualquer um dos termos pesquisados
 </summary>
 <param name="SearchTerms">Termos Pesquisados</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.TemplateList.SearchIn(InnerLibs.Phonetic[],System.String[])">
 <summary>
 Procura valores nas colunas especificadas do <see cref="P:InnerLibs.Templatizer.Template.Data"/> que contenham
 qualquer um dos termos pesquisados usando comparação fonética
 </summary>
 <param name="SearchTerms">Termos Pesquisados</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.TemplateList.ReOrder(InnerLibs.Templatizer.TemplateOrder)">
 <summary>
 Reordena a lista de acordo com a propriedade <see cref="P:InnerLibs.Templatizer.Template.Order"/>
 </summary>
 <param name="OrderBy">Se TRUE, Ordem crescente</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.TemplateList.AddRange(InnerLibs.Templatizer.TemplateList)">
 <summary>
 Adiciona uma lista de templates á lista na posição correta de acordo com a coluna de ordem
 </summary>
 <param name="TemplateList">Lista de templates</param>
</member>
<member name="M:InnerLibs.Templatizer.TemplateList.AddRange(System.Collections.Generic.IEnumerable{InnerLibs.Templatizer.Template})">
 <summary>
 Adiciona uma lista de templates á lista na posição correta de acordo com a coluna de ordem
 </summary>
 <param name="TemplateList">Lista de templates</param>
</member>
<member name="M:InnerLibs.Templatizer.TemplateList.Add(InnerLibs.Templatizer.Template)">
 <summary>
 Adiciona um novo template á lista na posição correta de acordo com a coluna de ordem
 </summary>
 <param name="Template">template</param>
</member>
<member name="M:InnerLibs.Templatizer.TemplateList.op_Concatenate(System.String,InnerLibs.Templatizer.TemplateList)">
 <summary>
 Concatena o HTML da lista de templates a string
 </summary>
 <param name="Text">        Texto</param>
 <param name="TemplateList">Lista de Template</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.TemplateList.op_Addition(InnerLibs.Templatizer.TemplateList,InnerLibs.Templatizer.Template)">
 <summary>
 Adiciona um template á lista
 </summary>
 <param name="List">    Lista</param>
 <param name="Template">Template</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.TemplateList.op_Addition(InnerLibs.Templatizer.TemplateList,InnerLibs.Templatizer.TemplateList)">
 <summary>
 Adiciona os templates de uma lista á outra lista
 </summary>
 <param name="List">       Lista</param>
 <param name="AnotherList">Outra lista</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.TemplateList.op_Addition(System.String,InnerLibs.Templatizer.TemplateList)">
 <summary>
 Concatena o HTML da lista de templates a string
 </summary>
 <param name="Text">        Texto</param>
 <param name="TemplateList">Lista de Template</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.TemplateList.op_Addition(InnerLibs.Templatizer.TemplateList,System.String)">
 <summary>
 Concatena o HTML da lista de templates a string
 </summary>
 <param name="Text">        Texto</param>
 <param name="TemplateList">Lista de Template</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Templatizer.Template">
 <summary>
 Resultado de uma Query transformada em um template
 </summary>
</member>
<member name="P:InnerLibs.Templatizer.Template.Content">
 <summary>
 Conteudo do Template
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Templatizer.Template.Data">
 <summary>
 Dicionário de onde serão extraidos os valores que definem a ordem de apresentação e o filtro
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Templatizer.Template.TemplateFile">
 <summary>
 Arquivo de onde o conteudo foi extraido e processado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Templatizer.Template.SQLQuery">
 <summary>
 Query SQL aplicada neste template
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Templatizer.Template.OrderByColumn">
 <summary>
 Coluna que define a ordem de apresentação na <see cref="T:InnerLibs.Templatizer.TemplateList"/>
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Templatizer.Template.Order">
 <summary>
 Valor que define a ordem de apresentação na <see cref="T:InnerLibs.Templatizer.TemplateList"/>
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.Template.#ctor(System.String,System.String,System.String)">
 <summary>
 Cria uma nova instrução para contrução de um template
 </summary>
 <param name="SQLQuery">     Query SQL</param>
 <param name="TemplateFile"> Nome do arquivo de template</param>
 <param name="OrderByColumn">Nome da Coluna de Ordem</param>
</member>
<member name="M:InnerLibs.Templatizer.Template.CompareTo(System.Object)">
 <summary>
 Metodo de comparação de ordem dos templates
 </summary>
 <param name="Template">Template</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.Template.op_Addition(InnerLibs.Templatizer.Template,InnerLibs.Templatizer.TemplateList)">
 <summary>
 cria uma cópia da <see cref="T:InnerLibs.Templatizer.TemplateList"/> e adiciona o <see cref="T:InnerLibs.Templatizer.Template"/> a ela
 </summary>
 <param name="Template">    Template</param>
 <param name="TemplateList">Lista</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.Template.op_Addition(InnerLibs.Templatizer.TemplateList,InnerLibs.Templatizer.Template)">
 <summary>
 cria uma cópia da <see cref="T:InnerLibs.Templatizer.TemplateList"/> e adiciona o <see cref="T:InnerLibs.Templatizer.Template"/> a ela
 </summary>
 <param name="Template">    Template</param>
 <param name="TemplateList">Lista</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Templatizer.Template.op_Like(InnerLibs.Templatizer.Template,InnerLibs.Templatizer.Template)">
 <summary>
 Verifica se 2 templates processados são parecidos (utilizam o mesmo arquivo de template)
 </summary>
 <param name="Template1"></param>
 <param name="Template2"></param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Templatizer.TemplateOrder">
 <summary>
 Define o Comportamento de ordenação dos itens do templatizer
 </summary>
</member>
<member name="F:InnerLibs.Templatizer.TemplateOrder.DataBaseDefault">
 <summary>
 Ordem Default (definida normalmente na clausula "order by" da query SQL)
 </summary>
</member>
<member name="F:InnerLibs.Templatizer.TemplateOrder.AscendingOrder">
 <summary>
 Ordem crescente de acordo com a propriedade <see cref="P:InnerLibs.Templatizer.Template.Order"/>
 </summary>
</member>
<member name="F:InnerLibs.Templatizer.TemplateOrder.DescendingOrder">
 <summary>
 Ordem decrescente de acordo com a propriedade <see cref="P:InnerLibs.Templatizer.Template.Order"/>
 </summary>
</member>
<member name="F:InnerLibs.Templatizer.TemplateOrder.RandomOrder">
 <summary>
 Ordem aleatória
 </summary>
</member>
<member name="T:InnerLibs.Base64">
 <summary>
 Modulo para manipulação de imagens e Strings Base64
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Base64.FixBase64(System.String)">
 <summary>
 Arruma os caracteres de uma string Base64
 </summary>
 <param name="Base64StringOrDataUrl">Base64String ou DataURL</param>
 <returns>Retorna apenas a Base64</returns>
</member>
<member name="M:InnerLibs.Base64.ToBase64(System.Byte[])">
 <summary>
 Converte um Array de Bytes em uma string Base64
 </summary>
 <param name="Bytes">Array de Bytes</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Base64.ToDataURL(System.Byte[],InnerLibs.FileType)">
 <summary>
 Converte um Array de Bytes em uma DATA URL Completa
 </summary>
 <param name="Bytes">Array de Bytes</param>
 <param name="Type">Tipo de arquivo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Base64.ToDataURL(System.Drawing.Image)">
 <summary>
 Transforma uma imagem em uma URL Base64
 </summary>
 <param name="Image">Imagem</param>
 <returns>Uma DataURI em string</returns>
</member>
<member name="M:InnerLibs.Base64.ToBase64(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
 <summary>
 Converte uma Imagem para String Base64
 </summary>
 <param name="OriginalImage">Imagem original, tipo Image() (Picturebox.Image, Picturebox.BackgroundImage etc.)</param>
 <param name="OriginalImageFormat">Formato da imagem de acordo com sua extensão (JPG, PNG, GIF etc.)</param>
 <returns>Uma string em formato Base64</returns>
</member>
<member name="M:InnerLibs.Base64.ToDataURL(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
 <summary>
 Converte uma imagem para DataURI trocando o MIME Type
 </summary>
 <param name="OriginalImage">Imagem</param>
 <param name="OriginalImageFormat">Formato da Imagem</param>
 <returns>Uma data URI com a imagem convertida</returns>
</member>
<member name="M:InnerLibs.Base64.ToBase64(System.Drawing.Image)">
 <summary>
 Converte uma Imagem para String Base64
 </summary>
 <param name="OriginalImage">Imagem original, tipo Image() (Picturebox.Image, Picturebox.BackgroundImage etc.)</param>
 <returns>Uma string em formato Base64</returns>
</member>
<member name="M:InnerLibs.Base64.ToBase64(System.String)">
 <summary>
 Converte uma Imagem da WEB para String Base64
 </summary>
 <param name="ImageURL">Caminho da imagem</param>
 <returns>Uma string em formato Base64</returns>
</member>
<member name="M:InnerLibs.Base64.ToBase64(System.String,System.Drawing.Imaging.ImageFormat)">
 <summary>
 Converte uma Imagem da WEB para String Base64
 </summary>
 <param name="ImageURL">Caminho da imagem</param>
 <param name="OriginalImageFormat">Formato da imagem de acordo com sua extensão (JPG, PNG, GIF etc.)</param>
 <returns>Uma string em formato Base64</returns>
</member>
<member name="M:InnerLibs.Base64.ToImage(System.String,System.Int32,System.Int32)">
 <summary>
 Converte uma String DataURL ou Base64 para Imagem
 </summary>
 <param name="DataUrlOrBase64String">A string Base64 a ser convertida</param>
 <param name="Width">Altura da nova imagem (não preencher retorna o tamanho original da imagem)</param>
 <param name="Height">Largura da nova imagem (não preencher retorna o tamanho original da imagem)</param>
 <returns>Uma imagem (componente Image)</returns>
</member>
<member name="M:InnerLibs.Base64.ToImage(System.Web.HttpPostedFile)">
 <summary>
 Converte um httpPostedFile para imagem
 </summary>
 <param name="PostedFile">Arquivo HttpPostedFile</param>
 <returns>uma Image</returns>
</member>
<member name="M:InnerLibs.Base64.ToImage(System.Byte[])">
 <summary>
 Converte um array de bytes para imagem
 </summary>
 <param name="Bytes">Bytes</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Base64.ToBase64(System.Web.HttpPostedFile,System.Boolean)">
 <summary>
 Converte um arquivo em HttpPostedFile para String Base64
 </summary>
 <param name="PostedFile">Arquivo de Imagem</param>
 <param name="DataUrl">Especifica se a resposta deve ser em DataURI ou apenas a Base64</param>
 <returns>Uma string em formato Base64</returns>
</member>
<member name="M:InnerLibs.Base64.ToDataURL(System.Web.HttpPostedFile)">
 <summary>
 Converte uma Imagem dem HttpPostedFile para uma Data URI
 </summary>
 <param name="PostedFile">Arquivo de Imagem</param>
 <returns>Uma data URI Base64</returns>
</member>
<member name="M:InnerLibs.Base64.ToBytes(System.String)">
 <summary>
 Converte uma DATAURL ou Base64 String em um array de Bytes
 </summary>
 <param name="Base64StringOrDataURL">Base64 String ou DataURL</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.BitLy.BitLy">
 <summary>
 Classe para gerar e manipular URL encurtadas pelo Bit.Ly
 </summary>
</member>
<member name="T:InnerLibs.BitLy.BitLy.ShortUrl.ShortUrlData">
 <summary>
 Data da URL Encurtada
 </summary>
</member>
<member name="M:InnerLibs.BitLy.BitLy.#ctor(System.String,System.String)">
 <summary>
 Inicializa a API do Bit Ly com o Login e a Key
 </summary>
 <param name="Login">Login da sua conta do Bit.y (http://bit.ly/account/your_api_key).</param>
 <param name="ApiKey">API key da sua conta do Bit.ly (http://bit.ly/account/your_api_key).</param>
</member>
<member name="M:InnerLibs.BitLy.BitLy.GetShortURL(System.String,System.Boolean,System.String)">
 <summary>Encurta a URL usando bit.ly</summary>
 <param name="longUrl">URL Longa</param>
 <param name="addHistory">Salva a URL no histórico da conta</param>
 <returns>Um Objet SHortUrl do Bit.Ly</returns>
</member>
<member name="M:InnerLibs.BitLy.BitLy.GetShortURL(System.Uri,System.Boolean,System.String)">
 <summary>Encurta a URL usando bit.ly</summary>
 <param name="longUrl">URL Longa</param>
 <param name="addHistory">Salva a URL no histórico da conta</param>
 <returns>Um Objet SHortUrl do Bit.Ly</returns>
</member>
<member name="T:InnerLibs.Bootstrap.Bootstrap.ElementType">
 <summary>
 Classe que representa a aparência de um elemento de forma geral
 </summary>
</member>
<member name="T:InnerLibs.Bootstrap.Bootstrap.BootstrapElement">
 <summary>
 Classe mãe dos elementos de Bootstrap
 </summary>
</member>
<member name="M:InnerLibs.Bootstrap.Bootstrap.BootstrapElement.CreateObjectClass(InnerLibs.Bootstrap.Bootstrap.ElementType)">
 <summary>
 Retorna uma classe baseada no tipo do element criado
 </summary>
 <param name="ElementType">Elemento do bootstrap</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Bootstrap.Bootstrap.Panel">
 <summary>
 Elemento Panel do Bootstrap
 </summary>
</member>
<member name="M:InnerLibs.Bootstrap.Bootstrap.Panel.TransformElement(System.Web.UI.HtmlControls.HtmlGenericControl@)">
 <summary>
 Transforma um elemento em um Panel do Bootstrap
 </summary>
 <param name="Control">Elemento que vai sofrer a transformação</param>
</member>
<member name="T:InnerLibs.Bootstrap.Bootstrap.Alert">
 <summary>
 Elemento Alert do Bootstrap
 </summary>
</member>
<member name="M:InnerLibs.Bootstrap.Bootstrap.Alert.TransformElement(System.Web.UI.HtmlControls.HtmlGenericControl@)">
 <summary>
 Transforma um elemento em um Alert do Bootstrap
 </summary>
 <param name="Control">Elemento que vai sofrer a transformação</param>
</member>
<member name="M:InnerLibs.Bootstrap.Bootstrap.ProgressBar.TransformElement(System.Web.UI.HtmlControls.HtmlGenericControl@)">
 <summary>
 Transforma um elemento em um Panel do Bootstrap
 </summary>
 <param name="Control">Elemento que vai sofrer a transformação</param>
</member>
<member name="T:InnerLibs.State">
 <summary>
 Objeto que representa um estado do Brasil e seus respectivos detalhes
 </summary>
</member>
<member name="P:InnerLibs.State.Acronym">
 <summary>
 Sigla do estado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.State.Name">
 <summary>
 Nome do estado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.State.Cities">
 <summary>
 Lista de cidades do estado
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.State.StateString">
 <summary>
 Tipo de string representativa do estado (sigla ou nome)
 </summary>
</member>
<member name="M:InnerLibs.State.#ctor">
 <summary>
 inicializa um estado vazio
 </summary>
</member>
<member name="M:InnerLibs.State.#ctor(System.String)">
 <summary>
 Inicializa um objeto Estado a partir de uma sigla
 </summary>
 <param name="StateCode"></param>
</member>
<member name="M:InnerLibs.State.ToString">
 <summary>
 Retorna a String correspondente ao estado
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.State.ToString(InnerLibs.State.StateString)">
 <summary>
 Retorna a String correspondente ao estado
 </summary>
 <param name="Type">Tipo de String (Sigla ou Nome)</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Brasil">
 <summary>
 Objeto para manipular cidades e estados do Brasil
 </summary>
</member>
<member name="P:InnerLibs.Brasil.Celebrations">
 <summary>
 Retorna uma lista com todas as datas comemorativas do Brasil
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Brasil.GetCelebrationByDate(System.DateTime)">
 <summary>
 Retorna todas as comemoracoes de uma data
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Brasil.GetCelebrationByMonth(System.Int32)">
 <summary>
 Retorna todas as comemoracoes de um mês
 </summary>
 <param name="Month">Numero do Mês</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.Brasil.States">
 <summary>
 Retorna uma lista com todos os estados do Brasil e seus respectivos detalhes
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Brasil.GetCitiesOf(System.String)">
 <summary>
 Retorna as cidades de um estado a partir do nome ou sigla do estado
 </summary>
 <param name="NameOrStateCode">Nome ou sigla do estado</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Brasil.GetStateList(InnerLibs.State.StateString)">
 <summary>
 Retorna uma lista contendo os nomes ou siglas dos estados do Brasil
 </summary>
 <param name="Type">Tipo de retorno (sigla ou nome)</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Brasil.GetNameOf(System.String)">
 <summary>
 Retorna o nome do estado a partir da sigla
 </summary>
 <param name="StateCode"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Brasil.GetAcronymOf(System.String)">
 <summary>
 Retorna a Sigla a partir de um nome de estado
 </summary>
 <param name="Name"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.BrowserClipper.Capture(System.String,System.Int32)">
 <summary>
 Cria um snapshot de uma pagina da web a partir de uma URL
 </summary>
 <param name="URL">URL</param>
</member>
<member name="M:InnerLibs.BrowserClipper.Capture(System.Windows.Forms.WebBrowser,System.Int32)">
 <summary>
 Cria um snapshot de um componente WebBrowser
 </summary>
 <param name="Browser">WebBrowser</param>
</member>
<member name="M:InnerLibs.BrowserClipper.GetTitle(System.String)">
 <summary>
 Pega o titulo de uma página da web
 </summary>
 <param name="URL">URL</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.DistinctCount``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Conta de maneira distinta items de uma coleçao
 </summary>
 <typeparam name="Type">TIpo de Objeto</typeparam>
 <param name="Arr">colecao</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GetProperties(System.Object)">
 <summary>
 Traz uma Lista com todas as propriedades de um objeto
 </summary>
 <param name="MyObject">Objeto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GetEnumValues``1">
 <summary>
 Traz todos os Valores de uma enumeração
 </summary>
 <typeparam name="T"></typeparam>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsArrayOf``1(System.Type)">
 <summary>
 Verifica se o tipo é um array de um objeto especifico
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Type"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsArrayOf``1(System.Object)">
 <summary>
 Verifica se o tipo é um array de um objeto especifico
 </summary>
 <typeparam name="T"></typeparam>
 <param name="Obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Verifica se o objeto existe dentro de uma Lista, coleção ou array.
 </summary>
 <typeparam name="Type">Tipo do objeto</typeparam>
 <param name="Obj">objeto</param>
 <param name="List">Lista</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.IsIn``1(``0,System.String)">
 <summary>
 Verifica se o objeto existe dentro de um texto
 </summary>
 <typeparam name="Type">Tipo do objeto</typeparam>
 <param name="Obj">objeto</param>
 <param name="TExt">Texto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Verifica se uma lista, coleção ou array contem todos os itens de outra lista, coleção ou array.
 </summary>
 <typeparam name="Type">Tipo do objeto</typeparam>
 <param name="List1">Lista 1</param>
 <param name="List2">Lista2</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Verifica se uma lista, coleção ou array contem um dos itens de outra lista, coleção ou array.
 </summary>
 <typeparam name="Type">Tipo do objeto</typeparam>
 <param name="List1">Lista 1</param>
 <param name="List2">Lista2</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.GetResourceFileText(System.Reflection.Assembly,System.String)">
 <summary>
 Pega o texto de um arquivo embutido no assembly
 </summary>
 <param name="FileName">Nome do arquivo embutido dentro do assembly (Embedded Resource)</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ClassTools.AddFontFromResource(System.Drawing.Text.PrivateFontCollection@,System.Reflection.Assembly,System.String)">
 <summary>
 Adiciona uma fonte a uma PrivateFontCollection a partir de um Resource
 </summary>
 <param name="FontCollection">Colecao</param>
 <param name="FileName">Nome do arquivo da fonte</param>
</member>
<member name="M:InnerLibs.ClassTools.AddFontFromBytes(System.Drawing.Text.PrivateFontCollection@,System.Byte[])">
 <summary>
 Adiciona uma fonte a uma PrivateFontCollection a partir de um Resource
 </summary>
 <param name="FontCollection">Colecao</param>
</member>
<member name="M:InnerLibs.ClassTools.GetResourceBytes(System.Reflection.Assembly,System.String)">
 <summary>
 Pega os bytes de um arquivo embutido no assembly
 </summary>
 <param name="FileName"></param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Console.Console">
 <summary>
 Métodos para manipulação de aplicações baseadas em Console (System.Console)
 </summary>
</member>
<member name="M:InnerLibs.Console.Console.Write(System.String,InnerLibs.TextValueList{System.ConsoleColor})">
 <summary>
 Escreve no console colorindo palavras especificas
 </summary>
 <param name="Text">Texto</param>
 <param name="CustomColoredWords">Lista com as palavras e suas respectivas cores</param>
</member>
<member name="M:InnerLibs.Console.Console.Write(System.String,System.ConsoleColor)">
 <summary>
 Escreve no console usando uma cor especifica
 </summary>
 <param name="Text">Texto</param>
 <param name="Color">Cor</param>
</member>
<member name="M:InnerLibs.Console.Console.WriteLine(System.String,InnerLibs.TextValueList{System.ConsoleColor})">
 <summary>
 Escreve uma linha no console colorindo palavras especificas
 </summary>
 <param name="Text">Texto</param>
 <param name="CustomColoredWords">Lista com as palavras e suas respectivas cores</param>
</member>
<member name="M:InnerLibs.Console.Console.WriteLine(System.String,System.ConsoleColor)">
 <summary>
 Escreve uma linha no console usando uma cor especifica
 </summary>
 <param name="Text">Texto</param>
 <param name="Color">Cor</param>
</member>
<member name="M:InnerLibs.Console.Console.BreakLine(System.Int32)">
 <summary>
 Pula uma ou mais linhas no console
 </summary>
 <param name="Lines">Numero de linhas</param>
</member>
<member name="M:InnerLibs.Console.Console.Clear">
 <summary>
 Limpa a tela do console
 </summary>
</member>
<member name="M:InnerLibs.Console.Console.ReadLine">
 <summary>
 Le a proxima linha inserida no console pelo usuário
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Console.Console.Read">
 <summary>
 Le o proximo caractere inserido no console pelo usuário
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Console.Console.ReadKey">
 <summary>
 Le a proxima tecla pressionada pelo usuário
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Console.Console.Beep(System.Int32)">
 <summary>
 Toca um Beep
 </summary>
 <param name="Times">Numero de beeps</param>
</member>
<member name="M:InnerLibs.Console.Console.Beep(System.Int32,System.Int32)">
 <summary>
 Toca um beep especifico
 </summary>
 <param name="Frequency">Frequencia</param>
 <param name="Duration">Duracao em milisegundos</param>
</member>
<member name="P:InnerLibs.Console.Console.Title">
 <summary>
 Titulo da janela do console
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Cronometer.Format">
 <summary>
 Formato do Cronometro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.Cronometer.ToString">
 <summary>
 Texto atual do cronometro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.Cronometer.ToString(System.String)">
 <summary>
 Texto atual do cronometro
 </summary>
 Formato do Cronometro(
 <see cref="M:System.TimeSpan.ToString(System.String)"/>
 )
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Cronometer.Laps">
 <summary>
 Lista de <see cref="T:System.DateTime"/> dos valores de cada Lap
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.Cronometer.GetLaps(System.String)">
 <summary>
 Retorna uma lista de strings da extraidas da <see cref="P:InnerLibs.TimeMachine.Cronometer.Laps"/> em um formato
 especifico de data
 </summary>
 Formato do Cronometro(
 <see cref="M:System.TimeSpan.ToString(System.String)"/>
 )
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Cronometer.ToTimeFlow">
 <summary>
 Retorna um <see cref="T:InnerLibs.TimeMachine.TimeFlow"/> calculado para este cronometro.
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.Cronometer.#ctor(System.String,System.Int64)">
 <summary>
 Declara um novo objeto Cronometer
 </summary>
 <param name="Format">
 Formato do Cronometro( <see cref="M:System.TimeSpan.ToString(System.String)"/> )
 </param>
</member>
<member name="P:InnerLibs.TimeMachine.Cronometer.Value">
 <summary>
 Retorna o valor atual do cronometro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.Cronometer.Start">
 <summary>
 Inicia o cronometro
 </summary>
</member>
<member name="M:InnerLibs.TimeMachine.Cronometer.StartOver">
 <summary>
 Renicia o cronometro. é o equivalente em chamar <see cref="M:InnerLibs.TimeMachine.Cronometer.Reset"/> e <see cref="M:InnerLibs.TimeMachine.Cronometer.Start"/>
 </summary>
</member>
<member name="M:InnerLibs.TimeMachine.Cronometer.Lap">
 <summary>
 Marca um valor no cronometro
 </summary>
</member>
<member name="M:InnerLibs.TimeMachine.Cronometer.Reset">
 <summary>
 Limpa os valores do cronometro
 </summary>
</member>
<member name="M:InnerLibs.TimeMachine.Cronometer.Stop">
 <summary>
 Para o cronometro
 </summary>
</member>
<member name="E:InnerLibs.TimeMachine.Cronometer.OnLap">
 <summary>
 ocorre toda vez que a função <see cref="M:InnerLibs.TimeMachine.Cronometer.Lap"/> é chamada
 </summary>
</member>
<member name="E:InnerLibs.TimeMachine.Cronometer.OnStart">
 <summary>
 Ocorre toda vez que o cronometro inicia ( <see cref="M:InnerLibs.TimeMachine.Cronometer.Start"/>)
 </summary>
</member>
<member name="E:InnerLibs.TimeMachine.Cronometer.OnStop">
 <summary>
 Ocorre toda vez que o cronometro para ( <see cref="M:InnerLibs.TimeMachine.Cronometer.Stop"/>)
 </summary>
</member>
<member name="E:InnerLibs.TimeMachine.Cronometer.OnReset">
 <summary>
 Ocorre toda vez que o cronometro Reinicia <see cref="M:InnerLibs.TimeMachine.Cronometer.Reset"/>)
 </summary>
</member>
<member name="E:InnerLibs.TimeMachine.Cronometer.OnChange">
 <summary>
 Ocorre toda vez que o cronometro iniciar, mudar de valor, parar, reiniciar ou marcar uma volta
 </summary>
 <param name="sender"></param>
 <param name="e">     </param>
</member>
<member name="P:InnerLibs.TimeMachine.Stopwatch.InitialTime">
 <summary>
 Valor inicial do contador
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.Stopwatch.#ctor(System.TimeSpan,System.String,System.Int64)">
 <summary>
 Declara um novo objeto Stopwatch
 </summary>
 <param name="InitialTime">Tempo inicial</param>
 <param name="Format">     
 Formato do Contador( <see cref="M:System.TimeSpan.ToString(System.String)"/> )
 </param>
</member>
<member name="M:InnerLibs.TimeMachine.Stopwatch.ToString">
 <summary>
 Texto atual do contador
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.Stopwatch.ToString(System.String)">
 <summary>
 Texto atual do contador
 </summary>
 Formato do contador(
 <see cref="M:System.TimeSpan.ToString(System.String)"/>
 )
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Stopwatch.Value">
 <summary>
 Retorna o valor atual do contador
 </summary>
 <returns></returns>
</member>
<member name="E:InnerLibs.TimeMachine.Stopwatch.OnFinish">
 <summary>
 Ocorre toda vez que o contador chegar a zero
 </summary>
</member>
<member name="T:InnerLibs.TimeMachine.FortnightGroup">
 <summary>
 Lista de dias agrupados em quinzenas
 </summary>
</member>
<member name="P:InnerLibs.TimeMachine.FortnightGroup.StartDate">
 <summary>
 Retorna a data inicial do periodo
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.FortnightGroup.EndDate">
 <summary>
 Retorna a ultima data do periodo
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.FortnightGroup.AllDays">
 <summary>
 Retorna uma lista com todos os dias entre as quinzenas
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.FortnightGroup.#ctor(System.DateTime,System.Int32)">
 <summary>
 Instancia um novo <see cref="T:InnerLibs.TimeMachine.FortnightGroup"/> a partir de uma data e um numero de quinzenas
 </summary>
 <param name="StartDate"></param>
 <param name="FortnightCount"></param>
</member>
<member name="M:InnerLibs.TimeMachine.FortnightGroup.CreateRange(System.DateTime,System.DateTime)">
 <summary>
 Retorna um <see cref="T:InnerLibs.TimeMachine.FortnightGroup"/> a partir de 2 datas
 </summary>
 <param name="StartDate">Data inicial</param>
 <param name="EndDate">Data Final</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.TimeMachine.TimeFlow">
 <summary>
 Classe para comapração entre 2 Datas com possibilidade de validação de dias Relevantes
 </summary>
</member>
<member name="M:InnerLibs.TimeMachine.TimeFlow.#ctor(System.DateTime,System.DateTime,System.DayOfWeek[])">
 <summary>
 Inicia uma instancia de TimeFlow
 </summary>
 <param name="StartDate">Data inicial</param>
 <param name="EndDate">Data Final (data mais recente)</param>
 <param name="RelevantDaysOfWeek">Lista de dias da semana que são relevantes (dias letivos)</param>
</member>
<member name="M:InnerLibs.TimeMachine.TimeFlow.#ctor(System.TimeSpan)">
 <summary>
 Inicia uma instancia de TimeFlow a partir de um TimeSpan
 </summary>
 <param name="Span">Intervalo de tempo</param>
</member>
<member name="M:InnerLibs.TimeMachine.TimeFlow.#ctor(System.DateTime,System.TimeSpan)">
 <summary>
 Inicia uma instancia de TimeFlow a partir de uma data inicial e um TimeSpan
 </summary>
 <param name="StartDate">Data Inicial</param>
 <param name="Span">Intervalo de tempo</param>
</member>
<member name="P:InnerLibs.TimeMachine.TimeFlow.StartDate">
 <summary>
 Data Inicial
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeFlow.EndDate">
 <summary>
 Data Final
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeFlow.RelevantDays">
 <summary>
 Dias Relevantes entre as datas Inicial e Final
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeFlow.AllDays">
 <summary>
 Todos os dias entre as datas Inicial e Final
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeFlow.NonRelevantDays">
 <summary>
 Dias não relevantes entre as datas Inicial e Final
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeFlow.RelevantDaysOfWeek">
 <summary>
 Dias da semana relevantes
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeFlow.NonRelevantDaysOfWeek">
 <summary>
 Dias da semana não relevantes
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeFlow.Years">
 <summary>
 Numero de Anos
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeFlow.Months">
 <summary>
 Numero de Meses
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeFlow.Days">
 <summary>
 Numero de Dias
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeFlow.Hours">
 <summary>
 Numero de Horas
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeFlow.Minutes">
 <summary>
 Numero de Minutos
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeFlow.Seconds">
 <summary>
 Numero de Segundos
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeFlow.Milliseconds">
 <summary>
 Numero de milisegundos
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeFlow.ToTimeElapsedString(System.Boolean)">
 <summary>
 Retorna uma String no formato "X anos, Y meses e Z dias"
 </summary>
 <param name="FullString">Parametro que indica se as horas, minutos e segundos devem ser apresentados caso o tempo seja maior que 1 dia</param>
 <returns>string</returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeFlow.ToString">
 <summary>
 Retorna uma string com a quantidade de itens e o tempo de produção
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.TimeMachine.TimeDemand">
 <summary>
 Classe base para calculo de demandas
 </summary>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.Sunday">
 <summary>
 Domingo
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.Monday">
 <summary>
 Segunda-Feira
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.Tuesday">
 <summary>
 Terça-Feira
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.Wednesday">
 <summary>
 Quarta-Feira
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.Thursday">
 <summary>
 Quinta-Feira
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.Friday">
 <summary>
 Sexta-Feira
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.Saturday">
 <summary>
 Sábado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.Item">
 <summary>
 item da Produção
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.StartDate">
 <summary>
 Data Inicial da produção
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.PushDateIntoJourney(System.DateTime@)">
 <summary>
 Empurra a data para dentro da proxima hora disponivel dentro jornada de trabalho
 </summary>
 <param name="[Date]">Data a ser Verificada</param>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.EndDate">
 <summary>
 Data de encerramento da produção
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.#ctor(System.DateTime,System.TimeSpan,System.Int32,System.String,System.String)">
 <summary>
 Inicia uma nova Demanda com as propriedades do item
 </summary>
 <param name="StartDate">Data Inicial da produção</param>
 <param name="Time">Tempo do item</param>
 <param name="Quantity">Quantidade de itens</param>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.CloneAndQueue(System.TimeSpan)">
 <summary>
 Cria uma demanda após a demanda atual com as mesmas caracteristicas
 </summary>
 <param name="SafeTime">Tempo adicionado entre uma demanda e outra</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.WorkDays(System.DayOfWeek[])">
 <summary>
 Dias especificos da semana entre as datas inicial e final da demanda
 </summary>
 <param name="DaysOfWeek">Dias da semana</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.RelevantDays">
 <summary>
 Dias relevantes (letivos) entre as datas inicial e final
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.NonRelevantDays">
 <summary>
 Dias não relevantes (nao letivos e feriados) entre as datas inicial e final
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.BuildTimeFlow">
 <summary>
 Retorna um TimeFlow desta demanda
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.ToString">
 <summary>
 Retorna uma string representado a quantidade de itens e o tempo gasto com a produção
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.ToTimeElapsedString(System.Boolean)">
 <summary>
 Retorna uma String no formato "X anos, Y meses e Z dias"
 </summary>
 <param name="FullString">Parametro que indica se as horas, minutos e segundos devem ser apresentados caso o tempo seja maior que 1 dia</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.#ctor">
 <summary>
 inicia uma nova demanda
 </summary>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.GetPercentCompletion(System.DateTime)">
 <summary>
 Retorna a porcentagem em relacao a posição de uma data entre a data inicial (0%) e final (100%)
 </summary>
 <param name="MidDate"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.RelevantDaysOfWeek">
 <summary>
 Dias da semana relevantes
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.HoliDays">
 <summary>
 Feriados, pontos facuultativos e/ou datas especificas consideradas não relevantes
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.NonRelevantDaysOfWeek">
 <summary>
 Dias da semana não relevantes
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.TotalTime(System.DateTime)">
 <summary>
 Retorna a jornada de trabalho + hora de almoço de uma data de acordo com as configuracoes desta demanda
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.JourneyTime(System.DateTime)">
 <summary>
 Retorna o tempo da jornada de trabalho de uma data de acordo com as configuracoes desta demanda
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.LunchTime(System.DateTime)">
 <summary>
 Retorna o tempo de almoço de uma data de acordo com as configuracoes desta demanda
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.JourneyStartHour(System.DateTime)">
 <summary>
 Retorna a hora inicial da jornada de uma data de acordo com as configuracoes desta demanda
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.JourneyEndHour(System.DateTime)">
 <summary>
 Retorna a hora final da jornada de uma data acordo com as configuracoes desta demanda
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.LunchStartHour(System.DateTime)">
 <summary>
 Retorno a hora de inicio do almoço de uma data de acordo com as configurações desta demanda
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.LunchEndHour(System.DateTime)">
 <summary>
 Retorna a hora de termino do almoço de uma data de acordo com as configurações desta demanda
 </summary>
 <param name="[Date]"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.TimeDemand.WorkTime">
 <summary>
 Intervalo de horas trabalhadas entre as datas de inicio e fim desta demanda
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.TimeDemand.GetWorkTimeBetween(System.DateTime,System.DateTime)">
 <summary>
 Retorna o intervalo de horas trabalhadas entre duas datas baseado nas confuguracoes desta demanda
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.TimeMachine.Day">
 <summary>
 Dia de Uma Demanda
 </summary>
</member>
<member name="M:InnerLibs.TimeMachine.Day.#ctor">
 <summary>
 Inicia uma instancia de dia letivo
 </summary>
</member>
<member name="M:InnerLibs.TimeMachine.Day.#ctor(System.DateTime,System.TimeSpan,System.DateTime,System.TimeSpan)">
 <summary>
 Inicia uma instancia de dia letivo
 </summary>
 <param name="StartHour">Hora Incial</param>
 <param name="Journey">Jornada de trabalho</param>
</member>
<member name="P:InnerLibs.TimeMachine.Day.JourneyTime">
 <summary>
 Jornada de Trabalho/Produção
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Day.LunchTime">
 <summary>
 Hora de Almoço
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Day.TotalTime">
 <summary>
 Jornada + hora de Almoço
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Day.StartHour">
 <summary>
 Hora inicial da jornada
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Day.LunchHour">
 <summary>
 Hora de almoco
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Day.EndHour">
 <summary>
 Hora que se encerra a jornada (inclui hora de almoço)
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.Day.SetJourney(System.DateTime,System.TimeSpan,System.DateTime,System.TimeSpan)">
 <summary>
 Define a hora inicial e a jornada de trabalho deste dia
 </summary>
 <param name="StartHour"></param>
 <param name="Journey"></param>
 <param name="LunchTime">Horas de Almoço</param>
</member>
<member name="T:InnerLibs.TimeMachine.Item">
 <summary>
 Item de Uma demanda
 </summary>
</member>
<member name="P:InnerLibs.TimeMachine.Item.Quantity">
 <summary>
 Quantidade de itens
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Item.Time">
 <summary>
 Tempo de produção de 1 item
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Item.ProductionTime">
 <summary>
 Tempo totald e produção de todos os itens
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Item.SingularItem">
 <summary>
 String que representa o item quando sua quantidade é 1
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.TimeMachine.Item.MultipleItem">
 <summary>
 string que representa o item quando sua quantidade é maior que 1
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.TimeMachine.Item.ToString">
 <summary>
 Retorna uma string que representa a quantidade do item
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataGridViewManager.BuildFromClass``1(System.Windows.Forms.DataGridView@,System.Collections.Generic.List{``0})">
 <summary>
 Cria as colunas e linhas de um DataGridView de acordo com uma lista de um objeto do mesmo tipo
 </summary>
 <param name="DataGridView">DataGridView de Destino</param>
 <param name="MyObject">Lista de Itens do mesmo Tipo</param>
 <typeparam name="Type">Tipo de Item</typeparam>
</member>
<member name="M:InnerLibs.DataManipulation.SetParameter(System.Data.Common.DbParameterCollection@,System.Data.Common.DbParameter)">
 <summary>
 Adiciona ou troca o valor de um parametro em uma coleção
 </summary>
 <param name="Params">Coleçao</param>
 <param name="Parameter">Parâmetro</param>
</member>
<member name="M:InnerLibs.DataManipulation.GetDbType(System.Object)">
 <summary>
 Retorna o DbType de acordo com o tipo do objeto
 </summary>
 <param name="Obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataManipulation.AppendSQLParameter(System.String@,System.String,System.String)">
 <summary>
 Concatena um parametro a uma string de comando SQL
 </summary>
 <param name="Command">Comando sql</param>
 <param name="Key">nome do parametro</param>
 <param name="Value">valor do parametro</param>
</member>
<member name="M:InnerLibs.DataManipulation.ToDataTableReader(System.String[])">
 <summary>
 Converte um Array para um DataTableReader de 1 Coluna
 </summary>
 <param name="Input">Array com 1 coluna a ser convertida</param>
 <returns>Um DataReader de 1 Coluna</returns>
</member>
<member name="M:InnerLibs.DataManipulation.AddFile(System.Data.Common.DbCommand@,System.String,System.Web.HttpPostedFile)">
 <summary>
 Adiciona um parametro de Arquivo no commando
 </summary>
 <param name="Command">Comando</param>
 <param name="FileParameter">Parametro de arquivo</param>
 <param name="File">Arquivo postado</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataManipulation.AddFile(System.Data.Common.DbCommand@,System.String,System.IO.FileInfo)">
 <summary>
 Adiciona um parametro de Arquivo no commando
 </summary>
 <param name="Command">Comando</param>
 <param name="FileParameter">Parametro de arquivo</param>
 <param name="File">Arquivo postado</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataManipulation.AddFile(System.Data.Common.DbCommand@,System.String,System.Byte[])">
 <summary>
 Adiciona um parametro de Arquivo no commando
 </summary>
 <param name="Command">Comando</param>
 <param name="FileParameter">Parametro de arquivo</param>
 <param name="File">Array de bytes</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataManipulation.ToDataSet(System.String[])">
 <summary>
 Converte um Array para um <see cref="T:System.Data.DataSet"/> de 1 Coluna
 </summary>
 <param name="Input">Array com 1 coluna a ser convertida</param>
 <returns>um DataSet de 1 Coluna</returns>
</member>
<member name="M:InnerLibs.DataManipulation.ToDataBaseReader(System.Data.Common.DbDataReader)">
 <summary>
 Converte um <see cref="T:System.Data.Common.DbDataReader"/> para um <see cref="T:InnerLibs.DataBase.Reader"/>
 </summary>
 <param name="Reader">Reader</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.DiceRoller">
 <summary>
 Combinação de varios dados de RPG que podem ser rolados ao mesmo tempo
 </summary>
</member>
<member name="M:InnerLibs.DiceRoller.#ctor(InnerLibs.Dice[])">
 <summary>
 Cria uma nova combinação de Dados
 </summary>
 <param name="Dices">Dados de RPG</param>
</member>
<member name="M:InnerLibs.DiceRoller.#ctor(InnerLibs.DiceRoller[])">
 <summary>
 Cria uma nova combinação de Dados
 </summary>
 <param name="DiceRollers">Dados de RPG</param>
</member>
<member name="M:InnerLibs.DiceRoller.#ctor(System.Collections.Generic.List{InnerLibs.Dice}[])">
 <summary>
 Cria uma nova combinação de Dados
 </summary>
 <param name="ListOfDices">Lista de dados de RPG</param>
</member>
<member name="M:InnerLibs.DiceRoller.#ctor(InnerLibs.DiceType[])">
 <summary>
 Cria uma nova combinação de novos dados a criados a partir de varios tipos
 </summary>
 <param name="DiceType">Tipos Dados de RPG</param>
</member>
<member name="P:InnerLibs.DiceRoller.Value">
 <summary>
 Retorna a soma de todos os valores dos dados
 </summary>
 <returns>Integer</returns>
</member>
<member name="M:InnerLibs.DiceRoller.Roll">
 <summary>
 Rola todos os dados e retorna a soma de seus valores
 </summary>
 <returns>Retorna a soma de todos os valores dos dados após a rolagem</returns>
</member>
<member name="M:InnerLibs.DiceRoller.op_Addition(InnerLibs.DiceRoller,InnerLibs.Dice)">
 <summary>
 Combina um dado com DiceRoller
 </summary>
 <param name="Combo">Dado 1</param>
 <param name="Dice">Dado 2</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DiceRoller.op_Addition(InnerLibs.Dice,InnerLibs.DiceRoller)">
 <summary>
 Combina um dado com DiceRoller
 </summary>
 <param name="Combo">Dado 1</param>
 <param name="Dice">Dado 2</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DiceRoller.op_Addition(InnerLibs.DiceRoller,InnerLibs.DiceRoller)">
 <summary>
 Combina um dado com DiceRoller
 </summary>
 <param name="Combo1">Combo de Dados 1</param>
 <param name="Combo2">Combo de Dados 2</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Dice">
 <summary>
 Dado de RPG
 </summary>
</member>
<member name="M:InnerLibs.Dice.op_Addition(InnerLibs.Dice,InnerLibs.Dice)">
 <summary>
 Combina 2 dados em um DiceRoller
 </summary>
 <param name="Dice1">Dado 1</param>
 <param name="Dice2">Dado 2</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.Dice.Type">
 <summary>
 Tipo do dado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Dice.IsCustom">
 <summary>
 Indica se o dado é um dado com faces customizadas
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Dice.IsVicious">
 <summary>
 Verifica se o dado possui algum lado viciado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Dice.Value">
 <summary>
 Valor atual deste dado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Dice.RolledTimes">
 <summary>
 Numero de vezes que este dado já foi rolado
 </summary>
 <returns>Integer</returns>
</member>
<member name="M:InnerLibs.Dice.Roll">
 <summary>
 Rola o dado e retorna seu valor
 </summary>
 <returns>Integer</returns>
</member>
<member name="M:InnerLibs.Dice.SetFaceWeight(System.Int32,System.Int32)">
 <summary>
 Altera o Peso de uma face do dado (Vicia o dado)
 </summary>
 <param name="FaceNumber">Numero da face</param>
 <param name="Weight">Peso da Face</param>
</member>
<member name="M:InnerLibs.Dice.NormalizeWeight">
 <summary>
 Normaliza o peso das faces do dado
 </summary>
</member>
<member name="P:InnerLibs.Dice.Faces">
 <summary>
 Faces do dado
 </summary>
 <returns>Um array com a cópia das faces do dado</returns>
</member>
<member name="M:InnerLibs.Dice.#ctor(InnerLibs.DiceType)">
 <summary>
 Cria um novo dado de um tipo especifico
 </summary>
 <param name="Type">Tipo de dado</param>
</member>
<member name="M:InnerLibs.Dice.#ctor(System.Int32)">
 <summary>
 Cria um novo dado com um numero customizado de faces
 </summary>
 <param name="CustomFaces">Numero de faces do dado (Minimo de 2 faces)</param>
</member>
<member name="T:InnerLibs.Dice.Face">
 <summary>
 Face de um dado. Pode ser viciada ou não
 </summary>
</member>
<member name="P:InnerLibs.Dice.Face.Value">
 <summary>
 Valor Da Face (numero)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Dice.Face.Weight">
 <summary>
 Peso da face (vicia o dado)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Dice.Face.WeightPercent">
 <summary>
 Peso da face (vicia o dado)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Dice.Face.IsVicious">
 <summary>
 Valor que indica se a face está viciada
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Dice.Face.#ctor(System.Int32)">
 <summary>
 Cria uma nova Face
 </summary>
 <param name="FaceNumber">Numero da face</param>
</member>
<member name="T:InnerLibs.DiceType">
 <summary>
 Tipos de Dados
 </summary>
</member>
<member name="F:InnerLibs.DiceType.Custom">
 <summary>
 Dado customizado
 </summary>
</member>
<member name="F:InnerLibs.DiceType.Coin">
 <summary>
 Moeda
 </summary>
</member>
<member name="F:InnerLibs.DiceType.D4">
 <summary>
 Dado de 4 Lados
 </summary>
</member>
<member name="F:InnerLibs.DiceType.D6">
 <summary>
 Dado de 6 Lados
 </summary>
</member>
<member name="F:InnerLibs.DiceType.D8">
 <summary>
 Dado de 8 Lados
 </summary>
</member>
<member name="F:InnerLibs.DiceType.D10">
 <summary>
 Dado de 10 Lados
 </summary>
</member>
<member name="F:InnerLibs.DiceType.D12">
 <summary>
 Dado de 12 Lados
 </summary>
</member>
<member name="F:InnerLibs.DiceType.D20">
 <summary>
 Dado de 20 Lados
 </summary>
</member>
<member name="F:InnerLibs.DiceType.D100">
 <summary>
 Dado de 100 Lados (Util para porcentagem)
 </summary>
</member>
<member name="P:InnerLibs.FileLogger.File">
 <summary>
 Local do arquivo de log
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileLogger.Add(System.String,System.String)">
 <summary>
 Adiciona uma Entrada ao Log
 </summary>
 <param name="Title"></param>
 <param name="Message"></param>
</member>
<member name="M:InnerLibs.FileLogger.#ctor(System.IO.FileInfo)">
 <summary>
 Inicia uma nova instancia de Log
 </summary>
 <param name="File">Arquivo</param>
</member>
<member name="M:InnerLibs.FileLogger.#ctor(System.String)">
 <summary>
 Inicia uma nova instancia de Log
 </summary>
 <param name="Path">Caminho do arquivo</param>
</member>
<member name="T:InnerLibs.Files">
 <summary>
 Módulo para criação de arquivos baseados em Array de Bytes()
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Files.WriteToFile(System.Byte[],System.String)">
 <summary>
 Transforma um  Array de Bytes em um arquivo
 </summary>
 <param name="Bytes">A MAtriz com os Bytes  a ser escrita</param>
 <param name="FilePath">Caminho onde o arquivo será gravado</param>
 <returns>Um Fileinfo contendo as informações do arquivo criado</returns>
</member>
<member name="M:InnerLibs.Files.ReadText(System.IO.FileInfo)">
 <summary>
 Retorna o conteudo de um arquivo de texto
 </summary>
 <param name="File">Arquivo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Files.ToBytes(System.IO.FileInfo)">
 <summary>
 Transforma um arquivo em um Array de Bytes
 </summary>
 <param name="File">O arquivo a ser convertido</param>
 <returns>Um array do tipo Byte()</returns>
</member>
<member name="M:InnerLibs.Files.ToBytes(System.Web.HttpPostedFile)">
 <summary>
 Transforma um HttpPostedFile em array de bytes
 </summary>
 <param name="File">Arquivo postado</param>
 <returns>Um array do tipo Byte()</returns>
</member>
<member name="M:InnerLibs.Files.WriteToFile(System.String,System.String,System.Boolean)">
 <summary>
 Salva um texto em um arquivo
 </summary>
 <param name="Text">TExto</param>
 <param name="FilePath">Caminho do arquivo</param>
 <returns>Um Fileinfo contendo as informações do arquivo criado</returns>
</member>
<member name="M:InnerLibs.Files.WriteToFile(System.String,System.IO.FileInfo,System.Boolean)">
 <summary>
 Salva um texto em um arquivo
 </summary>
 <param name="Text">TExto</param>
 <param name="File">Arquivo</param>
 <returns>Um Fileinfo contendo as informações do arquivo criado</returns>
</member>
<member name="M:InnerLibs.Files.GetLatestDirectoryName(System.IO.FileInfo)">
 <summary>
 Retorna o nome do diretorio onde o arquivo se encontra
 </summary>
 <param name="Path">Caminho do arquivo</param>
 <returns>o nome do diretório sem o caminho</returns>
</member>
<member name="T:InnerLibs.Calendars">
 <summary>
 Modulo para manipulação de calendário
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Calendars.IsOverlap(System.DateTime,System.DateTime,System.DateTime,System.DateTime)">
 <summary>
 Veirifica se existe intersecção entre dois periodos
 </summary>
 <param name="StartDate1">Data inicial do primeiro periodo</param>
 <param name="EndDate1">Data Final do primeiro periodo</param>
 <param name="StartDate2">Data inicial do segundo periodo</param>
 <param name="EndDate2">Data Final do primeiro periodo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.DateRange(System.DateTime,System.DateTime,System.TimeSpan)">
 <summary>
 Retorna um Array de <see cref="T:System.DateTime"/> contendo todas as datas entre 2 datas
 </summary>
 <param name="StartDate">Data Inicial</param>
 <param name="EndDate">Data Final</param>
 <param name="Increment">Valor a ser incrementado (padrão 1 dia)</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetLastDayOfMonth(System.DateTime)">
 <summary>
 Retorna a ultima data do mes a partir de uma outra data
 </summary>
 <param name="[Date]">Data</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.IsAnniversary(System.DateTime,System.Boolean)">
 <summary>
 Verifica se a Data de hoje é um aniversário
 </summary>
 <param name="BirthDate">  Data de nascimento</param>
 <param name="UseTomorrow">Verifica se o aniversario é Amanha</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.ToSQLDateString(System.DateTime)">
 <summary>
 COnverte um datetime para o formato de string do SQL server ou Mysql
 </summary>
 <param name="[Date]">Data</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.ToSQLDateString(System.String,System.String)">
 <summary>
 Converte uma string dd/mm/aaaa hh:mm:ss.llll para o formato de string do SQL server ou Mysql
 </summary>
 <param name="[Date]">Data</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetDifference(System.DateTime,System.DateTime)">
 <summary>
 Retorna uma TimeMachine com a diferença entre 2 Datas
 </summary>
 <param name="InitialDate"></param>
 <param name="SecondDate"> </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.FixDateOrder(System.DateTime@,System.DateTime@)">
 <summary>
 Troca ou não a ordem das variaveis de inicio e fim de um periodo fazendo com que a StartDate
 sempre seja uma data menor que a EndDate, prevenindo que o calculo entre 2 datas resulte em um
 <see cref="T:System.TimeSpan"/> negativo
 </summary>
 <param name="StartDate">Data Inicial</param>
 <param name="EndDate">  Data Final</param>
</member>
<member name="M:InnerLibs.Calendars.IsBetween(System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
 <summary>
 Verifica se uma data se encontra entre 2 datas
 </summary>
 <param name="MidDate">   Data</param>
 <param name="StartDate"> Data Inicial</param>
 <param name="EndDate">   Data final</param>
 <param name="IgnoreTime">Indica se o tempo deve ser ignorado na comparação</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.GetBetween(System.DateTime,System.DateTime,System.DayOfWeek[])">
 <summary>
 Retorna uma lista com as datas de dias especificos da semana entre 2 datas
 </summary>
 <param name="StartDate">Data inicial</param>
 <param name="EndDate">  data Final</param>
 <param name="Days">     Dias da semana</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Calendars.ClearTime(System.Collections.Generic.List{System.DateTime})">
 <summary>
 Remove o tempo de todas as datas de uma lista (retorna uma nova lista)
 </summary>
 <param name="List">Lista que será alterada</param>
</member>
<member name="M:InnerLibs.Calendars.ToTimeElapsedString(System.TimeSpan,System.String,System.String,System.String,System.String)">
 <summary>
 Retorna uma String no formato "W dias, X horas, Y minutos e Z segundos"
 </summary>
 <param name="TimeElapsed">TimeSpan com o intervalo</param>
 <returns>string</returns>
</member>
<member name="M:InnerLibs.Calendars.ToLongMonthName(System.Int32)">
 <summary>
 Retorna uma String baseado no numero do Mês Ex.: 1 -&gt; Janeiro
 </summary>
 <param name="MonthNumber">Numero do Mês</param>
 <returns>String com nome do Mês</returns>
</member>
<member name="M:InnerLibs.Calendars.ToLongMonthName(System.DateTime)">
 <summary>
 Retorna uma String com o nome do mes baseado na data
 </summary>
 <param name="DateTime">Data</param>
 <returns>String com nome do Mês</returns>
</member>
<member name="M:InnerLibs.Calendars.ToShortMonthName(System.Int32)">
 <summary>
 Retorna uma String curta baseado no numero do Mês Ex.: 1 -&gt; Jan
 </summary>
 <param name="MonthNumber">Numero do Mês</param>
 <returns>String com nome curto do Mês</returns>
</member>
<member name="M:InnerLibs.Calendars.ToLongDayOfWeekName(System.Int32)">
 <summary>
 Retorna uma String baseado no numero do Dia da Semana Ex.: 2 -&gt; Segunda-Feira
 </summary>
 <param name="DayNumber">Numero do Dia</param>
 <returns>String com nome do Dia</returns>
</member>
<member name="M:InnerLibs.Calendars.ToShortDayOfWeekName(System.Int32)">
 <summary>
 Retorna uma String baseado no numero do Dia da Semana Ex.: 2 -&gt; Seg
 </summary>
 <param name="DayNumber">Numero do Dia</param>
 <returns>String com nome curto do Dia</returns>
</member>
<member name="P:InnerLibs.Calendars.Tomorrow">
 <summary>
 Retorna a data de amanhã
 </summary>
 <returns>Data de amanhã</returns>
</member>
<member name="P:InnerLibs.Calendars.Yesterday">
 <summary>
 Retorna a data de ontem
 </summary>
 <returns>Data de ontem</returns>
</member>
<member name="M:InnerLibs.Calendars.IsWeekend(System.DateTime)">
 <summary>
 Verifica se o dia se encontra no fim de semana
 </summary>
 <param name="YourDate">Uma data qualquer</param>
 <returns>TRUE se for sabado ou domingo, caso contrario FALSE</returns>
</member>
<member name="M:InnerLibs.Calendars.ToFarewell(System.DateTime,System.String)">
 <summary>
 Transforma um DateTime em uma despedida (Bom dia, Boa tarde, Boa noite)
 </summary>
 <param name="Time">    Horario</param>
 <param name="Language">Idioma da saudação (pt, en, es)</param>
 <returns>Uma string com a despedida</returns>
</member>
<member name="M:InnerLibs.Calendars.ToGreeting(System.DateTime,System.String)">
 <summary>
 Transforma um DateTime em uma saudação (Bom dia, Boa tarde, Boa noite)
 </summary>
 <param name="Time">    Horario</param>
 <param name="Language">Idioma da saudação (pt, en, es)</param>
 <returns>Uma string com a despedida</returns>
</member>
<member name="P:InnerLibs.Calendars.Greeting(System.String)">
 <summary>
 Retorna uma saudação
 </summary>
 <param name="Language">Idioma da saudação (pt, en, es)</param>
 <returns>Uma string com a saudação</returns>
</member>
<member name="P:InnerLibs.Calendars.Farewell(System.String)">
 <summary>
 Retorna uma despedida
 </summary>
 <param name="Language">Idioma da despedida (pt, en, es)</param>
 <returns>Uma string com a despedida</returns>
</member>
<member name="P:InnerLibs.Calendars.Months(InnerLibs.Calendars.TypeOfFill,InnerLibs.Calendars.TypeOfFill)">
 <summary>
 Returna uma lista dupla com os meses
 </summary>
 <param name="ValueType">Apresentação dos meses no valor</param>
<param name="TextType">Apresentação dos meses no texto</param>
</member>
<member name="P:InnerLibs.Calendars.WeekDays(InnerLibs.Calendars.TypeOfFill,InnerLibs.Calendars.TypeOfFill)">
 <summary>
 Returna uma lista dupla com os meses
 </summary>
 <param name="ValueType">Apresentação dos meses no valor</param>
<param name="TextType">Apresentação dos meses no texto</param>
</member>
<member name="M:InnerLibs.Calendars.FillWith(System.Web.UI.HtmlControls.HtmlSelect,InnerLibs.Calendars.CalendarType,InnerLibs.Calendars.TypeOfFill,InnerLibs.Calendars.TypeOfFill)">
 <summary>
 Preenche um HtmlSelect com MESES ou DIAS DA SEMANA
 </summary>
 <param name="Box">Select HTML</param>
 <param name="ValueType">Apresentação dos meses no valor</param>
<param name="TextType">Apresentação dos meses no texto</param>
</member>
<member name="T:InnerLibs.Calendars.TypeOfFill">
 <summary>
 Tipo de Apresentação dos Meses/Dias da Semana/Estado
 </summary>
</member>
<member name="F:InnerLibs.Calendars.TypeOfFill.Number">
 <summary>
 Numerico
 </summary>
</member>
<member name="F:InnerLibs.Calendars.TypeOfFill.ShortName">
 <summary>
 Abreviado
 </summary>
</member>
<member name="F:InnerLibs.Calendars.TypeOfFill.LongName">
 <summary>
 Completo
 </summary>
</member>
<member name="T:InnerLibs.Calendars.CalendarType">
 <summary>
 Elemento do calendário
 </summary>
</member>
<member name="M:InnerLibs.Calendars.CalculatePercent(System.DateTime,System.DateTime,System.DateTime)">
 <summary>
 Calcula a porcentagem de diferenca entre duas datas de acordo com a data inicial especificada
 </summary>
 <param name="MidDate">  Data do meio a ser verificada (normalmente Now)</param>
 <param name="StartDate">Data Inicial</param>
 <param name="EndDate">  Data Final</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.ColorConvert">
 <summary>
 Modulo de Conversão de Cores
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.ColorConvert.GetNegativeColor(System.Drawing.Color)">
 <summary>
 Retorna  a cor negativa de uma cor
 </summary>
 <param name="TheColor">Cor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorConvert.GetContrastColor(System.Drawing.Color,System.Single)">
 <summary>
 Retorna uma cor de contraste baseado na iluminacao da primeira cor: Uma cor clara se a primeira for escura. Uma cor escura se a primeira for clara
 </summary>
 <param name="TheColor">Primeira cor</param>
 <param name="Percent">Grau de mesclagem da cor escura ou clara</param>
 <returns>Uma cor clara se a primeira cor for escura, uma cor escura se a primeira for clara</returns>
</member>
<member name="M:InnerLibs.ColorConvert.IsDark(System.Drawing.Color)">
 <summary>
 Verifica se uma cor é escura
 </summary>
 <param name="TheColor">Cor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorConvert.IsLight(System.Drawing.Color)">
 <summary>
 Verifica se uma clor é clara
 </summary>
 <param name="TheColor">Cor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorConvert.MergeWith(System.Drawing.Color,System.Drawing.Color,System.Single)">
 <summary>
 Mescal duas cores a partir de uma porcentagem
 </summary>
 <param name="TheColor">Cor principal</param>
 <param name="AnotherColor">Cor de mesclagem</param>
 <param name="percent">Porcentagem de mescla</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorConvert.MakeDarker(System.Drawing.Color,System.Single)">
 <summary>
 Escurece a cor mesclando ela com preto
 </summary>
 <param name="TheColor">Cor</param>
 <param name="percent">porcentagem de mesclagem</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorConvert.MakeLighter(System.Drawing.Color,System.Single)">
 <summary>
 Clareia a cor mistuando ela com branco
 </summary>
 <param name="TheColor">Cor</param>
 <param name="percent">Porcentagem de mesclagem</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorConvert.Lerp(System.Drawing.Color,System.Drawing.Color,System.Single)">
 <summary>
 Mescla duas cores usando Lerp
 </summary>
 <param name="TheColor">Cor</param>
 <param name="[to]">Outra cor</param>
 <param name="amount">Indice de mesclagem</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.ColorConvert.ToHexadecimal(System.Drawing.Color,System.Boolean)">
 <summary>
 Converte uma cor de sistema para hexadecimal
 </summary>
 <param name="Color">Cor do sistema</param>
 <param name="Hash">parametro indicando se a cor deve ser retornada com ou sem hashsign (#)</param>
 <returns>string contendo o hexadecimal da cor</returns>
</member>
<member name="M:InnerLibs.ColorConvert.ToRGB(System.Drawing.Color)">
 <summary>
 Converte uma cor de sistema para CSS RGB
 </summary>
 <param name="Color">Cor do sistema</param>
 <returns>String contendo a cor em RGB</returns>
</member>
<member name="M:InnerLibs.ColorConvert.ToColor(System.String)">
 <summary>
 Converte uma string hexadecimal (HTML) para objeto Color
 </summary>
 <param name="HexadecimalColorString">String Hexadecimal</param>
 <returns>Um objeto color</returns>
</member>
<member name="P:InnerLibs.Converter.Units">
 <summary>
 Unidades de medida de yocto a quintilhão
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Converter.ParseUnitString(System.String)">
 <summary>
 Converte um numero na sua forma abreviada para um tipo numérico
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Converter.ForceArray(System.Object)">
 <summary>
 Verifica se um objeto é um array, e se negativo, cria um array de um unico item com o valor do objeto
 </summary>
 <param name="Obj">Objeto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Converter.ForceArray``1(System.Object)">
 <summary>
 Verifica se um objeto é um array, e se negativo, cria um array de um unico item com o valor do objeto
 </summary>
 <param name="Obj">Objeto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Converter.ToHtmlTable(System.Collections.Generic.List{System.Collections.Generic.IDictionary{System.String,System.Object}})">
 <summary>
 Converte uma lista de dicionários para uma tabela HTML
 </summary>
 <param name="Table"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Converter.Uniform``2(System.Collections.Generic.List{System.Collections.Generic.IDictionary{``0,``1}})">
 <summary>
 Aplica as mesmas keys a todos os dicionarios de uma lista
 </summary>
 <typeparam name="TKey">Tipo da key</typeparam>
 <typeparam name="TValue">Tipo do Valor</typeparam>
 <param name="Dics">Dicionarios</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Converter.Uniform``2(System.Collections.Generic.IDictionary{``0,``1}[])">
 <summary>
 Aplica as mesmas keys a todos os dicionarios de uma lista
 </summary>
 <typeparam name="TKey">Tipo da key</typeparam>
 <typeparam name="TValue">Tipo do Valor</typeparam>
 <param name="Dics">Dicionarios</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Converter.To``1(System.Object)">
 <summary>
 Converte um tipo para outro
 </summary>
 <typeparam name="T">Tipo</typeparam>
 <param name="Value">Variavel com valor</param>
 <returns>Valor convertido em novo tipo</returns>
</member>
<member name="M:InnerLibs.Converter.ToDictionary(System.Web.HttpRequest,System.String[])">
 <summary>
 Transforma um <see cref="T:System.Web.HttpRequest"/> em um <see cref="T:System.Collections.Generic.Dictionary`2"/>
 </summary>
 <param name="Request">HttpRequest</param>
 <param name="Keys">Keys que devem ser incluidas</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Converter.ToDictionary(System.Collections.Specialized.NameValueCollection,System.String[])">
 <summary>
 Converte um NameValueCollection para um <see cref="T:System.Collections.Generic.Dictionary`2"/>
 </summary>
 <param name="[NameValueCollection]">Formulario</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Converter.ToJSON(System.Collections.Specialized.NameValueCollection,System.String)">
 <summary>
 Converte um NameValueCollection para string JSON
 </summary>
 <param name="[NameValueCollection]">Formulário</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Converter.ToJSON(System.Web.HttpRequest,System.String)">
 <summary>
 COnverte os Valores de um Formulário enviado por GET ou POST em JSON
 </summary>
 <param name="Request">Request GET ou POST</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.DataBase.Reader">
 <summary>
 Estrutura que imita um <see cref="T:System.Data.Common.DbDataReader"/> usando estruturas de  <see cref="T:System.Collections.Generic.Dictionary`2"/>. Permite a leitura
 releitura, atribuição e serialização mesmo após o fechamento da conexão.
 </summary>
</member>
<member name="M:InnerLibs.DataBase.Reader.ToString">
 <summary>
 Retorna um Json do objeto
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.Dispose">
 <summary>
 Esvazia o reader
 </summary>
</member>
<member name="M:InnerLibs.DataBase.Reader.Close">
 <summary>
 Esvazia e destroi o reader
 </summary>
</member>
<member name="P:InnerLibs.DataBase.Reader.IsClosed">
 <summary>
 Verifica se o Reader está vazio ou fechado ( <see cref="P:System.Collections.Generic.List`1.Count"/> = 0)
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.GetColumns">
 <summary>
 Retorna as colunas do resultado atual
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.CountRows">
 <summary>
 Retorna o numero de linhas do resultado atual
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.CountRows(System.Int32)">
 <summary>
 Retorna o numero de linhas de um resultado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.DataBase.Reader.Item(System.String)">
 <summary>
 Retorna o valor da coluna do resultado e linha atual a partir do nome da coluna
 </summary>
 <param name="ColumnName">Nome da Coluna</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.GetItem``1(System.String)">
 <summary>
 Retorna o valor da coluna do resultado e linha atual a partir do nome da coluna convertendo para um outro tipo
 </summary>
 <typeparam name="Type"></typeparam>
 <param name="ColumnName"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.GetItem``1(System.Int32)">
 <summary>
 Retorna o valor da coluna do resultado e linha atual a partir do índice da coluna convertendo para um outro tipo
 </summary>
 <typeparam name="Type"></typeparam>
 <param name="ColumnIndex"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.DataBase.Reader.Item(System.String,System.Int32)">
 <summary>
 Retorna o valor da coluna do resultado de uma linha especifica a partir do nome da coluna
 e o Index da linha
 </summary>
 <param name="ColumnName">Nome da Coluna</param>
 <param name="RowIndex">  Índice da Linha</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.DataBase.Reader.Item(System.Int32)">
 <summary>
 Retorna o valor da coluna do resultado e linha atual a partir do índice da coluna
 </summary>
 <param name="ColumnIndex">Índice da Coluna</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.DataBase.Reader.Item(System.Int32,System.Int32)">
 <summary>
 Retorna o valor da coluna do resultado de uma linha especifica a partir do nome da coluna
 e o Index da linha
 </summary>
 <param name="ColumnIndex">Índice da Coluna</param>
 <param name="RowIndex">   Índice da Linha</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.DataBase.Reader.HasRows">
 <summary>
 Verifica se o resultado atual possui linhas
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.DataBase.Reader.HasResults">
 <summary>
 Verifica se exitem resultados
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.GetResult(System.Int32)">
 <summary>
 Retorna um resultado (tabela) a partir do seu Index.
 </summary>
 <param name="ResultIndex">Indice do resultado</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.GetRow(System.Int32)">
 <summary>
 Retorna uma linha do resultado atual
 </summary>
 <param name="RowIndex"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.GetCurrentRow">
 <summary>
 Retorna a linha atual do resultado atual
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.ToJSON(System.String)">
 <summary>
 Retorna um Json do Reader
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.ToJSON(System.Int32,System.String)">
 <summary>
 Retorna o Json do resultado especifico
 </summary>
 <param name="ResultIndex">Índice do resultado</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.Search(System.Object)">
 <summary>
 Encontra linhas onde qualquer valor de suas colunas conter um determinado valor
 </summary>
 <param name="Value">Valor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.#ctor(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}}[])">
 <summary>
 Cria um novo Reader a partir de uma coleçao de listas de Dicionários
 </summary>
 <param name="Tables">Conunto de listas de dicionarios</param>
</member>
<member name="M:InnerLibs.DataBase.Reader.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object}[])">
 <summary>
 Cria um novo Reader a partir de uma coleção de dicionários
 </summary>
 <param name="Rows">Conunto de Dicionários</param>
</member>
<member name="M:InnerLibs.DataBase.Reader.#ctor(System.Data.Common.DbDataReader)">
 <summary>
 Cria um novo Reader a partir de um <see cref="T:System.Data.Common.DbDataReader"/>
 </summary>
 <param name="Reader">Reader</param>
</member>
<member name="M:InnerLibs.DataBase.Reader.StartOver">
 <summary>
 Reinicia a leitura do Reader retornando os índices para seus valores padrão, é um alias
 para <see cref="M:InnerLibs.DataBase.Reader.Reset"/>)
 </summary>
</member>
<member name="M:InnerLibs.DataBase.Reader.Reset">
 <summary>
 Reinicia a leitura do Reader retornando os índices para seus valores padrão
 </summary>
</member>
<member name="M:InnerLibs.DataBase.Reader.NextResult">
 <summary>
 Avança para o próximo resultado
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.PreviousResult">
 <summary>
 Retorna para os resultado anterior
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.Read">
 <summary>
 Avança para o próximo registro, é um alias para <see cref="M:InnerLibs.DataBase.Reader.GoForward"/>
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.GoBack">
 <summary>
 Retornar para o registro anterior
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.GoForward">
 <summary>
 Avança para o próximo registro
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.ToListItems(System.String,System.String,System.String[])">
 <summary>
 Cria um array de <see cref="T:System.Web.UI.WebControls.ListItem"/> com os Itens de um <see cref="T:InnerLibs.DataBase.Reader"/>
 </summary>
 <param name="TextColumn">    Coluna que será usada como Texto do elemento option</param>
 <param name="ValueColumn">   Coluna que será usada como Value do elemento option</param>
 <param name="SelectedValues">Valores Selecionados</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.FillSelectControl(System.Web.UI.HtmlControls.HtmlSelect@,System.String,System.String,System.String[])">
 <summary>
 Preenche um <see cref="T:System.Web.UI.HtmlControls.HtmlSelect"/> com itens do <see cref="T:InnerLibs.DataBase.Reader"/>
 </summary>
 <param name="[SelectControl]">Controle HtmlSelect</param>
 <param name="TextColumn">     Coluna que será usada como Texto do elemento option</param>
 <param name="ValueColumn">    Coluna que será usada como Value do elemento option</param>
 '
 <param name="SelectedValues"> Valores Selecionados</param>
</member>
<member name="M:InnerLibs.DataBase.Reader.ToList``1(System.String)">
 <summary>
 Cria uma lista de com os Itens de um <see cref="T:InnerLibs.DataBase.Reader"/> convertendo os valores
 para uma classe ou tipo especifico
 </summary>
 <param name="Column">Coluna que será usada</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.ToList``1">
 <summary>
 Cria uma lista de uma classe específica com os Itens de um <see cref="T:InnerLibs.DataBase.Reader"/>
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.GetValue(System.Int32,System.Int32,System.String)">
 <summary>
 Retorna o valor de uma coluna especifica de um resultado de um <see cref="T:InnerLibs.DataBase.Reader"/>
 </summary>
 <param name="Column">     Coluna</param>
 <param name="ResultIndex">Indice do resultado</param>
 <param name="RowIndex">   Indice da linha dor resultado</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.GetValue``1(System.Int32,System.Int32,System.String)">
 <summary>
 Retorna o valor de uma coluna especifica de um resultado de um <see cref="T:InnerLibs.DataBase.Reader"/>
 </summary>
 <typeparam name="Type">Tipo para qual o valor será convertido</typeparam>
 <param name="Column">     Coluna</param>
 <param name="ResultIndex">Indice do resultado</param>
 <param name="RowIndex">   Indice da linha dor resultado</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.GetCurrentRowValues">
 <summary>
 Retorna um Array de Valores da linha atual
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.ToDictionary``2(System.String,System.String)">
 <summary>
 Cria um Dictionary a partir de <see cref="T:InnerLibs.DataBase.Reader"/> usando uma coluna como Key e
 outra como Value
 </summary>
 <param name="KeyColumn">  Coluna que será usada como Key do dicionario</param>
 <param name="ValueColumn">Coluna que será usada como Value do dicionario</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.ToTextValueList``1(System.String,System.String)">
 <summary>
 Cria uma lista de pares com os Itens de um <see cref="T:InnerLibs.DataBase.Reader"/>
 </summary>
 <param name="TextColumn"> Coluna que será usada como Text do item</param>
 <param name="ValueColumn">Coluna que será usada como Value do item</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.ToQueryString">
 <summary>
 Transforma o resultado de um <see cref="T:InnerLibs.DataBase.Reader"/> em QueryString
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.ToUrl(System.String)">
 <summary>
 Transforma o resultado de um <see cref="T:InnerLibs.DataBase.Reader"/> em uma URL
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.ToDelimitedString(System.String,System.String,System.String)">
 <summary>
 Transforma um <see cref="T:InnerLibs.DataBase.Reader"/> em uma string delimitada por caracteres
 </summary>
 <param name="ColDelimiter">  Delimitador de Coluna</param>
 <param name="RowDelimiter">  Delimitador de Linha</param>
 <param name="TableDelimiter">Delimitador de Tabelas</param>
 <returns>Uma string delimitada</returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.ToXML(System.String,System.String)">
 <summary>
 Converte um <see cref="T:InnerLibs.DataBase.Reader"/> em XML
 </summary>
 <param name="ItemName"> Nome do nó que representa cada linha</param>
 '
 <param name="TableName">Nome do nó principal do documento</param>
</member>
<member name="M:InnerLibs.DataBase.Reader.ToCSV(System.String)">
 <summary>
 Converte um <see cref="T:InnerLibs.DataBase.Reader"/> em CSV
 </summary>
 <param name="Separator">Separador de valores (vírgula)</param>
 <returns>uma string Comma Separated Values (CSV)</returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.ToSession(System.Web.SessionState.HttpSessionState,System.Int32)">
 <summary>
 Copia a primeira linha de um <see cref="T:InnerLibs.DataBase.Reader"/> para uma sessão
 HttpSessionState usando os nomes das colunas como os nomes dos objetos da sessão
 </summary>
 <param name="Session">Objeto da sessão</param>
 <param name="Timeout">
 Tempo em minutos para a sessão expirar (se não especificado não altera o timeout da sessão)
 </param>
</member>
<member name="M:InnerLibs.DataBase.Reader.ToMarkdownTable">
 <summary>
 Converte um <see cref="T:InnerLibs.DataBase.Reader"/> para uma tabela em Markdown Pipe
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.ToHTMLTable(System.Collections.Generic.IDictionary{System.String,System.String})">
 <summary>
 Converte um <see cref="T:InnerLibs.DataBase.Reader"/> para uma tabela em HTML
 </summary>
 <param name="Attr">Atributos da tabela.</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.ApplyToControls(System.Web.UI.HtmlControls.HtmlControl[])">
 <summary>
 Aplica os valores encontrados nas colunas de um <see cref="T:InnerLibs.DataBase.Reader"/> em controles
 com mesmo ID das colunas. Se os conroles não existirem no resultado eles serão ignorados.
 </summary>
 <param name="Controls">Controles que serão Manipulados</param>
 <returns>Um array contendo os inputs manipulados</returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.FillDataGridView(System.Windows.Forms.DataGridView@,System.Int32)">
 <summary>
 Preenche um DataGrivView com os resultados
 </summary>
 <param name="DatagridView"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.Reader.FillComboBox``1(System.Windows.Forms.ComboBox@,System.String,System.String)">
 <summary>
 Preenche um combobox com um TextValueList criado a partir deste DataBase.Reader
 </summary>
 <typeparam name="TValue">Tipo do Valor da coluna</typeparam>
 <param name="ComboBox">   </param>
 <param name="TextColumn"> Coluna usada como Texto do ComboBox</param>
 <param name="ValueColumn">Coluna usada como Valor do ComboBox</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.CreateParameter``1(System.String,System.Object)">
 <summary>
 Cria um parametro de Query SQL a partir de uma variavel convertida para um tipo especifico
 </summary>
 <typeparam name="Type">Tipo</typeparam>
 <param name="Name"> Nome do Parametro</param>
 <param name="Value">Valor do Parametro</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.CreateInsertCommand(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
 <summary>
 Cria um comando de INSERT baseado em um <see cref="T:System.Collections.Generic.IDictionary`2"/>
 </summary>
 <param name="TableName">Nome da Tabela</param>
 <param name="Dic">Dicionario contendo os Valores</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.CreateInsertCommandText(System.String,System.String[])">
 <summary>
 Cria um comando de INSERT
 </summary>
 <param name="TableName">Nome da Tabela</param>
 <param name="Columns">Colunas do INSERT</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.CreateUpdateCommand(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
 <summary>
 Cria um comando de UPDATE baseado em um <see cref="T:System.Collections.Generic.IDictionary`2"/>
 </summary>
 <param name="TableName">Nome da Tabela</param>
 <param name="Dic">Dicionario contendo os Valores</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.CreateUpdateCommandText(System.String,System.String,System.String[])">
 <summary>
 Cria um comando de UPDATE
 </summary>
 <param name="TableName">Nome da Tabela</param>
 <param name="Columns">Colunas do INSERT</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.INSERTorUPDATE(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
 <summary>
 Faz um INSERT out UPDATE no banco de dados de acordo com o valor da coluna de chave primária especificado em um <see cref="T:System.Collections.IDictionary"/>
 </summary>
 <param name="TableName">Nome da Tabela</param>
 <param name="Dic">Dicionário contendo os valores</param>
 <param name="PrimaryKeyColumn">Nome da coluna de chave primária (Ela deve estar dentro do <see cref="T:System.Collections.IDictionary"/> especificado no parametro <paramref name="Dic"/>, caso contrário será processado como INSERT </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.UPDATE(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
 <summary>
 Faz um UPDATE no banco de dados de acordo com um <see cref="T:System.Collections.IDictionary"/>
 </summary>
 <param name="TableName">Nome da Tabela</param>
 <param name="Dic">Dicionário contendo os valores</param>
 <param name="WhereClausule">Clausula WHERE, condiçoes para realizar o UPDATE</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.INSERT(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
 <summary>
 Faz um INSERT no banco de dados de acordo com um  <see cref="T:System.Collections.IDictionary"/>
 </summary>
 <param name="TableName">Nome da Tabela</param>
 <param name="Dic">Dicionário contendo os valores</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.CreateParameter(System.String,System.Object)">
 <summary>
 Cria um parametro de Query SQL a partir de uma variavel
 </summary>
 <param name="Name"> Nome do Parametro</param>
 <param name="Value">Valor do Parametro</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.GetSqlFilesList">
 <summary>
 Retorna a lista de arquivos SQL disponiveis
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.GetCommand(System.String)">
 <summary>
 Pega o comando SQL de um arquivo ou resource
 </summary>
 <param name="CommandFile">Nome do arquivo ou resource</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.OpenFile(System.String,System.Data.Common.DbParameter[])">
 <summary>
 Executa o comando de um arquivo SQL configurado
 </summary>
 <param name="CommandFile">Nome do arquivo SQL</param>
 <param name="Parameters"> Parametros do comando SQL</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.DataBase.ApplicationAssembly">
 <summary>
 Assembly da aplicação que contém os arquivos SQL
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.DataBase.CommandDirectory">
 <summary>
 Diretório que contém os arquivos SQL
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.DataBase.ConnectionString">
 <summary>
 Conexão genérica (Oracle, MySQL, SQLServer etc.)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.DataBase.ConnectionType">
 <summary>
 Tipo da conexão
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.DataBase.LogFile">
 <summary>
 Arquivo onde serão salvos os logs
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.#ctor(System.Type,System.String)">
 <summary>
 Cria uma nova instancia de Banco de Dados baseada em uma ConnectionString e em um Tipo de Conexão
 </summary>
 <param name="ConnectionString">String de conexão com o banco</param>
 <param name="Type">            Tipo de conexão com o banco</param>
</member>
<member name="M:InnerLibs.DataBase.#ctor(System.Type,System.String,System.IO.DirectoryInfo)">
 <summary>
 Cria uma nova instancia de Banco de Dados baseada em uma ConnectionString, um diretório de
 arquivos SQL e em um Tipo de Conexão
 </summary>
 <param name="Type">            Tipo de Conexão</param>
 <param name="ConnectionString">String de conexão com o banco</param>
 <param name="CommandDirectory">Diretorio de arquivos SQL</param>
</member>
<member name="M:InnerLibs.DataBase.#ctor(System.Type,System.String,System.Reflection.Assembly)">
 <summary>
 Cria uma nova instancia de Banco de Dados baseada em uma ConnectionString, Resources de
 arquivos SQL e em um Tipo de Conexão
 </summary>
 <param name="Type">               Tipo de Conexão</param>
 <param name="ConnectionString">   String de conexão com o banco</param>
 <param name="ApplicationAssembly">Assembly contendo os arquivos SQL</param>
</member>
<member name="M:InnerLibs.DataBase.Create``1(System.String)">
 <summary>
 Cria uma nova instancia de Banco de Dados baseada em uma ConnectionString e em um Tipo de Conexão
 </summary>
 <param name="ConnectionString">String de conexão com o banco</param>
 <typeparam name="ConnectionType">Tipo de conexão com o banco</typeparam>
</member>
<member name="M:InnerLibs.DataBase.Create``1(System.String,System.IO.DirectoryInfo)">
 <summary>
 Cria uma nova instancia de Banco de Dados baseada em uma ConnectionString, um diretório de
 arquivos SQL e em um Tipo de Conexão
 </summary>
 <param name="ConnectionString">String de conexão com o banco</param>
 <param name="CommandDirectory">Diretório onde estão guardados os arquivos SQL</param>
 <typeparam name="ConnectionType">Tipo de conexão com o banco</typeparam>
</member>
<member name="M:InnerLibs.DataBase.Create``1(System.String,System.Reflection.Assembly)">
 <summary>
 Cria uma nova instancia de Banco de Dados baseada em uma ConnectionString, Resources de
 arquivos SQL e em um Tipo de Conexão
 </summary>
 <param name="ConnectionString">   String de conexão com o banco</param>
 <param name="ApplicationAssembly">Diretório onde estão guardados os arquivos SQL</param>
 <typeparam name="ConnectionType">Tipo de conexão com o banco</typeparam>
</member>
<member name="M:InnerLibs.DataBase.RunSQL(System.String)">
 <summary>
 Executa uma Query no banco. Recomenda-se o uso de procedures.
 </summary>
 <param name="SQLQuery">Comando SQL a ser executado</param>
 <returns>Um <see cref="T:InnerLibs.DataBase.Reader"/> com as informações da consulta</returns>
</member>
<member name="M:InnerLibs.DataBase.RunSQL(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
 <summary>
 Executa uma Query no banco criando um comando a partir de um <see cref="T:System.Collections.Generic.IDictionary`2"/>
 </summary>
 <param name="SQLQuery">Comando SQL</param>
 <param name="Values">Dicionario contendo os valores</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.RunSQL(System.IO.FileInfo)">
 <summary>
 Executa uma Query no banco partir de um Arquivo.
 </summary>
 <param name="File">Arquivo com o comando SQL a ser executado</param>
 <returns>Um <see cref="T:InnerLibs.DataBase.Reader"/> com as informações da consulta</returns>
</member>
<member name="M:InnerLibs.DataBase.RunSQL(System.Web.HttpPostedFile)">
 <summary>
 Executa uma Query no banco partir de um Arquivo.
 </summary>
 <param name="File">Arquivo com o comando SQL a ser executado</param>
 <returns>Um <see cref="T:InnerLibs.DataBase.Reader"/> com as informações da consulta</returns>
</member>
<member name="M:InnerLibs.DataBase.RunSQL(System.String,System.String,System.Byte[])">
 <summary>
 Executa uma Query no banco com upload de arquivos.
 </summary>
 <param name="SQLQuery">     Comando SQL a ser executado</param>
 <param name="FileParameter">Nome do parâmetro que guarda o arquivo</param>
 <param name="File">         Arquivo</param>
 <returns>Um <see cref="T:InnerLibs.DataBase.Reader"/> com as informações da consulta</returns>
</member>
<member name="M:InnerLibs.DataBase.RunSQL(System.String,System.String,System.Web.HttpPostedFile)">
 <summary>
 Executa uma Query no banco com upload de arquivos.
 </summary>
 <param name="SQLQuery">     Comando SQL a ser executado</param>
 <param name="FileParameter">Nome do parâmetro que guarda o arquivo</param>
 <param name="File">         Arquivo postado</param>
 <returns>Um <see cref="T:InnerLibs.DataBase.Reader"/> com as informações da consulta</returns>
</member>
<member name="M:InnerLibs.DataBase.RunSQL(System.String,System.String,System.IO.FileInfo)">
 <summary>
 Executa uma Query no banco com upload de arquivos.
 </summary>
 <param name="SQLQuery">     Comando SQL a ser executado</param>
 <param name="FileParameter">Nome do parâmetro que guarda o arquivo</param>
 <param name="File">         Arquivo</param>
 <returns>Um <see cref="T:InnerLibs.DataBase.Reader"/> com as informações da consulta</returns>
</member>
<member name="M:InnerLibs.DataBase.RunSQL(System.Data.Common.DbCommand)">
 <summary>
 Executa uma Query no banco. Recomenda-se o uso de procedures.
 </summary>
 <param name="Command">Commando de banco de dados pre-pronto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.RunSQL(System.String,System.Data.Common.DbParameter[])">
 <summary>
 Executa uma Query no banco. Recomenda-se o uso de procedures.
 </summary>
 <param name="SQLQuery">  Comando SQL parametrizado a ser executado</param>
 <param name="Parameters">Parametros que serão adicionados ao comando</param>
 <returns>Um <see cref="T:InnerLibs.DataBase.Reader"/> com as informações da consulta</returns>
</member>
<member name="M:InnerLibs.DataBase.CreateCommandFromClass``1(System.String,``0)">
 <summary>
 Cria um comando usando como base as propriedades de uma classe
 </summary>
 <typeparam name="Type">Tipo da Classe</typeparam>
 <param name="SQLQuery">Comando SQL parametrizado a ser executado</param>
 <param name="[Object]">Objeto de onde serão extraidos os parâmetros e valores</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.CreateCommandFromRequest(System.Web.HttpRequest,System.String,System.Data.Common.DbParameter[])">
 <summary>
 Cria um comando SQL utilizando as key e os valores de um <see cref="T:System.Web.HttpRequest"/>
 </summary>
 <param name="SQLQuery">Comando SQL</param>
 <param name="Request"> Request de onde serão extraidos os valores</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.CreateCommandFromDictionary(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
 <summary>
 Cria um comando SQL utilizando as key e os valores de um <see cref="T:System.Collections.IDictionary"/>
 </summary>
 <param name="SQLQuery">Comando SQL</param>
<param name="Parameters">Dicionario com os parametros e seus valores</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.DataBase.RunProcedureForEach(System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String[])">
 <summary>
 Executa uma procedure para cada item dentro de uma coleção
 </summary>
 <param name="Procedure">   Nome da procedure</param>
 <param name="ForeignKey">  Coluna que representa a chave estrangeira da tabela</param>
 <param name="ForeignValue">Valor que será guardado como chave estrangeira</param>
 <param name="Items">       Coleçao de valores que serão inseridos em cada iteraçao</param>
 <param name="Keys">        as chaves de cada item</param>
</member>
<member name="M:InnerLibs.DataBase.RunBatchProcedure(InnerLibs.BatchProcedure)">
 <summary>
 Executa uma série de procedures baseando-se em uma unica chave estrangeira
 </summary>
 <param name="BatchProcedure">Configuraçoes das procedures</param>
</member>
<member name="M:InnerLibs.DataBase.RunBatchProcedure(System.Collections.Specialized.NameValueCollection,System.String,System.String,InnerLibs.ProcedureConfig[])">
 <summary>
 Executa uma série de procedures baseando-se eum uma unica chave estrangeira
 </summary>
 <param name="ForeignKey">     Coluna que representa a chave estrangeira da tabela</param>
 <param name="ForeignValue">   Valor que será guardado como chave estrangeira</param>
 <param name="Items">          Coleçao de valores que serão inseridos em cada iteraçao</param>
 <param name="ProcedureConfig">
 Informaçoes sobre qual procedure será executada e quais keys deverão ser usadas como parametros
 </param>
</member>
<member name="P:InnerLibs.DataBase.SELECT(System.String,System.String,System.String[])">
 <summary>
 Insere um objeto em uma tabela a partir de suas propriedades e valores
 </summary>
 <param name="WhereConditions">Condições após a clausula WHERE</param>
 <param name="TableName">      Nome da tabela</param>
</member>
<member name="M:InnerLibs.DataBase.DELETE(System.String,System.String,System.Boolean)">
 <summary>
 Deleta um registro de uma tabela
 </summary>
 <param name="TableName">      Nome da Tabela</param>
 <param name="WhereConditions">Condições após a clausula WHERE</param>
 <param name="SafeMode">se False, indica se a operação pode ser realizada sem uma clausula WHERE</param>
</member>
<member name="M:InnerLibs.DataBase.SelectAndFill(System.String,System.String,System.Web.UI.HtmlControls.HtmlControl[])">
 <summary>
 Seleciona a primeira linha de um resultset e aplica no <see cref="T:System.Web.UI.HtmlControls.HtmlControl"/> equivalente ao nome da coluna
 </summary>
 <param name="Controls"></param>
</member>
<member name="T:InnerLibs.BatchProcedure">
 <summary>
 Conjunto de configuraçoes de procedures para ser executado em sequencia
 </summary>
</member>
<member name="P:InnerLibs.BatchProcedure.Errors">
 <summary>
 Erros enxontrados ao executar procedures
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.BatchProcedure.ForeignKey">
 <summary>
 Coluna de chave estrangeira
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.BatchProcedure.ForeignValue">
 <summary>
 Valor da chave estrangeira
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.BatchProcedure.Items">
 <summary>
 Items usados na iteraçao
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.BatchProcedure.Add(System.String,System.String[])">
 <summary>
 Adciona uma procedure a execuçao atual
 </summary>
 <param name="ProcedureName">Nome da procedure</param>
 <param name="Keys">         Chaves que serão utilizadas como parâmetro da procedure</param>
</member>
<member name="M:InnerLibs.BatchProcedure.#ctor(System.Collections.Specialized.NameValueCollection,System.String,System.String,InnerLibs.ProcedureConfig[])">
 <summary>
 Cria uma nova lista de procedures
 </summary>
 <param name="Items">       Items usados em cada iteração</param>
 <param name="ForeignKey">  Coluna de chave estrangeira</param>
 <param name="ForeignValue">Valor da coluna d chave estrangeira</param>
 <param name="Procs">       Lista contendo as configurações de cada procedure</param>
</member>
<member name="T:InnerLibs.ProcedureConfig">
 <summary>
 Configuração de procedure para a classe <see cref="T:InnerLibs.BatchProcedure"/>
 </summary>
</member>
<member name="P:InnerLibs.ProcedureConfig.ProcedureName">
 <summary>
 Nome da Procedure
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.ProcedureConfig.Keys">
 <summary>
 Chaves usadas como parametros da procedure
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.ProcedureConfig.#ctor(System.String,System.String[])">
 <summary>
 Cria uma nova configuração de procedure
 </summary>
 <param name="ProcedureName">Nome da Procedure</param>
 <param name="Keys">         Chaves usadas como parametros da procedure</param>
</member>
<member name="T:InnerLibs.GeoIP">
 <summary>
 Retorna a localizaçao de um IP
 </summary>
</member>
<member name="M:InnerLibs.GeoIP.#ctor(System.String)">
 <summary>
 Declara uma instancia de GeoIP usando umma string contendo o IP ou URL
 </summary>
 <param name="URLorIP">Url ou IP</param>
</member>
<member name="M:InnerLibs.GeoIP.#ctor(System.Uri)">
 <summary>
 Declara uma instancia de GeoIP usando uma URI
 </summary>
 <param name="URL">Url</param>
</member>
<member name="M:InnerLibs.GeoIP.ToLocation">
 <summary>
 Cria um objeto Innerlibs.Location com as informaçoes do IP
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.GeoIP.ToJSON(System.String)">
 <summary>
 Retorna uma string JSON do objeto
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.HtmlTag">
 <summary>
 Estrutura de uma TAG HTML
 </summary>
</member>
<member name="P:InnerLibs.HtmlTag.OriginalTagString">
 <summary>
 String que originou essa classe
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HtmlTag.IsSelfClosingTag">
 <summary>
 Indica se a tag atual é uma tag sem conteúdo
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HtmlTag.Attribute(System.String)">
 <summary>
 Retorna o valor de um atributo da tag
 </summary>
 <param name="Key">nome do atributo</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.HtmlTag.Class">
 <summary>
 Atributo Class da tag HTML
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HtmlTag.Style">
 <summary>
 Estilos CSS da tag
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.HtmlTag.GetElementsByTagName(System.String[])">
 <summary>
 Retorna elementos desta tag por nome da tag
 </summary>
 <param name="TagName"></param>
 <returns></returns>
</member>
<member name="P:InnerLibs.HtmlTag.TagName">
 <summary>
 Nome da Tag
 </summary>
 <returns></returns>

</member>
<member name="P:InnerLibs.HtmlTag.ID">
 <summary>
 ID da tag
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HtmlTag.Attributes">
 <summary>
 Atributos da Tag
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HtmlTag.AttributesKeys">
 <summary>
 Retorna todas as Keys dos atributos incluindo id, class e style se estes possuirem algum valor
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HtmlTag.AttributesString">
 <summary>
 String que representa os atributos da tag incluindo class, id e style se estes possuirem algum valor
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HtmlTag.InnerText">
 <summary>
 COnteudo da Tag sem HTML
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HtmlTag.InnerHtml">
 <summary>
 Conteudo da Tag
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HtmlTag.Content">
 <summary>
 Conteudo da Tag. É um alias para <see cref="P:InnerLibs.HtmlTag.InnerHtml"/>
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.HtmlTag.OuterHtml">
 <summary>
 Retorna a string da tag. É um alias para <see cref="M:InnerLibs.HtmlTag.ToString"/>
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.HtmlTag.ToString">
 <summary>
 Retorna a string da tag
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.HtmlTag.ReplaceIn(System.String@)">
 <summary>
 Subistitui a Tag String original em um texto pela nova
 </summary>
 <param name="HtmlText">Texto HTML com a string original</param>
</member>
<member name="M:InnerLibs.HtmlTag.RemoveIn(System.String@)">
 <summary>
 Remove a Tag String original em um texto
 </summary>
 <param name="HtmlText">Texto HTML com a string original</param>
</member>
<member name="M:InnerLibs.HtmlTag.#ctor(System.String)">
 <summary>
 Cria uma HtmlTag a partir de uma String
 </summary>
 <param name="TagString">String contendo a tag</param>
</member>
<member name="M:InnerLibs.InnerCrypt.InnCrypt(System.String)">
 <summary>
 Criptografa uma suma string usando a logica InnerCrypt
 </summary>
 <param name="Text">Texto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.InnerCrypt.UnnCrypt(System.String)">
 <summary>
 Descriptografa uma string previamente criptografada com InnerCrypt
 </summary>
 <param name="EncryptedText">Texto Criptografado</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.InnerForm.InnerForm.SmtpServer">
 <summary>
 Servidor SMTP que será utilizado para o disparo de email
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.InnerForm.InnerForm.TableName">
 <summary>
 Nome da tabela no Banco de Dados. É utilizado pela propriedade <see cref="P:InnerLibs.InnerForm.InnerForm.DataBase"/> na
 hora de salvar as informaçoes no banco.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.InnerForm.InnerForm.Recipients">
 <summary>
 Lista de destinatários que irão receber o conteudo do formulário
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.InnerForm.InnerForm.AuthorizedDomains">
 <summary>
 Dominios autorizados a utilizar o formulário.
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.InnerForm.InnerForm.SuccessMessage">
 <summary>
 Mensagem de sucesso
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.InnerForm.InnerForm.ErrorMessage">
 <summary>
 Mensagem de erro
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.InnerForm.InnerForm.DataBase">
 <summary>
 Objeto de conexão com o banco de dados. Se estiver nulo, a informação não será salva no
 banco de dados porém o email será enviado normalmente
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.InnerForm.InnerForm.MailField">
 <summary>
 Nome do campo de email do formulario
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.InnerForm.InnerForm.UserMailTemplate">
 <summary>
 Conteudo do email de AutoResposta que será enviado ao usuário. O email somente é enviado
 se esta propriedade nao estiver nula ou em branco
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.InnerForm.InnerForm.UserSubject">
 <summary>
 Assunto do email de AutoResposta que será enviado ao usuário. O email somente é enviado
 se a propriedade <see cref="P:InnerLibs.InnerForm.InnerForm.UserMailTemplate"/> nao estiver nula ou em branco
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.InnerForm.InnerForm.GetForm(InnerLibs.DataBase,System.String,System.String)">
 <summary>
 </summary>
 <param name="WhereConditions"></param>
 <returns></returns>
</member>
<member name="T:InnerLibs.LimitedCollection`1">
 <summary>
 Cria uma coleção Limitada
 </summary>
 <typeparam name="TypeCollection">Tipo dos itens da lista</typeparam>
</member>
<member name="P:InnerLibs.LimitedCollection`1.AllowCapacityChange">
 <summary>
 Indica se sua capacidade pode ser alterada
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LimitedCollection`1.AllowRemoveItem">
 <summary>
 Indica se itens podem ser removidos
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LimitedCollection`1.AllowAddItem">
 <summary>
 Indica se itens podem ser adicionados
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.LimitedCollection`1.Capacity">
 <summary>
 Capacidade maxima da lista
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.LimitedCollection`1.#ctor(System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Cria uma nova lista limitada
 </summary>
 <param name="AllowCapacityChange">Indica se a capacidade pode ser alterada</param>
 <param name="AllowAddItem">Indica se itens podem ser adicionados</param>
 <param name="AllowRemoveItem">indica se intes podem ser removidos</param>
</member>
<member name="T:InnerLibs.FrozenCollection`1">
 <summary>
 Coleção congelada (não permite adição nem remoção de itens após sua criação
 </summary>
 <typeparam name="TypeCollection">Tipo dos itens da lista</typeparam>
</member>
<member name="M:InnerLibs.FrozenCollection`1.#ctor(System.Collections.ObjectModel.Collection{`0})">
 <summary>
 Cria uma coleção congelada baseada em uma outra coleção
 </summary>
 <param name="Collection">coleção</param>
</member>
<member name="M:InnerLibs.FrozenCollection`1.#ctor(System.Collections.Generic.List{`0})">
 <summary>
 Cria uma coleção congelada baseada em uma outra lista
 </summary>
 <param name="List">Lista</param>
</member>
<member name="M:InnerLibs.FrozenCollection`1.#ctor(`0[])">
 <summary>
 Cria uma coleção congelada baseada em uma matriz de itens
 </summary>
 <param name="Items">Matriz de Intens</param>
</member>
<member name="T:InnerLibs.TextValueList`1">
 <summary>
 Lista de Valores Duplos
 </summary>
</member>
<member name="M:InnerLibs.TextValueList`1.Add(System.String,`0)">
 <summary>
 Adiciona um novo TextValue a uma lista com key e valor
 </summary>
 <param name="Text">Valor da Key</param>
 <param name="Value">Valor do Value</param>
</member>
<member name="T:InnerLibs.TextValue`1">
 <summary>
 Uma par de valores sem chave (texto e item)
 </summary>
 <typeparam name="ValueType">Tipo do valor do objeto</typeparam>
</member>
<member name="M:InnerLibs.TextValueBinder.GetSelectedItemPair``1(System.Windows.Forms.ComboBox@)">
 <summary>
 Retorna o par do item selecionado na Combobox
 </summary>
 <typeparam name="TValue">Tipo do Valor</typeparam>
 <param name="Box">Combobox</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TextValueBinder.GetSelectedItemPair``1(System.Windows.Forms.ListBox@)">
 <summary>
 Retorna o par do item selecionado na ListBox
 </summary>
 <typeparam name="TValue">Tipo do Valor</typeparam>
 <param name="Box">ListBox</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TextValueBinder.GetItemPair``1(System.Windows.Forms.ComboBox@,System.Int32)">
 <summary>
 Retorna o par do item especificado pela index da Combobox
 </summary>
 <typeparam name="TValue">Tipo do Valor</typeparam>
 <param name="Box">Combobox</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TextValueBinder.GetItemPair``1(System.Windows.Forms.ListBox@,System.Int32)">
 <summary>
 Retorna o par do item especificado pela index da ListBox
 </summary>
 <typeparam name="TValue">Tipo do Valor</typeparam>
 <param name="Box">Combobox</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.TextValueBinder.SetPairDataSource``1(System.Windows.Forms.ComboBox@,InnerLibs.TextValueList{``0}@)">
 <summary>
 Aplica uma lista de pares como source da Combobox
 </summary>
 <typeparam name="TValue">Tipo do Valor</typeparam>
 <param name="Box">Combobox</param>
 <param name="Source">Lista</param>
</member>
<member name="M:InnerLibs.TextValueBinder.SetPairDataSource``1(System.Windows.Forms.ListBox@,InnerLibs.TextValueList{``0}@)">
 <summary>
 Aplica uma lista de pares como source da ListBox
 </summary>
 <typeparam name="TValue">Tipo do Valor</typeparam>
 <param name="Box">ListBox</param>
 <param name="Source">Lista</param>
</member>
<member name="M:InnerLibs.Money.#ctor(System.Decimal,System.Globalization.CultureInfo)">
 <summary>
 Cria uma nova instancia de moeda
 </summary>
 <param name="Value">Valor</param>
 <param name="Culture">Cultura</param>
</member>
<member name="M:InnerLibs.Money.#ctor(System.Decimal,System.String)">
 <summary>
 Cria uma nova instancia de moeda
 </summary>
 <param name="Value">Valor</param>
 <param name="Symbol">Simbolo de moeda, ISO ou nome da cultura</param>
</member>
<member name="M:InnerLibs.Money.ConvertCurrency(System.String)">
 <summary>
 Converte de uma moeda para a outra utilizando a api http://fixer.io
 </summary>
 <param name="Symbol">Simbolo de moeda, ISO ou nome da cultura</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Money.ConvertCurrency(System.Globalization.CultureInfo)">
 <summary>
 Converte de uma moeda para a outra utilizando a api http://fixer.io
 </summary>
 <param name="Culture">Cultura</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Money.ToString">
 <summary>
 String do valor formatado como moeda, é um alias para <see cref="P:InnerLibs.Money.MoneyString"/>
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Money.MoneyString">
 <summary>
 String do valor formatado como moeda
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Money.CurrencySymbol">
 <summary>
 Simbolo de moeda
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Money.ISOCurrencySymbol">
 <summary>
 Simbolo de moeda utilizada em cambio (ISO)
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Money.GetCultureInfosByCurrencySymbol(System.String)">
 <summary>
 Traz uma lista de <see cref="T:System.Globalization.CultureInfo"/> que utilizam uma determinada moeda de acordo com o simbolo, simbolo ISO ou
 </summary>
 <param name="Currency">Moeda</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.oEmbed">
 <summary>
 Classe para integrar a api oEmbed em aplicações .NET
 </summary>
</member>
<member name="M:InnerLibs.oEmbed.GetProviders">
 <summary>
 Retorna uma lista de provedores compativeis com oEmbed
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.oEmbed.#ctor(System.String)">
 <summary>
 Cria uma nova <see cref="T:InnerLibs.oEmbed"/> a partir de uma URL utilizando a mesma como <see cref="T:InnerLibs.oEmbed.Endpoint"/>
 </summary>
 <param name="URL">Url</param>
</member>
<member name="M:InnerLibs.oEmbed.#ctor">
 <summary>
 Cria uma nova <see cref="T:InnerLibs.oEmbed"/>
 </summary>
</member>
<member name="P:InnerLibs.oEmbed.Response(System.Int32)">
 <summary>
 Retorna o um objeto contendo as informaçoes da URL
 </summary>
 <param name="EndPointIndex">Index do <see cref="T:InnerLibs.oEmbed.Endpoint"/> que será usado. Deixe 0 para utilizar o primeiro</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.oEmbed.GetResponse``1(System.Int32)">
 <summary>
 Retorna o um objeto convertido para um tipo contendo as informaçoes da URL
 </summary>
 <typeparam name="Type">Tipo do objeto</typeparam>
 <param name="EndPointIndex">Index do <see cref="T:InnerLibs.oEmbed.Endpoint"/> que será usado. Deixe 0 para utilizar o primeiro</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.oEmbed.Endpoint">
 <summary>
 Informaçoes sobre o endpoint do <see cref="T:InnerLibs.oEmbed"/>
 </summary>
</member>
<member name="M:InnerLibs.Json.SerializeJSON(System.Object,System.String)">
 <summary>
 Converte um objeto para JSON
 </summary>
 <param name="Obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Json.DeserializeJSON(System.Object,System.String)">
 <summary>
 Converte um JSON para objeto
 </summary>
 <param name="Obj"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Json.DeserializeJSON``1(System.Object,System.String)">
 <summary>
 Converte um JSON para objeto
 </summary>
 <param name="Obj"></param>
 <returns></returns>
</member>
<member name="T:InnerLibs.SQLExplorer.FileSystemSQL">
 <summary>
 Busca arquivos em um diretório utilizando SQL
 </summary>
</member>
<member name="M:InnerLibs.SQLExplorer.FileSystemSQL.#ctor(System.String)">
 <summary>
 Cria uma nova busca SQL em um diretório
 </summary>
 <param name="SQLQuery"></param>
</member>
<member name="T:InnerLibs.Directories">
 <summary>
 Funções para trabalhar com diretorios
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Directories.ToDirectory(System.String)">
 <summary>
 Cria um diretório se o mesmo nao existir e retorna um DirectoryInfo deste diretório
 </summary>
 <param name="DirectoryName">o nome(s) do(s) diretorio(s) Ex.: "dir1/dir2/dir3" </param>
 <returns>Um DirectoryInfo contendo as informacoes do diretório criado</returns>
</member>
<member name="M:InnerLibs.Directories.ToFile(System.String,InnerLibs.FileType)">
 <summary>
 Cria um arquivo em branco se o mesmo nao existir e retorna um Fileinfo deste arquivo
 </summary>
 <param name="FileName">o nome do arquivo Ex.: "dir1/dir2/dir3/file.txt" </param>
 <returns>Um FileInfo contendo as informacoes do arquivo criado</returns>
</member>
<member name="M:InnerLibs.Directories.ToZipFile(System.IO.DirectoryInfo,System.String,System.IO.Compression.CompressionLevel)">
 <summary>
 Cria um arquivo .ZIP de um diretório
 </summary>
 <param name="FilesDirectory">Um diretório contendo arquivos</param>
 <param name="OutputFile">O caminho onde será exportado o arquivo ZIP, Mesmo caminho do diretório se não especificado</param>
 <param name="CompressionLevel">Nivel de compressão do arquivo Zip</param>
 <returns>Um FileInfo contendo as informações do arquivo gerado</returns>
</member>
<member name="M:InnerLibs.Directories.ToZipFile(System.IO.DirectoryInfo,System.String,System.IO.Compression.CompressionLevel,System.IO.SearchOption,System.String[])">
 <summary>
 Cria um arquivo .ZIP a partir de arquivos selecionados de uma pesquisa em um diretório
 </summary>
 <param name="FilesDirectory">Um diretório contendo arquivos</param>
 <param name="OutputFile">O caminho onde será exportado o arquivo ZIP, Mesmo caminho do diretório se não especificado</param>
 <param name="SearchOption">Especifica se a busca ocorrerá apenas no diretório pai ou em subdiretórios também</param>
 <param name="Searches">Padrões de pesquisa (*.extensao, nome.*, *nome*.*, *.*)</param>
 <param name="CompressionLevel">Nivel de compressão do arquivo Zip</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.ExtractZipFile(System.IO.FileInfo,System.IO.DirectoryInfo)">
 <summary>
 Extrai um arquivo zip em um diretório
 </summary>
 <param name="File">Arquivo ZIp</param>
 <param name="Directory">Diretório</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.SearchFiles(System.IO.DirectoryInfo,System.IO.SearchOption,System.String[])">
 <summary>
 Retorna uma lista de arquivos baseado em um ou mais padrões de pesquisas
 </summary>
 <param name="Directory">Diretório</param>
 <param name="SearchOption">Especifica se a pesquisa ocorrerá apenas no diretório ou em todos os subdiretórios também</param>
 <param name="Searches">Padrões de pesquisa (*.txt, arquivo.*, *)</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.SearchDirectories(System.IO.DirectoryInfo,System.IO.SearchOption,System.String[])">
 <summary>
 Retorna uma lista de diretórios baseado em um ou mais padrões de pesquisas
 </summary>
 <param name="Directory">Diretório</param>
 <param name="SearchOption">Especifica se a pesquisa ocorrerá apenas no diretório ou em todos os subdiretórios também</param>
 <param name="Searches">Padrões de pesquisa (*.txt, arquivo.*, *)</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.Search(System.IO.DirectoryInfo,System.IO.SearchOption,System.String[])">
 <summary>
 Retorna uma lista de arquivos ou diretórios baseado em um ou mais padrões de pesquisas
 </summary>
 <param name="Directory">Diretório</param>
 <param name="SearchOption">Especifica se a pesquisa ocorrerá apenas no diretório ou em todos os subdiretórios também</param>
 <param name="Searches">Padrões de pesquisa (*.txt, arquivo.*, *)</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.SearchBetween(System.IO.DirectoryInfo,System.DateTime,System.DateTime,System.IO.SearchOption,System.String[])">
 <summary>
 Retorna uma lista de arquivos ou diretórios baseado em um ou mais padrões de pesquisas dentro de um range de 2 datas
 </summary>
 <param name="Directory">Diretório</param>
 <param name="SearchOption">Especifica se a pesquisa ocorrerá apenas no diretório ou em todos os subdiretórios também</param>
 <param name="Searches">Padrões de pesquisa (*.txt, arquivo.*, *)</param>
 <param name="FirstDate">Data Inicial</param>
 <param name="SecondDate">Data Final</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.SearchFilesBetween(System.IO.DirectoryInfo,System.DateTime,System.DateTime,System.IO.SearchOption,System.String[])">
 <summary>
 Retorna uma lista de arquivos baseado em um ou mais padrões de pesquisas dentro de um range de 2 datas
 </summary>
 <param name="Directory">Diretório</param>
 <param name="SearchOption">Especifica se a pesquisa ocorrerá apenas no diretório ou em todos os subdiretórios também</param>
 <param name="Searches">Padrões de pesquisa (*.txt, arquivo.*, *)</param>
 <param name="FirstDate">Data Inicial</param>
 <param name="SecondDate">Data Final</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.SearchDirectoriesBetween(System.IO.DirectoryInfo,System.DateTime,System.DateTime,System.IO.SearchOption,System.String[])">
 <summary>
 Retorna uma lista de arquivos baseado em um ou mais padrões de pesquisas dentro de um range de 2 datas
 </summary>
 <param name="Directory">Diretório</param>
 <param name="SearchOption">Especifica se a pesquisa ocorrerá apenas no diretório ou em todos os subdiretórios também</param>
 <param name="Searches">Padrões de pesquisa (*.txt, arquivo.*, *)</param>
 <param name="FirstDate">Data Inicial</param>
 <param name="SecondDate">Data Final</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.CopyTo(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
 <summary>
 Copia um diretório para dentro de outro diretório
 </summary>
 <param name="Directory">Diretório</param>
 <param name="DestinationDirectory">Diretório de destino</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.CopyTo(System.Collections.Generic.List{System.IO.FileInfo},System.IO.DirectoryInfo)">
 <summary>
 Copia arquivos para dentro de outro diretório
 </summary>
 <param name="List">Arquivos</param>
 <param name="DestinationDirectory">Diretório de destino</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.HasFiles(System.IO.DirectoryInfo)">
 <summary>
 Verifica se um diretório possui arquivos
 </summary>
 <param name="Directory">Diretório</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.HasDirectories(System.IO.DirectoryInfo)">
 <summary>
 Verifica se um diretório possui subdiretórios
 </summary>
 <param name="Directory">Diretório</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.IsEmpty(System.IO.DirectoryInfo)">
 <summary>
 Verifica se um diretório está vazio
 </summary>
 <param name="Directory">Diretório</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.IsNotEmpty(System.IO.DirectoryInfo)">
 <summary>
 Verifica se um diretório não está vazio
 </summary>
 <param name="Directory">Diretório</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Directories.CleanDirectory(System.IO.DirectoryInfo)">
 <summary>
 Remove todos os subdiretorios vazios
 </summary>
 <param name="TopDirectory">Diretorio da operação</param>
</member>
<member name="T:InnerLibs.Encryption">
 <summary>
 Modulo de Criptografia
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Encryption.ToMD5String(System.String)">
 <summary>
 Criptografa um Texto em MD5
 </summary>
 <param name="Text">Texto a ser Criptografado</param>
 <returns>Uma String MD5</returns>
</member>
<member name="M:InnerLibs.Encryption.TryReverseMD5(System.String)">
 <summary>
 Tenta reverter uma string MD5 para seu valor original
 </summary>
 <param name="Text">String MD5</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Encryption.Encrypt(System.String)">
 <summary>
 Criptografa uma string
 </summary>
 <param name="Text">Texto descriptografado</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Encryption.Decrypt(System.String)">
 <summary>
 Descriptografa uma string
 </summary>
 <param name="Text">Texto Criptografado</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileContextMenu.Register(System.String,System.String,System.String,System.String)">
 <summary>
 Adciona opções customizadas ao menu de contexto do windows
 </summary>
 <param name="FileType">Extensão do arquivo</param>
 <param name="ShellKeyName">Nome da chave de Registro</param>
 <param name="MenuText">Texto do Menu</param>
 <param name="MenuCommand">Comando do Menu</param>
 <returns>TRUE se conseguir reistrar</returns>
</member>
<member name="M:InnerLibs.FileContextMenu.Unregister(System.String,System.String)">
 <summary>
 Remove uma opção customizada do menu de contexto do windows
 </summary>
 <param name="FileType">Extensão do arquivo</param>
 <param name="ShellKeyName">Nome da chave de Registro</param>
 <returns>TRUE se conseguir remover</returns>
</member>
<member name="M:InnerLibs.FontAwesome.GetIconByFileType(System.IO.FileInfo)">
 <summary>
 Retorna a classe do icone do FontAwesome que representa melhor o arquivo
 </summary>
 <param name="File">Arquivo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.FontAwesome.GetIconByFileType(InnerLibs.FileType)">
 <summary>
 Retorna a classe do icone do FontAwesome que representa melhor o arquivo
 </summary>
 <param name="MIME">MIME Type do Arquivo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.FontAwesome.GetIconByFileExtension(System.String)">
 <summary>
 Retorna a classe do icone do FontAwesome que representa melhor o arquivo
 </summary>
 <param name="Extension">Arquivo</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.FormAnimator">
 <summary>
 Animates a form when it is shown, hidden or closed.
 </summary>
 <remarks>
 MDI child forms do not support the Blend method and only support other methods while being displayed for the first time and when closing.
 </remarks>
</member>
<member name="T:InnerLibs.FormAnimator.AnimationMethod">
 <summary>
 The methods of animation available.
 </summary>
</member>
<member name="F:InnerLibs.FormAnimator.AnimationMethod.Roll">
 <summary>
 Rolls out from edge when showing and into edge when hiding.
 </summary>
 <remarks>
 This is the default animation method and requires a direction.
 </remarks>
</member>
<member name="F:InnerLibs.FormAnimator.AnimationMethod.Centre">
 <summary>
 Expands out from centre when showing and collapses into centre when hiding.
 </summary>
</member>
<member name="F:InnerLibs.FormAnimator.AnimationMethod.Slide">
 <summary>
 Slides out from edge when showing and slides into edge when hiding.
 </summary>
 <remarks>
 Requires a direction.
 </remarks>
</member>
<member name="F:InnerLibs.FormAnimator.AnimationMethod.Fade">
 <summary>
 Fades from transaprent to opaque when showing and from opaque to transparent when hiding.
 </summary>
</member>
<member name="T:InnerLibs.FormAnimator.AnimationDirection">
 <summary>
 The directions in which the Roll and Slide animations can be shown.
 </summary>
 <remarks>
 Horizontal and vertical directions can be combined to create diagonal animations.
 </remarks>
</member>
<member name="F:InnerLibs.FormAnimator.AnimationDirection.Right">
 <summary>
 From left to right.
 </summary>
</member>
<member name="F:InnerLibs.FormAnimator.AnimationDirection.Left">
 <summary>
 From right to left.
 </summary>
</member>
<member name="F:InnerLibs.FormAnimator.AnimationDirection.Down">
 <summary>
 From top to bottom.
 </summary>
</member>
<member name="F:InnerLibs.FormAnimator.AnimationDirection.Up">
 <summary>
 From bottom to top.
 </summary>
</member>
<member name="F:InnerLibs.FormAnimator.AW_HIDE">
 <summary>
 Hide the form.
 </summary>
</member>
<member name="F:InnerLibs.FormAnimator.AW_ACTIVATE">
 <summary>
 Activate the form.
 </summary>
</member>
<member name="F:InnerLibs.FormAnimator.DEFAULT_DURATION">
 <summary>
 The number of milliseconds over which the animation occurs if no value is specified.
 </summary>
</member>
<member name="F:InnerLibs.FormAnimator.__form">
 <summary>
 The form to be animated.
 </summary>
</member>
<member name="F:InnerLibs.FormAnimator._method">
 <summary>
 The animation method used to show and hide the form.
 </summary>
</member>
<member name="F:InnerLibs.FormAnimator._direction">
 <summary>
 The direction in which to Roll or Slide the form.
 </summary>
</member>
<member name="F:InnerLibs.FormAnimator._duration">
 <summary>
 The number of milliseconds over which the animation is played.
 </summary>
</member>
<member name="P:InnerLibs.FormAnimator.Method">
 <summary>
 Gets or sets the animation method used to show and hide the form.
 </summary>
 <value>
 The animation method used to show and hide the form.
 </value>
 <remarks>
 <b>Roll</b> is used by default if no method is specified.
 </remarks>
</member>
<member name="P:InnerLibs.FormAnimator.Direction">
 <summary>
 Gets or sets the direction in which the animation is performed.
 </summary>
 <value>
 The direction in which the animation is performed.
 </value>
 <remarks>
 The direction is only applicable to the <b>Roll</b> and <b>Slide</b> methods.
 </remarks>
</member>
<member name="P:InnerLibs.FormAnimator.Duration">
 <summary>
 Gets or sets the number of milliseconds over which the animation is played.
 </summary>
 <value>
 The number of milliseconds over which the animation is played.
 </value>
</member>
<member name="P:InnerLibs.FormAnimator.Form">
 <summary>
 Gets the form to be animated.
 </summary>
 <value>
 The form to be animated.
 </value>
</member>
<member name="M:InnerLibs.FormAnimator.AnimateWindow(System.IntPtr,System.Int32,System.Int32)">
 <summary>
 Windows API function to animate a window.
 </summary>
</member>
<member name="M:InnerLibs.FormAnimator.#ctor(System.Windows.Forms.Form)">
 <summary>
 Creates a new <b>FormAnimator</b> object for the specified form.
 </summary>
 <param name="form">
 The form to be animated.
 </param>
 <remarks>
 No animation will be used unless the <b>Method</b> and/or <b>Direction</b> properties are set independently. The <b>Duration</b> is set to quarter of a second by default.
 </remarks>
</member>
<member name="M:InnerLibs.FormAnimator.#ctor(System.Windows.Forms.Form,InnerLibs.FormAnimator.AnimationMethod,System.Int32)">
 <summary>
 Creates a new <b>FormAnimator</b> object for the specified form using the specified method over the specified duration.
 </summary>
 <param name="form">
 The form to be animated.
 </param>
 <param name="method">
 The animation method used to show and hide the form.
 </param>
 <param name="duration">
 The number of milliseconds over which the animation is played.
 </param>
 <remarks>
 No animation will be used for the <b>Roll</b> or <b>Slide</b> methods unless the <b>Direction</b> property is set independently.
 </remarks>
</member>
<member name="M:InnerLibs.FormAnimator.#ctor(System.Windows.Forms.Form,InnerLibs.FormAnimator.AnimationMethod,InnerLibs.FormAnimator.AnimationDirection,System.Int32)">
 <summary>
 Creates a new <b>FormAnimator</b> object for the specified form using the specified method in the specified direction over the specified duration.
 </summary>
 <param name="form">
 The form to be animated.
 </param>
 <param name="method">
 The animation method used to show and hide the form.
 </param>
 <param name="direction">
 The direction in which to animate the form.
 </param>
 <param name="duration">
 The number of milliseconds over which the animation is played.
 </param>
 <remarks>
 The <i>direction</i> argument will have no effect if the <b>Centre</b> or <b>Blend</b> method is
 specified.
 </remarks>
</member>
<member name="M:InnerLibs.FormAnimator.Form_Load(System.Object,System.EventArgs)">
 <summary>
 Animates the form automatically when it is loaded.
 </summary>
</member>
<member name="M:InnerLibs.FormAnimator.Form_VisibleChanged(System.Object,System.EventArgs)">
 <summary>
 Animates the form automatically when it is shown or hidden.
 </summary>
</member>
<member name="M:InnerLibs.FormAnimator.Form_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
 <summary>
 Animates the form automatically when it closes.
 </summary>
</member>
<member name="T:InnerLibs.Generate">
 <summary>
 Geradores de conteudo
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Generate.RandomWord(System.Int32)">
 <summary>
 Gera uma palavra aleatória com o numero de caracteres
 </summary>
 <param name="Length">Tamanho da palavra</param>
 <returns>Uma string contendo uma palavra aleatória</returns>
</member>
<member name="M:InnerLibs.Generate.RandomWord(System.String)">
 <summary>
 Gera uma palavra aleatória a partir de uma outra palavra
 </summary>
 <param name="BaseText">Texto base</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Generate.DaFontLogo(System.String,System.String,System.String)">
 <summary>
 Gera uma Imagem com uma fonte específica do site Dafont (Muito Impreciso, API em fase experimental)
 </summary>
 <param name="Text">Um texto qualquer a ser usado como exemplo</param>
 <param name="FontName">Nome da fonte (verifique no site)</param>
 <param name="FontSize">Tamanho da fonte</param>
 <returns>Uma Imagem (Image())</returns>
</member>
<member name="M:InnerLibs.Generate.ScreenshotFromWebsite(System.String,System.String,System.Boolean,System.Int32,System.String,System.Int32)">
 <summary>
 Tira uma screenshot usando o serviço Screenshotlayer.com
 </summary>
 <param name="Url">Url do site</param>
 <param name="FullPage">Valor indicando se o screenshot deverá ser da pagina inteira</param>
 <param name="Delay">Atraso em segundos</param>
 <param name="Viewport">Tamanho da tela</param>
 <param name="ImageWidth">Largura da Imagem</param>
 <param name="AccessKey">Chave de acesso (gratuita ou paga) do ScreenshotLayer.com</param>
 <returns>Um objeto Image() contendo o screenshot do site</returns>
</member>
<member name="M:InnerLibs.Generate.ToGoogleMapsURL(InnerLibs.Location,System.Boolean)">
 <summary>
 Gera uma URL do google MAPs baseado na localização
 </summary>
 <param name="local">Uma variavel do tipo InnerLibs.Location onde estão as informações como endereço e as coordenadas geográficas</param>
 <param name="LatLong">Gerar URL baseado na latitude e Longitude. Padrão FALSE retorna a URL baseada no Logradouro</param>
 <returns>Uma URI do Google Maps</returns>
</member>
<member name="M:InnerLibs.Generate.ToStaticGoogleMap(InnerLibs.Location,System.Int32,System.Int32,System.Int32,System.Int32,InnerLibs.Generate.MapType)">
 <summary>
 Cria um Mapa estatico utilizando a API do google Maps
 </summary>
 <param name="Location">Objeto contendo as Coordenadas</param>
 <param name="Width">Largura do Mapa</param>
 <param name="Height">Altura do Mapa</param>
 <param name="Zoom">Numero correspondente a aproximação da vizualização do Mapa</param>
 <param name="Scale">Escala do mapa (qualidade)</param>
 <param name="Maptype">Tipo do Mapa (roadmap, satellite, hybrid, ou terrain)</param>
 <returns>Um componente Image() com o mapa</returns>
</member>
<member name="T:InnerLibs.Generate.MapType">
 <summary>
 Tipo de mapa do Google Maps
 </summary>

</member>
<member name="F:InnerLibs.Generate.MapType.RoadMap">
 <summary>
 Rotas
 </summary>
</member>
<member name="F:InnerLibs.Generate.MapType.Satellite">
 <summary>
 Visao de satelite
 </summary>
</member>
<member name="F:InnerLibs.Generate.MapType.Hybrid">
 <summary>
 Hibrido (Rotas + Satelite)
 </summary>
</member>
<member name="F:InnerLibs.Generate.MapType.Terrain">
 <summary>
 Terreno/Relevo
 </summary>
</member>
<member name="M:InnerLibs.Generate.RandomNumber(System.Int64,System.Int64)">
 <summary>
 Gera um numero Aleatório entre 2 números
 </summary>
 <param name="Min">Numero minimo, Padrão 0 </param>
 <param name="Max">Numero Maximo, Padrão 999999</param>
 <returns>Um numero Inteiro (Integer ou Int)</returns>
</member>
<member name="M:InnerLibs.Generate.InnerIpsum(System.Int32)">
 <summary>
 Gera um InnerIpsum (InnerIpsum é uma modificação do classico Lorem Ipsum)
 </summary>
 <param name="ParagraphNumber">Quantidade de parágrafos do texto</param>
 <returns>Uma String contendo diversos paragrafos com texto aleatório</returns>
</member>
<member name="M:InnerLibs.Generate.LoremIpsum(System.Int32)">
 <summary>
 Gera um InnerIpsum (InnerIpsum é uma modificação do classico Lorem Ipsum)
 </summary>
 <param name="ParagraphNumber">Quantidade de parágrafos do texto</param>
 <returns>Uma String contendo diversos paragrafos com texto aleatório</returns>

</member>
<member name="M:InnerLibs.Generate.ToQRCode(System.String,System.Int32)">
 <summary>
 Converte uma String para um QR Code usando uma API (Nescessita de Internet)
 </summary>
 <param name="Data">Informações do QR Code</param>
 <param name="Size">Tamanho do QR code</param>
 <returns>Um componente Image() com o QR code</returns>
</member>
<member name="P:InnerLibs.GoogleMaps.Map.Markers">
 <summary>
 Marcadores do Mapa
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.GoogleMaps.Map.APIKey">
 <summary>
 Chave de API do Google Maps
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.GoogleMaps.Map.MAP_ID">
 <summary>
 ID do Mapa
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.GoogleMaps.Map.#ctor(System.String)">
 <summary>
 Cria um novo objeto de Mapa
 </summary>
 <param name="APIKey">Chave da API do Google</param>
</member>
<member name="M:InnerLibs.GoogleMaps.Map.#ctor(System.String,InnerLibs.Location[])">
 <summary>
 Cria um mapa e seus respectivos marcadores a partir de varias localizações
 </summary>
 <param name="APIKey">Chave da API do Google</param>
 <param name="Locations">Localizações</param>
</member>
<member name="M:InnerLibs.GoogleMaps.Map.#ctor(System.String,InnerLibs.GoogleMaps.Map.Marker[])">
 <summary>
 Cria um mapa a partir de um conjunto de marcadores
 </summary>
 <param name="APIKey">Chave da API do Google</param>
 <param name="Markers">Marcadores</param>
</member>
<member name="M:InnerLibs.GoogleMaps.Map.MakeMap(System.String,System.Int32,System.String,InnerLibs.Location)">
 <summary>
 Constroi uma div com o Mapa
 </summary>
 <param name="Center">Localização do Centro do Mapa</param>
 <param name="Zoom">Distancia do Mapa</param>
 <param name="Height">Altura da Div do Mapa</param>
 <param name="MAP_ID">ID do MAPA</param>
 <returns>Uma string html contendo as referencias e o Mapa</returns>
</member>
<member name="P:InnerLibs.GoogleMaps.Map.ApiUrl">
 <summary>
 URL da a API do Google Maps
 </summary>
 <returns>uma string contendo a URL da API.</returns>
</member>
<member name="P:InnerLibs.GoogleMaps.Map.ScriptTag">
 <summary>
 Tag Script contendo a URL da Api no SRC (Adicione no Header ou Body)
 </summary>
 <returns>uma string contendo a tag com a URL da API.</returns>
</member>
<member name="T:InnerLibs.GoogleMaps.Map.Marker">
 <summary>
 Marcador da localização no mapa
 </summary>
</member>
<member name="M:InnerLibs.GoogleMaps.Map.Marker.#ctor(InnerLibs.Location,System.String)">
 <summary>
 Cria um marcador
 </summary>
 <param name="Location">'Locaização do Marcador</param>
 <param name="Pin">Imagem do marcador</param>
</member>
<member name="P:InnerLibs.GoogleMaps.Map.Marker.Location">
 <summary>
 Localizaçao
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.GoogleMaps.Map.Marker.Pin">
 <summary>
 Caminho da imagem do Marcador
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.GoogleMaps.Map.Marker.Title">
 <summary>
 Titulo do Marcador
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.GoogleMaps.Map.Marker.Description">
 <summary>
 Descrição do marcador (balão)
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.GoogleSuggestion.GetGoogleSuggestions(System.String,System.String)">
 <summary>
 Retorna uma lista de sugestões de pesquisa do google baseado em um texto
 </summary>
 <param name="Text">Texto da pesquisa</param>
 <param name="Language">Sigla do Idioma</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.TableGenerator">
 <summary>
 Assistente de criação de tabelas HTML
 </summary>
</member>
<member name="M:InnerLibs.TableGenerator.TableRow(System.String,System.String[])">
 <summary>
 Cria uma linha de tabela html com diversas colunas (td)
 </summary>
 <param name="Tds">strings contendo o conteudo de cada TD</param>
 <returns>Uma TR</returns>
</member>
<member name="M:InnerLibs.TableGenerator.TableHeader(System.String[])">
 <summary>
 Cria um Table Header (thead) com as colunas especificadas
 </summary>
 <param name="Ths">Colunas</param>
 <returns>String thead</returns>
</member>
<member name="M:InnerLibs.TableGenerator.Table(System.String,System.String,System.String,System.String)">
 <summary>
 Cria uma Table HTML a partir de strings geradas
 </summary>
 <param name="TableHeader">Elemento thead com o cabeçalho</param>
 <param name="Rows">       Linhas da tabela</param>
 <param name="ID">         id da tabela</param>
 <param name="[Class]">    atributo class da tabela</param>
 <returns>uma strig com a table</returns>
</member>
<member name="T:InnerLibs.Images">
 <summary>
 Modulo de Imagem
 </summary>
 <remarks></remarks>
 
</member>
<member name="M:InnerLibs.Images.TestAndRotate(System.Drawing.Image@)">
 <summary>
 Rotaciona uma imagem para sua pocisão original caso ela já tenha sido rotacionada (EXIF)
 </summary>
 <param name="Img">Imagem</param>
 <returns>TRUE caso a imagem ja tenha sido rotacionada</returns>
</member>
<member name="M:InnerLibs.Images.InsertWatermark(System.Drawing.Image,System.String,System.Int32,System.Int32)">
 <summary>
 Insere um texto de marca Dágua na imagem
 </summary>
 <param name="Image">Imagem</param>
 <param name="Watermark">TExto de Marca Dagua</param>
 <param name="X">Posição X</param>
 <param name="Y">Posição Y</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.InsertWatermark(System.Drawing.Image,System.Drawing.Image,System.Int32,System.Int32)">
 <summary>
 Insere uma imagem de marca Dágua na imagem
 </summary>
 <param name="Image">Imagem</param>
 <param name="Watermark">Imagem de Marca Dagua</param>
 <param name="X">Posição X</param>
 <param name="Y">Posição Y</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.DrawImage(System.String,System.Int32,System.Int32,System.Drawing.Font,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
 <summary>
 Escreve uma string em uma imagem
 </summary>
 <param name="Text">Texto</param>
 <param name="Width">Largura da imagem</param>
 <param name="Height">Altura da imagem</param>
 <param name="Font">Fonte que será usada</param>
 <param name="TextColor">Cor do texto</param>
 <param name="BackColor">Cor de fundo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.Resize(System.Drawing.Image,System.Int32,System.Int32,System.Boolean)">
 <summary>
 Redimensiona e converte uma Imagem
 </summary>
 <param name="Original">Imagem Original</param>
 <param name="NewWidth">Nova Largura</param>
 <param name="MaxHeight">Altura máxima</param>
 <param name="OnlyResizeIfWider">Indica se a imagem deve ser redimensionada apenas se sua largura for maior que a especificada</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Images.GetEncoderInfo(System.Drawing.Imaging.ImageFormat)">
 <summary>
 Pega o encoder a partir de um formato de imagem
 </summary>
 <param name="RawFormat">Image format</param>
 <returns>image codec info.</returns>
</member>
<member name="M:InnerLibs.Images.CombineImages(System.Boolean,System.Drawing.Image[])">
 <summary>
 Combina 2 ou mais imagens em uma única imagem
 </summary>
 <param name="Images">Lista de Imagens para combinar</param>
 <param name="VerticalFlow">Se TRUE, combina as Imagens verticalmente (Uma em baixo da outra), caso contrario as imagens serão combinadas horizontalmente (Uma do lado da outra da esquerda para a direita)</param>
 <returns>Um Bitmap com a combinaçao de todas as imagens da Lista</returns>
</member>
<member name="M:InnerLibs.Images.CombineImages(System.Collections.Generic.List{System.Drawing.Image},System.Boolean)">
 <summary>
 Combina 2 ou mais imagens em uma única imagem
 </summary>
 <param name="Images">Lista de Imagens para combinar</param>
 <param name="VerticalFlow">Se TRUE, combina as Imagens verticalmente (Uma em baixo da outra), caso contrario as imagens serão combinadas horizontalmente (Uma do lado da outra da esquerda para a direita)</param>
 <returns>Um Bitmap com a combinaçao de todas as imagens da Lista</returns>
</member>
<member name="M:InnerLibs.Images.CombineImages(System.Drawing.Image[],System.Boolean)">
 <summary>
 Combina 2 ou mais imagens em uma única imagem
 </summary>
 <param name="Images">Array de Imagens para combinar</param>
 <param name="VerticalFlow">Se TRUE, combina as Imagens verticalmente (Uma em baixo da outra), caso contrario as imagens serão combinadas horizontalmente (Uma do lado da outra da esquerda para a direita)</param>
 <returns>Um Bitmap com a combinaçao de todas as imagens do Array</returns>
</member>
<member name="M:InnerLibs.Images.GetMostUsedColors(System.Drawing.Bitmap)">
 <summary>
 Retorna uma lista com as 10 cores mais utilizadas na imagem
 </summary>
 <param name="Image">Imagem</param>
 <returns>uma lista de Color</returns>
</member>
<member name="M:InnerLibs.Images.ToBytes(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
 <summary>
 Transforma uma imagem em array de bytes
 </summary>
 <param name="Image">Imagem</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.PictureService">
 <summary>
 Retorna imagens de diversos serviços para serem usadas como marcação ou sugestão.
 </summary>
</member>
<member name="P:InnerLibs.PictureService.Picture.URL">
 <summary>
 URL da imagem
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.PictureService.Picture.Image">
 <summary>
 Objeto imagem
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.PictureService.Picture.DataURL(System.Drawing.Imaging.ImageFormat)">
 <summary>
 DATA URL da imagem (base64)
 </summary>
 <param name="ImageFormat">Formato de Imagem</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.PictureService.Picture.Bytes">
 <summary>
 Bytes da imagem
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.PictureService.Size">
 <summary>
 Tamanho da imagem que será gerada pelo serviço
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.PictureService.PlaceHold(System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
 <summary>
 Retorna uma imagem usando Placehold.It
 </summary>
 <param name="Text"></param>
 <param name="Color"></param>
 <param name="TextColor"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.PictureService.Unsplash(System.Int32,System.Boolean,System.Boolean)">
 <summary>
 Retorna uma Imagem utilizando Unsplash.it
 </summary>
 <param name="Index">Index da imagem</param>
 <param name="Grayscale">Imagem em escala de cinza</param>
 <param name="Blur">Imagem desbotada</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.PictureService.LoremPixel(System.String,System.Int32,System.Boolean,System.String)">
 <summary>
 Retorna uma imagem usando LoremPixel.com
 </summary>
 <param name="Category">Categoria da imagem</param>
 <param name="Index">Indice da imagem</param>
 <param name="Grayscale">Imagem em escala da cinza</param>
 <param name="Text">Texto adicional</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.PictureService.Pipsum">
 <summary>
 Retorna uma imagem usando Pipsum.com
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.PictureService.AnyService(System.Boolean)">
 <summary>
 Retorna uma imagem de qualquer serviço aleatóriamente
 </summary>
 <param name="OnlyPhotos">Apenas serviços de fotografias (Exclui Placehold.It)</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.PictureService.#ctor(System.Drawing.Size)">
 <summary>
 Cria uma nova Picture com um tamanho especifico
 </summary>
 <param name="Size">Tamanho</param>
</member>
<member name="M:InnerLibs.PictureService.#ctor(System.Int32,System.Int32)">
 <summary>
 Cria uma nova Picture com altura e largura especificados
 </summary>
 <param name="Width">Largura</param>
 <param name="Height">Altura</param>
</member>
<member name="T:InnerLibs.MenuBuilder">
 <summary>
 Estrutura para criação de menus com submenus
 </summary>
</member>
<member name="P:InnerLibs.MenuBuilder.HasItems">
 <summary>
 Verifica se este menu possui itens
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.MenuBuilder.ToJSON(System.String)">
 <summary>
 Transforma a classe em um json
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.MenuBuilderItem">
 <summary>
 Item de um InnerMenu
 </summary>
</member>
<member name="P:InnerLibs.MenuBuilderItem.Icon">
 <summary>
 Icone correspondente a este menu
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.MenuBuilderItem.Title">
 <summary>
 Titulo do menu
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.MenuBuilderItem.URL">
 <summary>
 URL do menu
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.MenuBuilderItem.Target">
 <summary>
 Target do menu
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.MenuBuilderItem.SubItems">
 <summary>
 Subitens do menu
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.MenuBuilderItem.HasItems">
 <summary>
 Verifica se este item possui subitens
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.MenuBuilderItem.#ctor(System.String,System.String,System.String,System.String)">
 <summary>
 Inicializa um novo MenuBuilderItem
 </summary>
 <param name="Title">Titulo do menu</param>
 <param name="URL">URL do menu</param>
 <param name="Target">Alvo do menu, nomralmente _self</param>
 <param name="Icon">icone do menu</param>
</member>
<member name="M:InnerLibs.MenuBuilderItem.#ctor(System.String,System.Collections.Generic.List{InnerLibs.MenuBuilderItem},System.String)">
 <summary>
 Inicializa um novo MenuBuilderItem
 </summary>
 <param name="Title">Titulo do Menu</param>
 <param name="SubItems">Subitens do menu</param>
</member>
<member name="T:InnerLibs.Location">
 <summary>
 Representa um deteminado local com suas Informações
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Location.#ctor">
 <summary>
 Cria um novo objeto de localização vazio
 </summary>
</member>
<member name="M:InnerLibs.Location.#ctor(System.String,System.Int32)">
 <summary>
 Cria um objeto de localização e imadiatamente pesquisa as informações de um local através do CEP usando as APIs ViaCEP e Google Maps
 </summary>
 <param name="PostalCode"></param>
 <param name="Number">Numero da casa</param>
</member>
<member name="M:InnerLibs.Location.#ctor(System.String,System.String)">
 <summary>
 Cria um objeto de localização e imediatamente pesquisa as informações de um local através da Latitude e Longitude usando a API do Google Maps
 </summary>
 <param name="Latitude"></param>
 <param name="Longitude"></param>
</member>
<member name="P:InnerLibs.Location.Address">
 <summary>
 Endereco
 </summary>
 <value></value>
 <returns>Endereco</returns>
</member>
<member name="P:InnerLibs.Location.Number">
 <summary>
 Numero da casa, predio etc.
 </summary>
 <value></value>
 <returns>Numero</returns>
</member>
<member name="P:InnerLibs.Location.Complement">
 <summary>
 Complemento
 </summary>
 <value></value>
 <returns>Complemento</returns>
</member>
<member name="P:InnerLibs.Location.Neighborhood">
 <summary>
 Bairro
 </summary>
 <value></value>
 <returns>Bairro</returns>
</member>
<member name="P:InnerLibs.Location.PostalCode">
 <summary>
 CEP - Codigo de Endereçamento Postal
 </summary>
 <value></value>
 <returns>CEP</returns>
</member>
<member name="P:InnerLibs.Location.City">
 <summary>
 Cidade
 </summary>
 <value></value>
 <returns>Cidade</returns>
</member>
<member name="P:InnerLibs.Location.State">
 <summary>
 Estado
 </summary>
 <value></value>
 <returns>Estado</returns>
</member>
<member name="P:InnerLibs.Location.StateCode">
 <summary>
 Unidade federativa
 </summary>
 <value></value>
 <returns>Sigla do estado</returns>
</member>
<member name="P:InnerLibs.Location.Country">
 <summary>
 País
 </summary>
 <value></value>
 <returns>País</returns>
</member>
<member name="P:InnerLibs.Location.Latitude">
 <summary>
 Coordenada geográfica LATITUDE
 </summary>
 <value></value>
 <returns>Latitude</returns>
</member>
<member name="P:InnerLibs.Location.Longitude">
 <summary>
 Coordenada geográfica LONGITUDE
 </summary>
 <value></value>
 <returns>Longitude</returns>
</member>
<member name="P:InnerLibs.Location.GoogleMapsURL">
 <summary>
 URL do Google Maps
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Location.FullAddress">
 <summary>
 Retorna o endereço completo (logradouro)
 </summary>
 <returns>Uma String com o endereço completo devidamente formatado</returns>
</member>
<member name="M:InnerLibs.Location.ToString">
 <summary>
 Retorna uma String contendo as informações do Local
 </summary>
 <returns>string</returns>
</member>
<member name="M:InnerLibs.Location.LatitudeLongitude">
 <summary>
 Retorna as coordenadas geográficas do Local
 </summary>
 <returns>Uma String contendo LATITUDE e LONGITUDE separados por virgula</returns>
</member>
<member name="M:InnerLibs.Location.GetInfoByPostalCode">
 <summary>
 Retorna o endereço de acordo com o CEP contidos em uma variavel do tipo InnerLibs.Location usando a API https://viacep.com.br/
 </summary>
</member>
<member name="M:InnerLibs.Location.SearchOnGoogleMaps(System.String,System.Boolean)">
 <summary>
 Realiza uma busca detalhada no google Maps
 </summary>
 <param name="Location">String contendo os detalhes da busca ex.: Av. Rio Pequeno, 240</param>
 <param name="Sensor">Indica se a pesquisa deve ser baseada na sua localização atual. Padrao TRUE</param>
</member>
<member name="M:InnerLibs.Location.Update">
 <summary>
 Realiza uma nova busca no google maps usando o endereço completo
 </summary>
</member>
<member name="T:InnerLibs.Mathematic">
 <summary>
 Módulo para calculos
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Mathematic.EvaluateExpression(System.String)">
 <summary>
 Executa uma Expressão matematica simples
 </summary>
 <param name="Formula">Expressão matematica</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Mathematic.ArithmeticProgression(System.Int32,System.Int32,System.Int32)">
 <summary>
 Retorna uma progressão Aritmética com N numeros
 </summary>
 <param name="FirstNumber"></param>
 <param name="[Constant]"> </param>
 <param name="Length">     </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Mathematic.GeometricProgression(System.Int32,System.Int32,System.Int32)">
 <summary>
 Retorna uma Progressão Gemoétrica com N numeros
 </summary>
 <param name="FirstNumber"></param>
 <param name="[Constant]"> </param>
 <param name="Length">     </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Mathematic.CartesianProduct``1(``0[][])">
 <summary>
 Retorna todas as possiveis combinações de Arrays do mesmo tipo (Produto Cartesiano)
 </summary>
 <param name="Sets">Lista de Arrays para combinar</param>
 <returns>Plano Cartesiano</returns>
</member>
<member name="M:InnerLibs.Mathematic.Fibonacci(System.Int32)">
 <summary>
 Retorna uma sequencia Fibonacci de N numeros
 </summary>
 <param name="Length">Quantidade de numeros da sequencia</param>
 <returns>Lista com a sequencia Fibonacci</returns>
</member>
<member name="M:InnerLibs.Mathematic.Factorial(System.Int32)">
 <summary>
 Calcula o fatorial de um numero
 </summary>
 <param name="Number">Numero inteiro positivo maior que zero</param>
 <returns>fatorial do numero inteiro</returns>
</member>
<member name="M:InnerLibs.Mathematic.CalculatePercent(System.Decimal,System.Decimal)">
 <summary>
 Retorna o percentual de um valor
 </summary>
 <param name="Value">Valor a ser calculado</param>
 <param name="Total">Valor Total (Representa 100%)</param>
 <returns>Um numero decimal contendo a porcentagem</returns>
</member>
<member name="M:InnerLibs.Mathematic.CalculateValueFromPercent(System.String,System.Decimal)">
 <summary>
 Retorna o valor de um determinado percentual de um valor total
 </summary>
 <param name="Percent">
 Porcentagem, pode ser um numero ou uma string com o sinal de porcento. Ex.: 15 ou 15%
 </param>
 <param name="Total">  Valor Total (Representa 100%)</param>
 <returns>Um numero decimal contendo o valor relativo a porcentagem</returns>
</member>
<member name="M:InnerLibs.Mathematic.Slice(System.Decimal,System.Int32)">
 <summary>
 Corta um numero decimal com a quntdade de casas especiicadas
 </summary>
 <param name="Value"> Numero</param>
 <param name="Places">Numero de casas apos a virgula</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Mathematic.GetDecimalPlaces(System.Decimal,System.Int32)">
 <summary>
 Retorna um numero inteiro representando as casas decimais de um numero decimal
 </summary>
 <param name="Value">Valor decimal</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Mathematic.Ceil(System.Decimal)">
 <summary>
 Arredonda um numero para cima. Ex.: 4,5 -&gt; 5
 </summary>
 <param name="Number">Numero a ser arredondado</param>
 <returns>Um numero inteiro (Integer ou Int)</returns>
</member>
<member name="M:InnerLibs.Mathematic.Ceil(System.Double)">
 <summary>
 Arredonda um numero para cima. Ex.: 4,5 -&gt; 5
 </summary>
 <param name="Number">Numero a ser arredondado</param>
 <returns>Um numero inteiro (Integer ou Int)</returns>
</member>
<member name="M:InnerLibs.Mathematic.Floor(System.Decimal)">
 <summary>
 Arredonda um numero para baixo. Ex.: 4,5 -&gt; 4
 </summary>
 <param name="Number">Numero a ser arredondado</param>
 <returns>Um numero inteiro (Integer ou Int)</returns>
</member>
<member name="M:InnerLibs.Mathematic.Floor(System.Double)">
 <summary>
 Arredonda um numero para baixo. Ex.: 4,5 -&gt; 4
 </summary>
 <param name="Number">Numero a ser arredondado</param>
 <returns>Um numero inteiro (Integer ou Int)</returns>
</member>
<member name="M:InnerLibs.Mathematic.SetMaxValue``1(``0,``0)">
 <summary>
 Limita o valor Maximo de um numero
 </summary>
 <param name="Number">  Numero</param>
 <param name="MaxValue">Valor Maximo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Mathematic.SetMinValue``1(``0,``0)">
 <summary>
 Limita o valor minimo de um numero
 </summary>
 <param name="Number">  Numero</param>
 <param name="MinValue">Valor Maximo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Mathematic.LimitRange``1(``0,System.Object,System.Object)">
 <summary>
 Limita um range para um numero
 </summary>
 <param name="Number">  Numero</param>
 <param name="MinValue">Valor Minimo para o numero</param>
 <param name="MaxValue">Valor máximo para o numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Mathematic.Round(System.Decimal,System.Int32)">
 <summary>
 Arredonda um numero para baixo ou para cima de acordo com outro numero
 </summary>
 <param name="Number">      Numero</param>
 <param name="MiddleNumber">Numero Médio</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Mathematic.Round(System.Decimal)">
 <summary>
 Arredonda um numero para o valor inteiro mais próximo
 </summary>
 <param name="Number">Numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Mathematic.Lerp(System.Single,System.Single,System.Single)">
 <summary>
 Realiza um calculo de interpolação Linear
 </summary>
 <param name="Start"> </param>
 <param name="[End]"> </param>
 <param name="Amount"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Mathematic.Sum(System.Double[])">
 <summary>
 Soma todos os números de um array
 </summary>
 <param name="Values">Array de números</param>
 <returns>Decimal contendo a soma de todos os valores</returns>
</member>
<member name="M:InnerLibs.Mathematic.Sum(System.Int64[])">
 <summary>
 Soma todos os números de um array
 </summary>
 <param name="Values">Array de números</param>
 <returns>Decimal contendo a soma de todos os valores</returns>
</member>
<member name="M:InnerLibs.Mathematic.Sum(System.Int32[])">
 <summary>
 Soma todos os números de um array
 </summary>
 <param name="Values">Array de números</param>
 <returns>Decimal contendo a soma de todos os valores</returns>
</member>
<member name="M:InnerLibs.Mathematic.Sum(System.Decimal[])">
 <summary>
 Soma todos os números de um array
 </summary>
 <param name="Values">Array de números</param>
 <returns>Decimal contendo a soma de todos os valores</returns>
</member>
<member name="M:InnerLibs.Mathematic.Average(System.Decimal[])">
 <summary>
 Tira a média de todos os números de um Array
 </summary>
 <param name="Values">Array de números</param>
 <returns>Decimal contendo</returns>
</member>
<member name="M:InnerLibs.Mathematic.Average(System.Double[])">
 <summary>
 Tira a média de todos os números de um Array
 </summary>
 <param name="Values">Array de números</param>
 <returns>Decimal contendo</returns>
</member>
<member name="M:InnerLibs.Mathematic.Average(System.Int32[])">
 <summary>
 Tira a média de todos os números de um Array
 </summary>
 <param name="Values">Array de números</param>
 <returns>Decimal contendo</returns>
</member>
<member name="M:InnerLibs.Mathematic.Average(System.Int64[])">
 <summary>
 Tira a média de todos os números de um Array
 </summary>
 <param name="Values">Array de números</param>
 <returns>Decimal contendo</returns>
</member>
<member name="M:InnerLibs.Mathematic.ToRadians(System.Double)">
 <summary>
 COnverte graus para radianos
 </summary>
 <param name="Degrees"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Mathematic.CalculateDistance(InnerLibs.Location,InnerLibs.Location)">
 <summary>
 Calcula a distancia entre 2 locais
 </summary>
 <param name="FirstLocation"> Primeiro Local</param>
 <param name="SecondLocation">Segundo Local</param>
 <returns>A distancia em kilometros</returns>
</member>
<member name="M:InnerLibs.Mathematic.CalculateDistance(InnerLibs.Location[])">
 <summary>
 Calcula a distancia passando por todos os pontos
 </summary>
 <param name="Locations">Localizacoes</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Mathematic.IsBetween``1(``0,System.Object,System.Object)">
 <summary>
 Verifica se um numero está entre outros 2 números
 </summary>
 <param name="Number">      Numero</param>
 <param name="FirstNumber"> Primeiro numero comparador</param>
 <param name="SecondNumber">Segundo numero comparador</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.FileTypeExtensions">
 <summary>
 Módulo de manipulaçao de MIME Types
 </summary>
</member>
<member name="M:InnerLibs.FileTypeExtensions.GetFileType(System.String)">
 <summary>
 Retorna o Mime Type a partir da extensão de um arquivo
 </summary>
 <param name="Extension">extensão do arquivo</param>
 <returns>string mime type</returns>
</member>
<member name="M:InnerLibs.FileTypeExtensions.GetFileType(System.IO.FileInfo)">
 <summary>
 Retorna o Mime Type a partir de um arquivo
 </summary>
 <param name="File">Arquivo</param>
 <returns>string mime type</returns>
</member>
<member name="M:InnerLibs.FileTypeExtensions.GetFileType(System.Drawing.Imaging.ImageFormat)">
 <summary>
 Retorna o Mime Type a partir de de um formato de Imagem
 </summary>
 <param name="RawFormat">Formato de Imagem</param>
 <returns>string mime type</returns>
</member>
<member name="M:InnerLibs.FileTypeExtensions.GetFileType(System.Drawing.Image)">
 <summary>
 Retorna o Mime Type a partir de de uma Imagem
 </summary>
 <param name="Image">Imagem</param>
 <returns>string mime type</returns>
</member>
<member name="M:InnerLibs.FileTypeExtensions.ToFileType(System.String)">
 <summary>
 Retorna um Objeto FileType a partir de uma string FileType ou Extensão de Arquivo
 </summary>
 <param name="MimeTypeOrExtension"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileTypeExtensions.GetIcon(System.IO.FileInfo)">
 <summary>
 Retorna um icone de acordo com o arquivo
 </summary>
 <param name="File">Arquivo</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.FileType">
 <summary>
 Classe que representa um MIME Type
 </summary>
</member>
<member name="P:InnerLibs.FileType.Extensions">
 <summary>
 Extensão do arquivo
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FileType.MimeTypes">
 <summary>
 Tipo do arquivo (MIME Type String)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.FileType.Description">
 <summary>
 Descrição do tipo de arquivo
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileType.GetFileTypeList">
 <summary>
 Retorna uma Lista com todos os MIME Types suportados
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileType.GetFileTypeStringList">
 <summary>
 Retorna uma lista de strings contendo todos os MIME Types
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileType.GetExtensions(System.String)">
 <summary>
 Traz uma lista de extensões de acordo com o MIME type especificado
 </summary>
 <param name="MIME">MIME Type String</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileType.GetFileType(System.String)">
 <summary>
 Retorna um objeto FileType a partir de uma extensão de Arquivo ou FileType string
 </summary>
 <param name="MimeTypeOrExtension"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileType.#ctor">
 <summary>
 Constroi um MIME Type Default
 </summary>
</member>
<member name="M:InnerLibs.FileType.#ctor(System.IO.FileInfo)">
 <summary>
 Constroi um File Type a partir de um Arquivo (FileInfo)
 </summary>
 <param name="File">Fileinfo com o Arquivo</param>
</member>
<member name="M:InnerLibs.FileType.#ctor(System.String)">
 <summary>
 Constroi um File Type a partir da extensão ou MIME Type de um Arquivo
 </summary>
 <param name="MimeTypeOrExtension">Extensão do arquivo</param>
</member>
<member name="M:InnerLibs.FileType.ToString">
 <summary>
 Retorna uma string com o primeiro MIME TYPE do arquivo
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileType.ToFilterString">
 <summary>
 Retorna uma string representando um filtro de caixa de dialogo WinForms
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.FileTypeList">
 <summary>
 Lista com Tipos de arquivo ultilizada para filtro e validação
 </summary>
</member>
<member name="M:InnerLibs.FileTypeList.#ctor(InnerLibs.FileType[])">
 <summary>
 Cria uma nova lista a partir de tipos de arquivos
 </summary>
 <param name="FileTypes">Tipos de Arquivos</param>
</member>
<member name="M:InnerLibs.FileTypeList.#ctor(System.Collections.Generic.List{InnerLibs.FileType})">
 <summary>
 Cria uma nova lista a partir de uma lista de tipos de arquivos
 </summary>
 <param name="FileTypeList">Tipos de Arquivos</param>
</member>
<member name="M:InnerLibs.FileTypeList.ToFilterString">
 <summary>
 Retorna uma string representando um filtro de caixa de dialogo WinForms
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.FileTypeList.ApplyDialogFilter(System.Windows.Forms.OpenFileDialog@)">
 <summary>
 Aplica um filtro no OpenFileDialog
 </summary>
 <param name="Dialog">Dialogo</param>
</member>
<member name="M:InnerLibs.FileTypeList.ApplyDialogFilter(System.Windows.Forms.SaveFileDialog@)">
 <summary>
 Aplica um filtro no SaveFileDialog
 </summary>
 <param name="Dialog">Dialogo</param>
</member>
<member name="M:InnerLibs.FileTypeList.SearchFiles(System.IO.DirectoryInfo,System.IO.SearchOption)">
 <summary>
 Busca arquivos que correspondam com as extensões desta lista
 </summary>
 <param name="Directory">   Diretório</param>
 <param name="SearchOption">Tipo de busca</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.FileTypeList.Extensions">
 <summary>
 Retorna todas as extensões da lista
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.QuestionTest.QuestionTest">
 <summary>
 Classe que representa uma Avaliação de Perguntas e respostas, podendo elas serem Dissertativas, Multipla Escolha ou de Atribuição de Pontos
 </summary>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.Title">
 <summary>
 Titulo da Avaliação
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.Questions">
 <summary>
 Lista de Questões da avaliação
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.MinimumWeightAllowed">
 <summary>
 Valor Minimo da nota para aprovação (Normalmente 6)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.Weight">
 <summary>
 Peso da Avaliação (Normalmente 10)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.Header">
 <summary>
 Cabeçalho da prova. Texto adicional que ficará antes das questões e apoós o título
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.Footer">
 <summary>
 Rodapé da prova. Texto adicional que ficará após as questões
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.IsApproved">
 <summary>
 Retorna TRUE se a nota final (média da avaliação + os bonus) é maior ou igual ao minimo permitido, caso contrário, FALSE
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.Hits">
 <summary>
 Numero de questões que o usuário acertou
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.Fails">
 <summary>
 Numeor de questões que o usuário errou
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.Average">
 <summary>
 Média da Avaliação
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.Bonus">
 <summary>
 Pontos de bonificação que serão somados a média final da avaliação
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.FinalNote">
 <summary>
 Nota final da avaliação (Bonus + Média)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.HitPercent">
 <summary>
 Porcentagem de Acertos do Usuário
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionTest.FailPercent">
 <summary>
 Porcentagem de Erros do Usuário
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.QuestionTest.QuestionTest.#ctor(System.String)">
 <summary>
 Instancia uma nova avaliação com titulo
 </summary>
 <param name="Title">Titulo da avaliação</param>
</member>
<member name="M:InnerLibs.QuestionTest.QuestionTest.SetMinimumAllowedAsHalf(System.Decimal)">
 <summary>
 Configura o valor minimo permitido para aprovação como metade do peso da avaliação
 </summary>
 <param name="Weight">Parametro opcional que altera o valor do peso da avaliação</param>
</member>
<member name="M:InnerLibs.QuestionTest.QuestionTest.SetMinimumAllowedAsPercent(System.String,System.Decimal)">
 <summary>
 Configura o valor minimo permitido para aprovação como n% do peso da avaliação
 </summary>
 <param name="Percent">Porcentagem da prova</param>
 <param name="Weight">Parametro opcional que altera o valor do peso da avaliação</param>
</member>
<member name="M:InnerLibs.QuestionTest.QuestionTest.BuildHtml">
 <summary>
 Monta Uma prova HTML
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.QuestionTest.QuestionTest.BuildHtml(System.String[])">
 <summary>
 Monta uma prova HTML
 </summary>
 <param name="CssClass">Lista de classes CSS que devem ser adiciondas ao elemento que contém toda a prova</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.QuestionTest.QuestionList">
 <summary>
 Lista de questões da avaliação
 </summary>
</member>
<member name="M:InnerLibs.QuestionTest.QuestionList.Add(InnerLibs.QuestionTest.Question)">
 <summary>
 Adiciona uma questão a avaliação. A questão é ignorada se já existir na lista
 </summary>
 <param name="Question">Questão</param>
</member>
<member name="M:InnerLibs.QuestionTest.QuestionList.AddRange(System.Collections.Generic.IEnumerable{InnerLibs.QuestionTest.Question})">
 <summary>
 Adiciona um conjunto de questões a avaliação
 </summary>
 <param name="Questions">Questões</param>
</member>
<member name="T:InnerLibs.QuestionTest.Question">
 <summary>
 Classe Base para as questões de uma avaliação
 </summary>
</member>
<member name="P:InnerLibs.QuestionTest.Question.Statement">
 <summary>
 Enunciado da questão (texto da pergunta)
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Question.Weight">
 <summary>
 Peso da Pergunta
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Question.Hits">
 <summary>
 Retorna um numero que representa o quanto o usuario acertou essa pergunta
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Question.IsCorrect">
 <summary>
 Verifica se a pergunta está corretamente assinalada
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Question.Type">
 <summary>
 Tipo da Pergunta
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Question.CssClass">
 <summary>
 Classes CSS para a pergunta. Utilizado na construção de provas HTML
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.QuestionTest.Question.#ctor">
 <summary>
 Instancia uma questão
 </summary>
</member>
<member name="T:InnerLibs.QuestionTest.QuestionStatement">
 <summary>
 Enunciado de uma pergunta
 </summary>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionStatement.Text">
 <summary>
 Texto do enunciado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.QuestionStatement.Images">
 <summary>
 Imagens adicionadas ao enunciado (com legenda)
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.QuestionTest.QuestionStatement.#ctor(System.String)">
 <summary>
 Instancia umm novo enunciado com um texto
 </summary>
 <param name="Text">Texto da pergunta</param>
</member>
<member name="T:InnerLibs.QuestionTest.StatementImages">
 <summary>
 Imagem com legenda de um enunciado
 </summary>
</member>
<member name="P:InnerLibs.QuestionTest.StatementImages.Image">
 <summary>
 Imagem do enunciado
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.StatementImages.Subtitle">
 <summary>
 Legenda da Imagem
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.QuestionTest.NumericQuestion">
 <summary>
 Questões em que a resposta é numerica e implica diretamente no peso da questão (normalmente utilizada em pesquisas)
 </summary>
</member>
<member name="P:InnerLibs.QuestionTest.NumericQuestion.Answer">
 <summary>
 Pontos que o usuario fez nessa questão
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.NumericQuestion.MinValue">
 <summary>
 Menor valor permitido pela questão
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.NumericQuestion.MaxValue">
 <summary>
 Maior valor permitido pela questão
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.NumericQuestion.Hits">
 <summary>
 Pontos multiplicados pelo peso da questão
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.NumericQuestion.IsCorrect">
 <summary>
 Perguntas numericas sempre estão corretas. Neste caso, o que vale é a resposta multiplicada pelo peso que implica diretamente no peso da avaliação
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.QuestionTest.DissertativeQuestion">
 <summary>
 Questão Dissertativa
 </summary>
</member>
<member name="P:InnerLibs.QuestionTest.DissertativeQuestion.Answer">
 <summary>
 Resposta dissertativa da pergunta
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.DissertativeQuestion.Correct">
 <summary>
 Valor que indica se a questão está de alguma forma correta
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.DissertativeQuestion.Lines">
 <summary>
 Numero de linhas que devem ser impressas para esta questão
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.DissertativeQuestion.IsCorrect">
 <summary>
 Verifica se a pergunta está preenchida
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.DissertativeQuestion.Hits">
 <summary>
 Representa quantos pontos essa questão vale de acordo com a assertividade
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.DissertativeQuestion.Assertiveness">
 <summary>
 Assertividade da questão, uma valor entre 0 e o peso da questão que representa o quanto esta questão está correta
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.QuestionTest.AlternativeQuestion">
 <summary>
 Classe base para questões de 'alternativa' ou de 'verdadeiro ou falso'
 </summary>
</member>
<member name="P:InnerLibs.QuestionTest.AlternativeQuestion.Alternatives">
 <summary>
 Lista de alternativas da questão
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.QuestionTest.AlternativeList">
 <summary>
 Lista de Alternativas de uma questão de alternativas
 </summary>
</member>
<member name="M:InnerLibs.QuestionTest.AlternativeList.Add(InnerLibs.QuestionTest.Alternative)">
 <summary>
 Adiciona uma alternativa a questão. A alternativa é ignorada se já existir na lista
 </summary>
 <param name="Alternative">Alternativa</param>
</member>
<member name="M:InnerLibs.QuestionTest.AlternativeList.Add(System.String,System.Boolean)">
 <summary>
 Adiciona uma alternativa a questão. A alternativa é ignorada se já existir na lista
 </summary>
 <param name="Text">Texto da alternativa</param>
 <param name="Correct">Parametro que indica se esta alternativa é correta ou verdadeira</param>
</member>
<member name="M:InnerLibs.QuestionTest.AlternativeList.AddRange(System.Collections.Generic.IEnumerable{InnerLibs.QuestionTest.Alternative})">
 <summary>
 Adiciona um conjunto de alternativas a questão
 </summary>
 <param name="Alternatives">Alternativas</param>
</member>
<member name="T:InnerLibs.QuestionTest.SingleAlternativeQuestion">
 <summary>
 Pergunta de alternativa. o Usuário deverá assinalar a UNICA alternativa correta entre varias alternativas
 </summary>
</member>
<member name="P:InnerLibs.QuestionTest.SingleAlternativeQuestion.Hits">
 <summary>
 Retorna um numero que representa o quanto o usuario acertou essa pergunta
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.SingleAlternativeQuestion.IsCorrect">
 <summary>
 Verifica se a pergunta está corretamente assinalada. Anula a questão automaticamente se estiver mal formada (com mais de uma alternativa correta ou nenhuma alternativa correta)
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.QuestionTest.SingleAlternativeQuestion.ValidateAlternatives">
 <summary>
 Verifica se as existe apenas uma unica alternativa correta na questão
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.QuestionTest.MultipleAlternativeQuestion">
 <summary>
 Pergunta de Verdadeiro ou Falso. O Usuário deverá assinalar as questões verdadeiras ou falsas correspondente ao enunciado da pergunta.
 </summary>
</member>
<member name="P:InnerLibs.QuestionTest.MultipleAlternativeQuestion.Hits">
 <summary>
 Retorna um numero que representa o quanto o usuario acertou essa pergunta
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.MultipleAlternativeQuestion.IsCorrect">
 <summary>
 Verifica se a pergunta está corretamente assinalada
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.QuestionTest.Alternative">
 <summary>
 Objeto que representa uma alternativa de uma pergunta de alternativas
 </summary>
</member>
<member name="P:InnerLibs.QuestionTest.Alternative.ID">
 <summary>
 ID da alternativa
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Alternative.Text">
 <summary>
 Texto da alternativa
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Alternative.Correct">
 <summary>
 Valor que indica se a alternativa está correta ou verdadeira
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Alternative.Checked">
 <summary>
 Valor que indica se esta alternativa foi assinalada
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.QuestionTest.Alternative.IsCorrect">
 <summary>
 Verifica se a resposta do usuário é correta para esta alternativa
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.QuestionTest.Alternative.#ctor(System.String,System.Boolean)">
 <summary>
 Cria uma instancia de Alternativa
 </summary>
 <param name="Text">Texto da Pergunta</param>
 <param name="Correct">Valor que indica se a alternativa é correta ou verdadeira</param>
</member>
<member name="T:InnerLibs.Romanize">
 <summary>
 Modulo para manipulação de numeros romanos
 </summary>
 <remarks></remarks>
</member>
<member name="T:InnerLibs.Romanize.RomanDigit">
 <summary>
 Lista de algarismos romanos
 </summary>
</member>
<member name="F:InnerLibs.Romanize.RomanDigit.I">
 <summary>
 Valor correspondente
 </summary>
</member>
<member name="F:InnerLibs.Romanize.RomanDigit.V">
 <summary>
 Valor correspondente
 </summary>
</member>
<member name="F:InnerLibs.Romanize.RomanDigit.X">
 <summary>
 Valor correspondente
 </summary>
</member>
<member name="F:InnerLibs.Romanize.RomanDigit.L">
 <summary>
 Valor correspondente
 </summary>
</member>
<member name="F:InnerLibs.Romanize.RomanDigit.C">
 <summary>
 Valor correspondente
 </summary>
</member>
<member name="F:InnerLibs.Romanize.RomanDigit.D">
 <summary>
 Valor correspondente
 </summary>
</member>
<member name="F:InnerLibs.Romanize.RomanDigit.M">
 <summary>
 Valor correspondente
 </summary>
</member>
<member name="M:InnerLibs.Romanize.ToArabic(System.String)">
 <summary>
 Converte uma String contendo um numero romano para seu valor arabico
 </summary>
 <param name="RomanNumber">Stringo contendo o numero romano</param>
 <returns>Valor em arabico</returns>
</member>
<member name="M:InnerLibs.Romanize.ToRoman(System.Int32)">
 <summary>
 Converte um valor numérico arabico para numero romano
 </summary>
 <param name="ArabicNumber">Valor numerico arabico</param>
 <returns>uma string com o numero romano</returns>
</member>
<member name="M:InnerLibs.Shortcuts.CreateShortcut(System.IO.DirectoryInfo,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Cria atalhos em um diretõrio especifico
 </summary>
 <param name="Directory">Diretório de destino</param>
 <param name="Name">nome do arquivo de atalho</param>
 <param name="Arguments">Argumentos</param>
 <param name="Target">Destino (se não especificado, aponta para a sua aplicação)</param>
 <param name="Description">Descrição do atalho</param>
 <param name="Icon">Icone do atalho</param>
 <returns>TRUE se foi possivel criar o atalho, caso contrario, FALSE</returns>
</member>
<member name="M:InnerLibs.SoundEx.SoundEx(System.String)">
 <summary>
 Gera um código SOUNDEX para comparação de fonemas
 </summary>
 <param name="Text">Texto</param>
 <returns>Um código soundex</returns>
</member>
<member name="M:InnerLibs.SoundEx.SoundsLike(System.String,System.String)">
 <summary>
 Compara 2 palavras e verifica se elas possuem fonema parecido
 </summary>
 <param name="FirstText">Primeira palavra</param>
 <param name="SecondText">Segunda palavra</param>
 <returns>TRUE se possuirem o mesmo fonema</returns>
</member>
<member name="M:InnerLibs.SoundEx.SoundEx(System.String,System.Int32)">
 <summary>
 Gera um código SOUNDEX para comparação de fonemas
 </summary>
 <param name="Text">Texto</param>
 <returns>Um código soundex</returns>
</member>
<member name="T:InnerLibs.Phonetic">
 <summary>
 Implementação da função SoundEX em Portugues
 </summary>
</member>
<member name="P:InnerLibs.Phonetic.SoundsLike(System.String)">
 <summary>
 Compara o fonema de uma palavra em portugues com outra palavra
 </summary>
 <param name="Word">Palavra para comparar</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Phonetic.op_Like(InnerLibs.Phonetic,System.String)">
 <summary>
 Compara o fonema de uma palavra com outra
 </summary>
 <param name="Word1">primeira palavra</param>
 <param name="Word2">segunda palavra</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Phonetic.op_Like(System.String,InnerLibs.Phonetic)">
 <summary>
 Compara o fonema de uma palavra com outra
 </summary>
 <param name="Word1">primeira palavra</param>
 <param name="Word2">segunda palavra</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Phonetic.IsListenedIn(System.String)">
 <summary>
 Verifica se o fonema atual está presente em alguma frase
 </summary>
 <param name="Text">Texto</param>
 <returns></returns>
</member>
<member name="P:InnerLibs.Phonetic.Word">
 <summary>
 Palavra Original
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Phonetic.#ctor(System.String)">
 <summary>
 Cria um novo Phonetic a partir de uma palavra
 </summary>
 <param name="Word">Palavra</param>
</member>
<member name="P:InnerLibs.Phonetic.SoundExCode">
 <summary>
 Código SoundExBR que representa o fonema da palavra
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.Text">
 <summary>
 Modulo de manipulação de Texto
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Text.ToPercentString(System.Decimal)">
 <summary>
 Retorna um numero com o sinal de porcentagem
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToPercentString(System.Int32)">
 <summary>
 Retorna um numero com o sinal de porcentagem
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToPercentString(System.Double)">
 <summary>
 Retorna um numero com o sinal de porcentagem
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToPercentString(System.Int16)">
 <summary>
 Retorna um numero com o sinal de porcentagem
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToPercentString(System.Int64)">
 <summary>
 Retorna um numero com o sinal de porcentagem
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Format(System.String,System.Object[])">
 <summary>
 Extension Method para <see cref="T:System.String"/>
 </summary>
 <param name="Text">Texto</param>
 <param name="Args">Objetos de substituição</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ParseDigits(System.String,System.Globalization.CultureInfo)">
 <summary>
 Remove caracteres não numéricos de uma string
 </summary>
 <param name="Text">Texto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToTelephone(System.String)">
 <summary>
 Aplica uma mascara a um numero de telefone
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.IsTelephone(System.String)">
 <summary>
 Valida se a string é um telefone
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.FindTelephoneNumbers(System.String)">
 <summary>
 Procurea numeros de telefone em um texto
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToTelephone(System.Int64)">
 <summary>
 Aplica uma mascara a um numero de telefone
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToTelephone(System.Int32)">
 <summary>
 Aplica uma mascara a um numero de telefone
 </summary>
 <param name="Number"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToXMLString(System.Xml.XmlDocument)">
 <summary>
 Transforma um XML Document em string
 </summary>
 <param name="XML">Documento XML</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Shuffle``1(``0[]@)">
 <summary>
 Randomiza a ordem dos itens de um Array
 </summary>
 <typeparam name="Type">Tipo do Array</typeparam>
 <param name="Array">Matriz</param>
</member>
<member name="M:InnerLibs.Text.Shuffle``1(System.Collections.Generic.List{``0}@)">
 <summary>
 Randomiza a ordem dos itens de uma Lista
 </summary>
 <typeparam name="Type">Tipo de Lista</typeparam>
 <param name="List">Matriz</param>
</member>
<member name="M:InnerLibs.Text.GetRandomItem``1(System.Collections.Generic.List{``0})">
 <summary>
 Sorteia um item da Lista
 </summary>
 <typeparam name="Type">Tipo de lista</typeparam>
 <param name="List">Lista</param>
 <returns>Um valor do tipo especificado</returns>
</member>
<member name="M:InnerLibs.Text.GetRandomItem``1(``0[])">
 <summary>
 Sorteia um item da Lista
 </summary>
 <typeparam name="Type">Tipo da Matriz</typeparam>
 <param name="Array">Matriz</param>
 <returns>Um valor do tipo especificado</returns>
</member>
<member name="M:InnerLibs.Text.RandomItem``1(``0[])">
 <summary>
 Sorteia um item da Matriz
 </summary>
 <typeparam name="Type">Tipo da Matriz</typeparam>
 <param name="Array">Matriz</param>
 <returns>Um valor do tipo especificado</returns>
</member>
<member name="M:InnerLibs.Text.ReplaceIf(System.Boolean,System.String,System.String)">
 <summary>
 Substitui um valor por outro de acordo com o resultado de uma variavel booliana
 </summary>
 <param name="BooleanValue">Resultado da expressão booliana</param>
 <param name="TrueValue">   Valor retornado se a expressão for verdadeira</param>
 <param name="FalseValue">  Valor retornado se a expressão for falsa</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToLeet(System.String,System.Int32)">
 <summary>
 Converte um texo para Leet (1337)
 </summary>
 <param name="text">  TExto original</param>
 <param name="degree">Grau de itensidade (0 - 100%)</param>
 <returns>Texto em 1337</returns>
</member>
<member name="M:InnerLibs.Text.StartsWithAny(System.String,System.String[])">
 <summary>
 Verifica se uma string começa com alguma outra string de um array
 </summary>
 <param name="Text"> </param>
 <param name="Words"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.EndsWithAny(System.String,System.String[])">
 <summary>
 Verifica se uma string termina com alguma outra string de um array
 </summary>
 <param name="Text"> </param>
 <param name="Words"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Censor(System.String@,System.Collections.Generic.List{System.String},System.Char)">
 <summary>
 Censura as palavras de um texto substituindo as palavras indesejadas por * (ou outro
 caractere desejado) e retorna um valor indicando se o texto precisou ser censurado
 </summary>
 <param name="Text">               Texto</param>
 <param name="BadWords">           Lista de palavras indesejadas</param>
 <param name="CensorshipCharacter">Caractere que será aplicado nas palavras censuradas</param>
 <returns>TRUE se a frase precisou ser censurada, FALSE se a frase não precisou de censura</returns>
</member>
<member name="M:InnerLibs.Text.Censor(System.String,System.Char,System.String[])">
 <summary>
 Retorna um novo texto censurando as palavras de um texto substituindo as palavras indesejadas
 por um caractere desejado)
 </summary>
 <param name="Text">               Texto</param>
 <param name="BadWords">           Array de palavras indesejadas</param>
 <param name="CensorshipCharacter">Caractere que será aplicado nas palavras censuradas</param>
</member>
<member name="M:InnerLibs.Text.RemoveFirstIf(System.String,System.String)">
 <summary>
 Remove um texto do inicio de uma string se ele for um outro texto especificado
 </summary>
 <param name="Text">           Texto</param>
 <param name="StartStringTest">Texto inicial que será comparado</param>
</member>
<member name="M:InnerLibs.Text.RemoveLastIf(System.String,System.String)">
 <summary>
 Remove um texto do final de uma string se ele for um outro texto
 </summary>
 <param name="Text">         Texto</param>
 <param name="EndStringTest">Texto final que será comparado</param>
</member>
<member name="M:InnerLibs.Text.RemoveLastAny(System.String,System.Boolean,System.String[])">
 <summary>
 Remove o final de uma string se ela for igual a qualquer um dos valores correspondentes
 </summary>
 <param name="Text">              Texto</param>
 <param name="ContinuouslyRemove">
 Parametro que indica se a string deve continuar sendo testada até que todas as ocorrencias
 sejam removidas
 </param>
 <param name="EndStringTest">     Conjunto de textos que serão comparados</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.RemoveFirstAny(System.String,System.Boolean,System.String[])">
 <summary>
 Remove o final de uma string se ela for igual a qualquer um dos valores correspondentes
 </summary>
 <param name="Text">              Texto</param>
 <param name="ContinuouslyRemove">
 Parametro que indica se a string deve continuar sendo testada até que todas as ocorrencias
 sejam removidas
 </param>
 <param name="StartStringTest">   Conjunto de textos que serão comparados</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.TrimAny(System.String,System.Boolean,System.String[])">
 <summary>
 Remove do começo e do final de uma string qualquer valor que estiver no conjunto
 </summary>
 <param name="Text">              Texto</param>
 <param name="ContinuouslyRemove">
 Parametro que indica se a string deve continuar sendo testada até que todas as ocorrencias
 sejam removidas
 </param>
 <param name="StringTest">        Conjunto de textos que serão comparados</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.TrimAny(System.String,System.String[])">
 <summary>
 Remove do começo e do final de uma string qualquer valor que estiver no conjunto
 </summary>
 <param name="Text">      Texto</param>
 <param name="StringTest">Conjunto de textos que serão comparados</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ParseJSON``1(System.String,System.String)">
 <summary>
 Transforma uma JSON String em um Objeto ou Classe
 </summary>
 <typeparam name="TypeClass">Objeto ou Classe</typeparam>
 <param name="JSON">String JSON</param>
 <returns>Um objeto do tipo T</returns>
</member>
<member name="M:InnerLibs.Text.ParseJSON(System.String,System.String)">
 <summary>
 Transforma uma JSON String em um Objeto ou Classe
 </summary>
 <param name="JSON">String JSON</param>
 <returns>Um objeto do tipo T</returns>
</member>
<member name="M:InnerLibs.Text.SerializeJSON(System.Object,System.String)">
 <summary>
 Transforma um Objeto em JSON
 </summary>
 <param name="[Object]">Objeto</param>
 <returns>Uma String JSON</returns>
</member>
<member name="M:InnerLibs.Text.ToStream(System.String)">
 <summary>
 Cria um <see cref="T:System.IO.Stream"/> a partir de uma string
 </summary>
 <param name="TExt"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Split(System.String,System.String,System.StringSplitOptions)">
 <summary>
 Separa um texto em um array de strings a partir de uma outra string
 </summary>
 <param name="Text">     Texto</param>
 <param name="Separator">Texto utilizado como separador</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.GetWords(System.String,System.Boolean)">
 <summary>
 Retorna as plavaras contidas em uma frase em ordem alfabética e sua respectiva quantidade
 </summary>
 <param name="Text">TExto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.GetKeyWords(System.String,System.Int32,System.Int32,System.String[],System.Boolean)">
 <summary>
 Extrai palavras chave de um texto
 </summary>
 <param name="Text">TExto principal</param>
 <param name="MinWordCount">minimo de aparições da palavra no texto</param>
 <param name="MinWordLenght">minimo de tamanho da palavra</param>
 <param name="IgnoredWords">palavras ignoradas</param>
 <param name="RemoveDiacritics">TRUE para remover acentos</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.RemoveNonPrintable(System.String)">
 <summary>
 Remove caracteres não printaveis de uma string
 </summary>
 <param name="Text">Texto</param>
 <returns>String corrigida</returns>
</member>
<member name="M:InnerLibs.Text.Join``1(``0[],System.String)">
 <summary>
 Une todos os valores de um objeto em uma unica string
 </summary>
 <param name="Array">    Objeto com os valores</param>
 <param name="Separator">Separador entre as strings</param>
 <returns>string</returns>
</member>
<member name="M:InnerLibs.Text.Join``1(System.String,``0[])">
 <summary>
 Une todos os valores de um objeto em uma unica string
 </summary>
 <param name="Array">    Objeto com os valores</param>
 <param name="Separator">Separador entre as strings</param>
 <returns>string</returns>
</member>
<member name="M:InnerLibs.Text.Join``1(System.Collections.Generic.List{``0},System.String)">
 <summary>
 Une todos os valores de um objeto em uma unica string
 </summary>
 <param name="List">     Objeto com os valores</param>
 <param name="Separator">Separador entre as strings</param>
 <returns>string</returns>
</member>
<member name="M:InnerLibs.Text.GetDomain(System.Uri,System.Boolean)">
 <summary>
 Pega o dominio principal de uma URL
 </summary>
 <param name="URL">URL</param>
 <returns>nome do dominio</returns>
</member>
<member name="M:InnerLibs.Text.GetRelativeURL(System.Uri)">
 <summary>
 Retorna o caminho relativo da url
 </summary>
 <param name="URL">Url</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.GetRelativeURL(System.String)">
 <summary>
 Retorna o caminho relativo da url
 </summary>
 <param name="URL">Url</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.GetDomain(System.String,System.Boolean)">
 <summary>
 Pega o dominio principal de uma URL
 </summary>
 <param name="URL">URL</param>
 <returns>nome do dominio</returns>
</member>
<member name="M:InnerLibs.Text.ToNumberString(System.Decimal,System.Char,System.Char)">
 <summary>
 Formata um numero decimal com separador de milhares e 2 casas decimais.
 </summary>
 <param name="Number">           Numero Decimal</param>
 <param name="ThousandSeparator">Separador de milhares</param>
 <param name="DecimalSeparator"> Separador de casas decimais</param>
 <returns>Numero formatado em string</returns>
</member>
<member name="M:InnerLibs.Text.ToMoney(System.Decimal,System.String,System.Char,System.Char)">
 <summary>
 Formata um numero decimal como moeda
 </summary>
 <param name="Number">           Numero Decimal</param>
 <param name="Currency">         SImbolo de moeda</param>
 <param name="ThousandSeparator">Separador de milhares</param>
 <param name="DecimalSeparator"> Separador de casas decimais</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.FixPunctuation(System.String@,System.String)">
 <summary>
 Adciona pontuaçao ao final de uma string se a mesma não terminar com alguma pontuacao.
 </summary>
 <param name="Text">       Frase, Texto a ser pontuado</param>
 <param name="Punctuation">Ponto a ser adicionado na frase se a mesma não estiver com pontuacao</param>
 <returns>Frase corretamente pontuada</returns>
</member>
<member name="M:InnerLibs.Text.Replace(System.String,System.String)">
 <summary>
 Retorna uma nova sequência na qual todas as ocorrências de uma String especificada são
 substituídas por vazio.
 </summary>
 <param name="Text">    Texto</param>
 <param name="OldValue">Valor a ser substituido por vazio</param>
 <returns>String corrigida</returns>
</member>
<member name="M:InnerLibs.Text.Replace(System.String,System.String,System.String[])">
 <summary>
 Retorna uma nova sequência na qual todas as ocorrências de uma String especificada são
 substituídas por um novo valor.
 </summary>
 <param name="Text">     Texto</param>
 <param name="NewValue"> Novo Valor</param>
 <param name="OldValues">Valores a serem substituido por um novo valor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Replace(System.String[],System.String,System.String,System.Boolean)">
 <summary>
 Faz uma busca em todos os elementos do array e aplica um Replace comum
 </summary>
 <param name="Strings">        Array de strings</param>
 <param name="OldValue">       Valor antigo que será substituido</param>
 <param name="NewValue">       Valor utilizado para substituir o valor antigo</param>
 <param name="ReplaceIfEquals">
 Se TRUE, realiza o replace se o valor no array for idêntico ao Valor antigo, se FALSE realiza
 um Replace em quaisquer valores antigos encontrados dentro do valor do array
 </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Replace(System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean)">
 <summary>
 Faz uma busca em todos os elementos de uma lista e aplica um Replace comum
 </summary>
 <param name="Strings">        Array de strings</param>
 <param name="OldValue">       Valor antigo que será substituido</param>
 <param name="NewValue">       Valor utilizado para substituir o valor antigo</param>
 <param name="ReplaceIfEquals">
 Se TRUE, realiza o replace se o valor no array for idêntico ao Valor antigo, se FALSE realiza
 um Replace em quaisquer valores antigos encontrados dentro do valor do array
 </param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.RemoveAny(System.String@,System.String[])">
 <summary>
 Remove várias strings de uma string
 </summary>
 <param name="Text">  Texto</param>
 <param name="Values">Strings a serem removidas</param>
 <returns>Uma string com os valores removidos</returns>
</member>
<member name="M:InnerLibs.Text.ToFriendlyURL(System.String,System.Boolean)">
 <summary>
 Prepara uma string para se tornar uma URL amigavel (remove caracteres nao permitidos e troca
 espacos por hifen)
 </summary>
 <param name="Text">         </param>
 <param name="UseUnderscore">
 Indica se os espacos serão substituidos por underscores (underline). Use FALSE para hifens
 </param>
 <returns>string amigavel para URL</returns>
</member>
<member name="M:InnerLibs.Text.ToSlug(System.String,System.Boolean)">
 <summary>
 Prepara uma string para se tornar uma URL amigavel (remove caracteres nao permitidos e troca
 espacos por hifen). É um alias para <see cref="M:InnerLibs.Text.ToFriendlyURL(System.String,System.Boolean)"/>
 </summary>
 <param name="Text">         </param>
 <param name="UseUnderscore">
 Indica se os espacos serão substituidos por underscores (underline). Use FALSE para hifens
 </param>
 <returns>string amigavel para URL</returns>
</member>
<member name="M:InnerLibs.Text.IsAny(System.String,System.String[])">
 <summary>
 Compara se uma string é igual a outras strings
 </summary>
 <param name="Text"> string principal</param>
 <param name="Texts">strings para comparar</param>
 <returns>TRUE se alguma das strings for igual a principal</returns>
</member>
<member name="M:InnerLibs.Text.RemoveAccents(System.String@)">
 <summary>
 Remove os acentos de uma string
 </summary>
 <param name="Text">Texto</param>
 <returns>String sem os acentos</returns>
</member>
<member name="M:InnerLibs.Text.RemoveDiacritics(System.String@)">
 <summary>
 Remove os acentos de uma string
 </summary>
 <param name="Text">Texto</param>
 <returns>String sem os acentos</returns>
</member>
<member name="M:InnerLibs.Text.Append(System.String@,System.String)">
 <summary>
 Adiciona texto ao final de uma string
 </summary>
 <param name="Text">      Texto</param>
 <param name="AppendText">Texto adicional</param>
</member>
<member name="M:InnerLibs.Text.AppendIf(System.String@,System.String,System.Boolean)">
 <summary>
 Adiciona texto ao final de uma string se um criterio for cumprido
 </summary>
 <param name="Text">      Texto</param>
 <param name="AppendText">Texto adicional</param>
 <param name="Test">      Teste</param>
</member>
<member name="M:InnerLibs.Text.Increment(System.Int32@,System.Int32)">
 <summary>
 Incrementa em 1 ou mais um numero inteiro
 </summary>
 <param name="Number">Numero</param>
 <param name="Amount">QUantidade adicionada</param>
</member>
<member name="M:InnerLibs.Text.Increment(System.Int64@,System.Int32)">
 <summary>
 Incrementa em 1 ou mais um numero inteiro
 </summary>
 <param name="Number">Numero</param>
 <param name="Amount">QUantidade adicionada</param>
</member>
<member name="M:InnerLibs.Text.Prepend(System.String@,System.String)">
 <summary>
 Adiciona texto ao começo de uma string
 </summary>
 <param name="Text">       Texto</param>
 <param name="PrependText">Texto adicional</param>
</member>
<member name="M:InnerLibs.Text.PrependIf(System.String@,System.String,System.Boolean)">
 <summary>
 Adiciona texto ao começo de uma string se um criterio for cumprido
 </summary>
 <param name="Text">       Texto</param>
 <param name="PrependText">Texto adicional</param>
 <param name="Test">       Teste</param>
</member>
<member name="M:InnerLibs.Text.Decrement(System.Int32@,System.Int32)">
 <summary>
 Decrementa em 1 ou mais um numero inteiro
 </summary>
 <param name="Number">Numero</param>
 `
 <param name="Amount">QUantidade que será removida</param>
</member>
<member name="M:InnerLibs.Text.Decrement(System.Int64@,System.Int32)">
 <summary>
 Decrementa em 1 ou mais um numero inteiro
 </summary>
 <param name="Number">Numero</param>
 `
 <param name="Amount">QUantidade que será removida</param>
</member>
<member name="M:InnerLibs.Text.ToFileSizeString(System.Byte[])">
 <summary>
 Retorna o uma string representando um valor em bytes, KB, MB ou TB
 </summary>
 <param name="Size">Tamanho</param>
 <returns>String com o tamanho + unidade de medida</returns>
</member>
<member name="M:InnerLibs.Text.ToFileSizeString(System.Double)">
 <summary>
 Retorna o uma string representando um valor em bytes, KB, MB ou TB
 </summary>
 <param name="Size">Tamanho</param>
 <returns>String com o tamanho + unidade de medida</returns>
</member>
<member name="M:InnerLibs.Text.ToFileSizeString(System.Int32)">
 <summary>
 Retorna o uma string representando um valor em bytes, KB, MB ou TB
 </summary>
 <param name="Size">Tamanho</param>
 <returns>String com o tamanho + unidade de medida</returns>
</member>
<member name="M:InnerLibs.Text.ToFileSizeString(System.Int64)">
 <summary>
 Retorna o uma string representando um valor em bytes, KB, MB ou TB
 </summary>
 <param name="Size">Tamanho</param>
 <returns>String com o tamanho + unidade de medida</returns>
</member>
<member name="M:InnerLibs.Text.ToFileSizeString(System.Decimal)">
 <summary>
 Retorna o uma string representando um valor em bytes, KB, MB ou TB
 </summary>
 <param name="Size">Tamanho</param>
 <returns>String com o tamanho + unidade de medida</returns>
</member>
<member name="M:InnerLibs.Text.ToUnitString(System.Decimal)">
 <summary>
 Abrevia um numero adicionando o letra da unidade que o representa
 </summary>
 <param name="Number">Numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToUnitString(System.Int32)">
 <summary>
 Abrevia um numero adicionando o letra da unidade que o representa
 </summary>
 <param name="Number">Numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToUnitString(System.Int64)">
 <summary>
 Abrevia um numero adicionando o letra da unidade que o representa
 </summary>
 <param name="Number">Numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToUnitString(System.Int16)">
 <summary>
 Abrevia um numero adicionando o letra da unidade que o representa
 </summary>
 <param name="Number">Numero</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToExtensiveForm(System.Decimal,System.Int32)">
 <summary>
 Transforma um numero em sua forma extensa (com até 3 casas apos a virgula)
 </summary>
 <param name="Number">       Numero decimal</param>
 <param name="DecimalPlaces">Numero de casas decimais (de 0 a 3)</param>
 <returns>String contendo o numero por extenso</returns>
</member>
<member name="M:InnerLibs.Text.ToExtensiveForm(System.Int32)">
 <summary>
 Transforma um numero em sua forma extensa
 </summary>
 <param name="Number">Numero decimal</param>
 <returns>String contendo o numero por extenso</returns>
</member>
<member name="M:InnerLibs.Text.ToExtensiveMoneyForm(System.Decimal)">
 <summary>
 Transforma um valor monetário em sua forma extensa
 </summary>
 <param name="Value">Numero decimal</param>
 <returns>String contendo o numero por extenso</returns>
</member>
<member name="M:InnerLibs.Text.ToExtensiveForm(InnerLibs.Money)">
 <summary>
 Transforma um valor monetário em sua forma extensa
 </summary>
 <param name="MoneyValue">Numero decimal</param>
 <returns>String contendo o numero por extenso</returns>
</member>
<member name="M:InnerLibs.Text.DistinctCount(System.String[])">
 <summary>
 Cria um dicionário com as palavras de uma lista e a quantidade de cada uma.
 </summary>
 <param name="List">Lista de palavras</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.DistinctCount(System.String)">
 <summary>
 Cria um dicionário com as palavras de uma frase e sua respectiva quantidade.
 </summary>
 <param name="Phrase">Lista de palavras</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.DeleteLine(System.String@,System.Int32)">
 <summary>
 Remove uma determinada linha de um texto
 </summary>
 <param name="Text">     Texto completo</param>
 <param name="LineIndex">numero da linha a ser removida (Começando do 0)</param>
 <returns>string sem a linha indicada</returns>
</member>
<member name="M:InnerLibs.Text.RemoveFirstChars(System.String,System.Int32)">
 <summary>
 Remove os X primeiros caracteres
 </summary>
 <param name="Text">    Texto</param>
 <param name="Quantity">Quantidade de Caracteres</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.RemoveLastChars(System.String,System.Int32)">
 <summary>
 Remove os X ultimos caracteres
 </summary>
 <param name="Text">    Texto</param>
 <param name="Quantity">Quantidade de Caracteres</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Slice(System.String,System.Int32,System.Boolean)">
 <summary>
 Corta uma string em uma determinada posição e completa com reticências.
 </summary>
 <param name="Text">      O Texto a ser Cortado</param>
 <param name="TextLength">A quantidade de caracteres final da string cortada</param>
 <param name="Ellipsis">  TRUE para reticências, FALSE para apenas a string cortada</param>
 <returns>string cortada</returns>
</member>
<member name="M:InnerLibs.Text.RemoveHTML(System.String)">
 <summary>
 Remove as tags HTML de um texto
 </summary>
 <param name="Text">Texto a ser Tratado</param>
 <returns>String sem as tags HTML</returns>
</member>
<member name="M:InnerLibs.Text.FixBreakLines(System.String)">
 <summary>
 Transforma quebras de linha HTML em quebras de linha comuns ao .net
 </summary>
 <param name="Text">Texto correspondente</param>
 <returns>String fixada</returns>
</member>
<member name="M:InnerLibs.Text.AdjustWhiteSpaces(System.String@)">
 <summary>
 Remove os espaços excessivos (duplos) no meio da frase e remove os espaços no inicio e final
 da frase
 </summary>
 <param name="Text">Frase a ser manipulada</param>
 <returns>Uma String com a frase corrigida</returns>
</member>
<member name="M:InnerLibs.Text.FixCaptalization(System.String@)">
 <summary>
 Arruma a captalização das palavras em diferentes sentenças
 </summary>
 <param name="Text">TExto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.FixText(System.String@)">
 <summary>
 Arruma a ortografia do texto captalizando corretamente, adcionando pontução ao final de frase
 caso nescessário e removendo espaços excessivos ou incorretos
 </summary>
 <param name="Text">Texto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToProper(System.String)">
 <summary>
 Transforma um texto em nome proprio Ex.: igor -&gt; Igor / inner code -&gt; Inner Code
 </summary>
 <param name="Text">Texto a ser manipulado</param>
 <returns>Uma String com o texto em nome próprio</returns>
</member>
<member name="M:InnerLibs.Text.FixQuotesToQuery(System.String)">
 <summary>
 Prepara uma string com aspas simples para uma Query TransactSQL
 </summary>
 <param name="Text">Texto a ser tratado</param>
 <returns>String pornta para a query</returns>
</member>
<member name="M:InnerLibs.Text.Quote(System.String,System.String)">
 <summary>
 Encapsula um tento entre 2 textos (normalmente parentesis, chaves, aspas ou colchetes)
 </summary>
 <param name="Text">     Texto</param>
 <param name="QuoteChar">Caractere de encapsulamento</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Wrap(System.String,System.String)">
 <summary>
 Encapsula um tento entre 2 textos
 </summary>
 <param name="Text">    Texto</param>
 <param name="WrapChar">Caractere de encapsulamento</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.WrapInTag(System.String,System.String,System.String)">
 <summary>
 Encapsula um texto dentro de um elemento HTML
 </summary>
 <param name="Text">   Texto</param>
 <param name="TagName">Nome da Tag (Exemplo: div)</param>
 <returns>Uma string HTML com seu texto dentro de uma tag</returns>
</member>
<member name="M:InnerLibs.Text.CreateElement(System.String)">
 <summary>
 Cria um elemento HTML a partir de uma string HTML
 </summary>
 <param name="HTMLString">String contendo o HTML</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToHtmlString(System.Web.UI.HtmlControls.HtmlGenericControl)">
 <summary>
 Transforma um HtmlGenericControl em uma stringHTML
 </summary>
 <param name="Control">Controle HTML</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.GetLastChars(System.String,System.Int32)">
 <summary>
 Retorna os N ultimos caracteres
 </summary>
 <param name="Text">  Texto correspondente</param>
 <param name="Number">Numero de caracteres</param>
 <returns>Uma String com os N ultimos caracteres</returns>
</member>
<member name="M:InnerLibs.Text.GetFirstChars(System.String,System.Int32)">
 <summary>
 Retorna os N primeiros caracteres
 </summary>
 <param name="Text">  Texto correspondente</param>
 <param name="Number">Numero de caracteres</param>
 <returns>Uma String com os N primeiros caracteres</returns>
</member>
<member name="M:InnerLibs.Text.HtmlEncode(System.String)">
 <summary>
 Escapa o texto HTML
 </summary>
 <param name="Text">string HTML</param>
 <returns>String HTML corrigido</returns>
</member>
<member name="M:InnerLibs.Text.HtmlDecode(System.String)">
 <summary>
 Retorna um texto com entidades HTML convertidas para caracteres
 </summary>
 <param name="Text">string HTML</param>
 <returns>String HTML corrigido</returns>
</member>
<member name="M:InnerLibs.Text.UrlEncode(System.String)">
 <summary>
 Encoda uma string para transmissão por URL
 </summary>
 <param name="Text">Texto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.UrlDecode(System.String)">
 <summary>
 Decoda uma string de uma transmissão por URL
 </summary>
 <param name="Text">Texto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.GetElementsByTagName(System.String,System.String[])">
 <summary>
 Procura uma tag especifica em uma string htm e a converte para uma HTMLTag
 </summary>
 <param name="HTMLText">String HTML</param>
 <param name="TagNames">Nomes da tags</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.GetBetween(System.String,System.String,System.String)">
 <summary>
 Retorna o texto entre dois textos
 </summary>
 <param name="Text">  O texto correspondente</param>
 <param name="Before">O texto Anterior</param>
 <param name="After"> O texto Posterior</param>
 <returns>Uma String com o texto entre o texto anterior e posterior</returns>
</member>
<member name="M:InnerLibs.Text.GetWrappedText(System.String,System.String,System.Boolean)">
 <summary>
 Captura todas as sentenças que estão entre aspas ou parentesis ou chaves ou colchetes em um texto
 </summary>
 <param name="Text">Texto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.GetOppositeWrapChar(System.String)">
 <summary>
 Retorna o caractere de encapsulamento oposto ao caractere indicado
 </summary>
 <param name="Text">Caractere</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.GetBefore(System.String,System.String)">
 <summary>
 Retorna um texto anterior a outro
 </summary>
 <param name="Text"> Texto correspondente</param>
 <param name="Value">Texto Anterior</param>
 <returns>Uma string com o valor anterior ao valor especificado.</returns>
</member>
<member name="M:InnerLibs.Text.GetAfter(System.String,System.String)">
 <summary>
 Retorna um texto posterior a outro
 </summary>
 <param name="Text"> Texto correspondente</param>
 <param name="Value">Texto Posterior</param>
 <returns>Uma string com o valor posterior ao valor especificado.</returns>
</member>
<member name="M:InnerLibs.Text.ContainsAny(System.String,System.String[])">
 <summary>
 Verifica se uma String contém qualquer um dos valores especificados
 </summary>
 <param name="Text">  Texto correspondente</param>
 <param name="Values">Lista de valores</param>
 <returns>True se conter algum valor, false se não</returns>
</member>
<member name="M:InnerLibs.Text.ContainsAny(System.String,System.StringComparison,System.String[])">
 <summary>
 Verifica se uma String contém qualquer um dos valores especificados
 </summary>
 <param name="Text">          Texto correspondente</param>
 <param name="Values">        Lista de valores</param>
 <param name="ComparisonType">Tipo de comparacao</param>
 <returns>True se conter algum valor, false se não</returns>
</member>
<member name="M:InnerLibs.Text.ContainsAll(System.String,System.String[])">
 <summary>
 Verifica se uma String contém todos os valores especificados
 </summary>
 <param name="Text">  Texto correspondente</param>
 <param name="Values">Lista de valores</param>
 <returns>True se conter todos os valores, false se não</returns>
</member>
<member name="M:InnerLibs.Text.ContainsAll(System.String,System.StringComparison,System.String[])">
 <summary>
 Verifica se uma String contém todos os valores especificados
 </summary>
 <param name="Text">          Texto correspondente</param>
 <param name="Values">        Lista de valores</param>
 <param name="ComparisonType">Tipo de comparacao</param>
 <returns>True se conter algum valor, false se não</returns>
</member>
<member name="M:InnerLibs.Text.IsAnagramOf(System.String,System.String)">
 <summary>
 Verifica se uma palavra é um Anagrama de outra palavra
 </summary>
 <param name="Text">       </param>
 <param name="AnotherText"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Alphabetize(System.String)">
 <summary>
 Retorna uma string em ordem afabética baseada em uma outra string
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.IsPalindrome(System.String,System.Boolean)">
 <summary>
 Verifica se uma palavra ou frase é idêntica da direita para a esqueda bem como da esqueda
 para direita
 </summary>
 <param name="Text">             Texto</param>
 <param name="IgnoreWhiteSpaces">Ignora os espaços na hora de comparar</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.ToAnagramList(System.String)">
 <summary>
 Retorna uma lista com todos os anagramas de uma palavra (Metodo Lento)
 </summary>
 <param name="Text">Texto</param>
 <returns>Lista de anagramas</returns>
</member>
<member name="M:InnerLibs.Text.ToAnagram(System.String)">
 <summary>
 Retorna um anagrama de um texto
 </summary>
 <param name="Text">Texto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Shuffle(System.String@)">
 <summary>
 Aleatoriza a ordem das letras de um texto
 </summary>
 <param name="Text">Texto</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Poopfy(System.String[])">
 <summary>
 Retorna uma string em sua forma poop
 </summary>
 <param name="Words"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Text.Poopfy(System.String)">
 <summary>
 Retorna uma string em sua forma poop
 </summary>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="T:InnerLibs.NotificationForm">
 <summary>
 Formulário de notificações interativas
 </summary>
</member>
<member name="P:InnerLibs.NotificationForm.VisibleNotifications">
 <summary>
 Lista com as notificações abertas
 </summary>
</member>
<member name="F:InnerLibs.NotificationForm.allowFocus">
 <summary>
 Indicates whether the form can receive focus or not.
 </summary>
</member>
<member name="F:InnerLibs.NotificationForm.animator">
 <summary>
 The object that creates the sliding animation.
 </summary>
</member>
<member name="F:InnerLibs.NotificationForm.currentForegroundWindow">
 <summary>
 The handle of the window that currently has focus.
 </summary>
</member>
<member name="M:InnerLibs.NotificationForm.GetForegroundWindow">
 <summary>
 Gets the handle of the window that currently has focus.
 </summary>
 <returns>The handle of the window that currently has focus.</returns>
</member>
<member name="M:InnerLibs.NotificationForm.SetForegroundWindow(System.IntPtr)">
 <summary>
 Activates the specified window.
 </summary>
 <param name="hWnd">The handle of the window to be focused.</param>
 <returns>True if the window was focused; False otherwise.</returns>
</member>
<member name="M:InnerLibs.NotificationForm.#ctor">
 <summary>
 Cria uma Nova Notificação
 </summary>
</member>
<member name="P:InnerLibs.NotificationForm.TextAlign">
 <summary>
 Alinhamento do texto da notificação
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.NotificationForm.OKButtonText">
 <summary>
 Texto do Botão OK
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.NotificationForm.InputBoxText">
 <summary>
 Texto da caixa de input
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.NotificationForm.ShowInputBox">
 <summary>
 Exibe uma caixa de texto na notificação para entrada de informações
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.NotificationForm.InputBoxAutoComplete">
 <summary>
 Coleção de strings para o AutoCompletar do InputBox
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.NotificationForm.RemainTime">
 <summary>
 Tempo restante antes que a notificação seja fchada automaticamente
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.NotificationForm.RemainTimeBehavior">
 <summary>
 Comportamento do tempo restante da notificação caso ela seja re-utilizada
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.NotificationForm.ShowRemainTime">
 <summary>
 Valor que representa se o contador de segundos deve ser exibido na notificação
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.NotificationForm.Size">
 <summary>
 Tamanho da notificação
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.NotificationForm.OpenDirection">
 <summary>
 Direção que a notificação desliza ao aparecer
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.NotificationForm.CloseDirection">
 <summary>
 Direção que a notificação desliza ao ser fechada
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.NotificationForm.DestroyNotifications">
 <summary>
 Destroi todas as notificações criadas na aplicação.
 </summary>
</member>
<member name="M:InnerLibs.NotificationForm.Show(System.Int32)">
 <summary>
 Exibe ou altera a notificação
 </summary>
 <param name="Seconds">
 Valor em segundos que define o tempo de exibição dessa notificação. Se a notificaáo já
 estiver sendo exibida este valor é utilizado de acordo com a propriedade <see cref="P:InnerLibs.NotificationForm.RemainTimeBehavior"/>
 </param>
</member>
<member name="T:InnerLibs.RemainTimeBehavior">
 <summary>
 Comportamento do contador da notificação
 </summary>
</member>
<member name="F:InnerLibs.RemainTimeBehavior.StackTime">
 <summary>
 Adiciona segundos ao total de segundos restantes se a notificação já estiver sendo exibida
 </summary>
</member>
<member name="F:InnerLibs.RemainTimeBehavior.ResetTime">
 <summary>
 Atribui o valor especificado aos do segundos restantes se a notificação já estiver sendo exibida
 </summary>
</member>
<member name="F:InnerLibs.RemainTimeBehavior.None">
 <summary>
 Não altera o tempo restante da notificação
 </summary>
</member>
<member name="T:InnerLibs.Toggles">
 <summary>
 Modulo que liga/desliga, (inverte) valores de variaveis
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Toggles.Toggle(System.Boolean@)">
 <summary>
 Inverte os valores TRUE/FALSE
 </summary>
 <param name="Bool">Variavel BOOLEANA que será invertida</param>
</member>
<member name="M:InnerLibs.Toggles.Toggle(System.Int32@)">
 <summary>
 Inverte os valores 0/1
 </summary>
 <param name="Int">Variavel INTEIRA que será invertida</param> 
</member>
<member name="M:InnerLibs.Toggles.Toggle(System.Windows.Forms.Form@)">
 <summary>
 Inverte a visibilidade do form
 </summary>
 <param name="Form">Variavel INTEIRA que será invertida</param>
</member>
<member name="M:InnerLibs.Toggles.Toggle(System.String@,System.String,System.String)">
 <summary>
 Alterna uma String ente 2 valores diferentes
 </summary>
 <param name="CurrentString">String contendo o primeiro ou segundo valor</param>
 <param name="TrueValue">Primeiro valor</param>
 <param name="FalseValue">Segundo Valor</param>
</member>
<member name="M:InnerLibs.Toggles.Toggle(System.Char@,System.Char,System.Char)">
 <summary>
 Alterna um char ente 2 valores diferentes
 </summary>
 <param name="CurrentChar">String contendo o primeiro ou segundo valor</param>
 <param name="TrueValue">Primeiro valor</param>
 <param name="FalseValue">Segundo Valor</param>
</member>
<member name="T:InnerLibs.vCard">
 <summary>
 Um objeto vCard
 </summary>
</member>
<member name="T:InnerLibs.Stilingue.StilingueAPI">
 <summary>
 API do Stilingue
 </summary>
</member>
<member name="M:InnerLibs.Stilingue.StilingueAPI.#ctor(System.String,System.String,InnerLibs.Stilingue.StilingueAPI.Endpoint)">
 <summary>
 Inicializa a api do Stilingue e traz todas as keys da conta
 </summary>
<param name="Email">Email do stilingue</param>
<param name="Password">Senha do stilingue</param> 
</member>
<member name="M:InnerLibs.Stilingue.StilingueAPI.UpdateKeys">
 <summary>
Atualiza a lista de keys
 </summary>
</member>
<member name="M:InnerLibs.Stilingue.StilingueAPI.GetWarRoom(System.Int32,System.Boolean,InnerLibs.Stilingue.StilingueAPI.Endpoint)">
 <summary>
 Retorna um WarRoom de uma Key
 </summary>
 <param name="IndexKey">Numro da Key na lista de Keys</param>
 <param name="AutoRequest">Quando TRUE, faz uma requisição das informações de META e NEWS imediatamente ao declarar o objeto</param>
 <param name="URLEndPoint">Qual Url deve ser utilizada</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.Stilingue.StilingueAPI.Endpoint">
 <summary>
 URLs do Stilingue
 </summary>
</member>
<member name="P:InnerLibs.Stilingue.StilingueAPI.URL">
 <summary>
 Propriedade que indica se qual Endpoint (URL) a API irá trabalhar
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.Stilingue.StilingueAPI.BaseURL">
 <summary>
 URL da API do Stilingue
 </summary>
 <returns></returns>
</member>
<member name="T:InnerLibs.Stilingue.StilingueAPI.WarRoom">
 <summary>
 API de Cards e News do Stilingue
 </summary>
</member>
<member name="P:InnerLibs.Stilingue.StilingueAPI.WarRoom.Errors">
 <summary>
 Lista de Erros capturados ao fazer a requisiçao da API
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Stilingue.StilingueAPI.WarRoom.#ctor(System.String,System.Boolean,InnerLibs.Stilingue.StilingueAPI.Endpoint)">
 <summary>
 Declara um novo objeto WarRoom
 </summary>
 <param name="Key">Chave única de acesso da pesquisa disponível no dashboard do War Room</param>
 <param name="AutoRequest">Quando TRUE, faz uma requisição das informações de META e NEWS imediatamente ao declarar o objeto</param>
 <param name="URLEndPoint">Qual Url deve ser utilizada</param>
</member>
<member name="M:InnerLibs.Stilingue.StilingueAPI.WarRoom.GetFrameCardURL(InnerLibs.Stilingue.StilingueAPI.WarRoom.Cards)">
 <summary>
 Gera um objeto URI com a URL de um Card especifico
 </summary>
 <param name="Card">Tipo do Card</param>
 <returns>URI</returns>
</member>
<member name="T:InnerLibs.Stilingue.StilingueAPI.WarRoom.Cards">
 <summary>
 Lista de Cards do Stilingue
 </summary>
</member>
<member name="F:InnerLibs.Stilingue.StilingueAPI.WarRoom.Cards.Sonar">
 <summary>
 Sonar
 </summary>
</member>
<member name="F:InnerLibs.Stilingue.StilingueAPI.WarRoom.Cards.Gallery">
 <summary>
 Galeria de Mídia
 </summary>
</member>
<member name="F:InnerLibs.Stilingue.StilingueAPI.WarRoom.Cards.Overview">
 <summary>
 Visão Geral
 </summary>
</member>
<member name="F:InnerLibs.Stilingue.StilingueAPI.WarRoom.Cards.Statistics">
 <summary>
 Estatísticas Gerais
 </summary>
</member>
<member name="F:InnerLibs.Stilingue.StilingueAPI.WarRoom.Cards.Matrix">
 <summary>
 Matriz
 </summary>
</member>
<member name="F:InnerLibs.Stilingue.StilingueAPI.WarRoom.Cards.Metro">
 <summary>
 Metro
 </summary>
</member>
<member name="F:InnerLibs.Stilingue.StilingueAPI.WarRoom.Cards.Stream">
 <summary>
 Evolução dos Clusters
 </summary>
</member>
<member name="F:InnerLibs.Stilingue.StilingueAPI.WarRoom.Cards.Clipping">
 <summary>
 Noticias
 </summary>
</member>
<member name="M:InnerLibs.Stilingue.StilingueAPI.WarRoom.GetMeta">
 <summary>
 Traz as informações dos Metatados da Pesquisa
 </summary>
</member>
<member name="M:InnerLibs.Stilingue.StilingueAPI.WarRoom.GetNews(InnerLibs.Stilingue.StilingueAPI.WarRoom.Channel,System.Boolean,System.Int32,System.Int32,System.String[],System.String[])">
 <summary>
 Traz os posts de Mídias Sociais e/ou Notícias
 </summary> 
 <param name="Channel">Canal de publicações.</param>
 <param name="Group_Posts">Agrupar Publicações</param>
 <param name="Limit">Limite por página. Maximo de 36.</param>
 <param name="Offset">Pagina</param>
 <param name="Groups">Filtrar grupos especificos  (lista de títulos concatenados por dois pontos. Exemplo: 'Grupo1:Grupo2’)</param>
 <param name="Themes">Filtrar temas especificos  (lista de títulos concatenados por dois pontos. Exemplo: 'Tema1:Tema2’)</param>
</member>
<member name="T:InnerLibs.Stilingue.StilingueAPI.WarRoom.Channel">
 <summary>
 Canal de Pesquisa
 </summary>
</member>
<member name="F:InnerLibs.Stilingue.StilingueAPI.WarRoom.Channel.All">
 <summary>
 Todas as Publicações
 </summary>
</member>
<member name="F:InnerLibs.Stilingue.StilingueAPI.WarRoom.Channel.Clipping">
 <summary>
 Apenas Notícias
 </summary>
</member>
<member name="F:InnerLibs.Stilingue.StilingueAPI.WarRoom.Channel.SocialMedia">
 <summary>
 Apenas Mídias Sociais
 </summary>
</member>
<member name="T:InnerLibs.Stilingue.StilingueAPI.WarRoom.Meta">
 <summary>
 Metadados da Pesquisa
 </summary>
</member>
<member name="T:InnerLibs.Stilingue.StilingueAPI.WarRoom.News">
 <summary>
 Noticias e publicações em Redes Sociais
 </summary>
</member>
<member name="T:InnerLibs.Stilingue.StilingueAPI.WarRoom.Post">
 <summary>
 Noticia ou Post
 </summary>
</member>
<member name="T:InnerLibs.Verify">
 <summary>
 Verifica determinados valores como Arquivos, Numeros e URLs
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Verify.IsJson``1(System.String,System.String)">
 <summary>
 Verifica se o texto é um JSON valido
 </summary>
 <typeparam name="Type"></typeparam>
 <param name="Text"></param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsValidCPF(System.String)">
 <summary>
 Verifica se a string é um CPF válido
 </summary>
 <param name="CPF">CPF</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsFilePath(System.String)">
 <summary>
 Verifica se uma string é um caminho de arquivo válido
 </summary>
 <param name="Text">Texto</param>
 <returns>TRUE se o caminho for válido</returns>
</member>
<member name="M:InnerLibs.Verify.IsDirectoryPath(System.String)">
 <summary>
 Verifica se uma string é um caminho de diretório válido
 </summary>
 <param name="Text">Texto</param>
 <returns>TRUE se o caminho for válido</returns>
</member>
<member name="M:InnerLibs.Verify.IsPath(System.String)">
 <summary>
 Verifica se uma string é um caminho de diretóio válido
 </summary>
 <param name="Text">Texto</param>
 <returns>TRUE se o caminho for válido</returns>
</member>
<member name="M:InnerLibs.Verify.IsIP(System.String)">
 <summary>
 Verifica se a string é um endereço IP válido
 </summary>
 <param name="IP">Endereco IP</param>
 <returns>TRUE ou FALSE</returns>
</member>
<member name="M:InnerLibs.Verify.IsRunningAsAdministrator">
 <summary>
 Verifica se a aplicação está rodando como administrador
 </summary>
 <returns>TRUE ou FALSE</returns>
</member>
<member name="M:InnerLibs.Verify.IsInUse(System.IO.FileInfo)">
 <summary>
 Verifica se o arquivo está em uso por outro procedimento
 </summary>
 <param name="File">o Arquivo a ser verificado</param>
 <returns>TRUE se o arquivo estiver em uso, FALSE se não estiver</returns>
</member>
<member name="M:InnerLibs.Verify.IsNumber(System.Object)">
 <summary>
 Verifica se o valor é um numero
 </summary>
 <param name="Value">Valor a ser verificado, pode ser qualquer objeto</param>
 <returns>TRUE se for um numero, FALSE se não for um numero</returns>
</member>
<member name="M:InnerLibs.Verify.IsEmail(System.String)">
 <summary>
 Verifica se um determinado texto é um email
 </summary>
 <param name="Text">Texto a ser validado</param>
 <returns>TRUE se for um email, FALSE se não for email</returns>
</member>
<member name="M:InnerLibs.Verify.IsURL(System.String)">
 <summary>
 Verifica se um determinado texto é uma URL válida
 </summary>
 <param name="Text">Texto a ser verificado</param>
 <returns>TRUE se for uma URL, FALSE se não for uma URL válida</returns>
</member>
<member name="M:InnerLibs.Verify.IsValidDomain(System.String)">
 <summary>
 Verifica se o dominio é válido (existe) em uma URL ou email
 </summary>
 <param name="DomainOrEmail">Uma String contendo a URL ou email</param>
 <returns>TRUE se o dominio existir, FALSE se o dominio não existir</returns>
</member>
<member name="M:InnerLibs.Verify.IsMobile(System.Web.HttpRequest)">
 <summary>
 Verifica se o User Agent da requisição é um dispositivel móvel (Celulares e Tablets)
 </summary>
 <param name="HttpRequest">Requisição HTTP</param>
 <returns>TRUE para mobile ou FALSE para desktop</returns>
</member>
<member name="M:InnerLibs.Verify.IsIpad(System.Web.HttpRequest)">
 <summary>
 Verifica se o User Agent da requisição é um Ipad
 </summary>
 <param name="HttpRequest">Requisição HTTP</param>
 <returns>TRUE para ipad ou FALSE para outro dispositivo</returns>
</member>
<member name="M:InnerLibs.Verify.IsAndroid(System.Web.HttpRequest)">
 <summary>
 Verifica se o User Agent da requisição é um Android
 </summary>
 <param name="HttpRequest">Requisição HTTP</param>
 <returns>TRUE para ipad ou FALSE para outro dispositivo</returns>
</member>
<member name="M:InnerLibs.Verify.IsDesktop(System.Web.HttpRequest)">
 <summary>
 Verifica se o User Agent da requisição é um PC/NOTEBOOK/MAC
 </summary>
 <param name="HttpRequest">Requisição HTTP</param>
 <returns>TRUE para desktops, FALSE para mobile</returns>
</member>
<member name="M:InnerLibs.Verify.IsNull(System.String,System.String,System.Boolean)">
 <summary>
 Verifica se um valor é NULO e prepara a string para uma query TransactSQL
 </summary>
 <param name="Text">        Valor a ser testado</param>
 <param name="DefaultValue">Valor para retornar se o valor testado for Nulo, Vazio ou branco</param>
 <param name="Quotes">
 Indica se o valor testado deve ser retornado entre aspas simples (prepara a string para SQL)
 </param>
 <returns>uma String contento o valor ou o valor se Nulo</returns>
</member>
<member name="M:InnerLibs.Verify.IfBlank``1(System.Object,``0)">
 <summary>
 Verifica se uma variavel está vazia, em branco ou nula e retorna um outro valor caso TRUE
 </summary>
 <typeparam name="Type">Tipo da Variavel</typeparam>
 <param name="Value">       Valor</param>
 <param name="ValueIfBlank">Valor se estiver em branco</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsBlank(System.String)">
 <summary>
 Verifica se uma String está em branco
 </summary>
 <param name="Text">Uma string</param>
 <returns>TRUE se estivar vazia ou em branco, caso contrario FALSE</returns>
</member>
<member name="M:InnerLibs.Verify.IsNotBlank(System.String)">
 <summary>
 Verifica se uma String não está em branco
 </summary>
 <param name="Text">Uma string</param>
 <returns>FALSE se estivar vazia ou em branco, caso contrario TRUE</returns>
</member>
<member name="M:InnerLibs.Verify.IsEven(System.Decimal)">
 <summary>
 Verifica se um numero é par
 </summary>
 <param name="Value">Valor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsEven(System.Int32)">
 <summary>
 Verifica se um numero é par
 </summary>
 <param name="Value">Valor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsEven(System.Int64)">
 <summary>
 Verifica se um numero é par
 </summary>
 <param name="Value">Valor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsEven(System.Double)">
 <summary>
 Verifica se um numero é par
 </summary>
 <param name="Value">Valor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsOdd(System.Decimal)">
 <summary>
 Verifica se um numero é impar
 </summary>
 <param name="Value">Valor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsOdd(System.Int32)">
 <summary>
 Verifica se um numero é impar
 </summary>
 <param name="Value">Valor</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Verify.IsOdd(System.Int64)">
 <summary>
 Verifica se um numero é impar
 </summary>
 <param name="Value">Valor</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.AJAX">
 <summary>
 Métodos de requisição
 </summary>
</member>
<member name="M:InnerLibs.AJAX.Request``1(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding,System.String)">
 <summary>
 Retorna o conteúdo de uma página
 </summary>
 <param name="URL">        URL de requisiçao</param>
 <param name="Parameters"> Parametros da URL</param>
 <param name="ContentType">Conteudo</param>
 <param name="Encoding">   Codificação</param>
 <param name="FilePath">   Caminho do arquivo</param>
 <returns>conteudo no formato especificado</returns>
</member>
<member name="M:InnerLibs.AJAX.POST``1(System.String,System.Collections.Specialized.NameValueCollection,System.Text.Encoding)">
 <summary>
 Realiza um POST em uma URL e retorna um Objeto convertido para o tipo especificado
 </summary>
 <typeparam name="Type">Classe do Tipo</typeparam>
 <param name="URL">        URL do Post</param>
 <param name="Parameters"> Parametros da URL</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.AJAX.GET``1(System.String,System.Text.Encoding)">
 <summary>
 Realiza um GET em uma URL
 </summary>
 <param name="URL">URL do Post</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.AJAX.DownloadFile(System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)">
 <summary>
 Faz o download de um arquivo diretamente em um diretório
 </summary>
 <param name="URL">        URL de requisiçao</param>
 <param name="Parameters"> Parametros da URL</param>
 <param name="ContentType">Conteudo</param>
 <param name="Encoding">   Codificação</param>
 <param name="FilePath">   Caminho do arquivo</param>
 <returns></returns>
</member>
<member name="T:InnerLibs.AJAX.Response">
 <summary>
 Template de resposta de requisiçoes ajax. Facilita respostas de RestAPI em JSON
 </summary>
</member>
<member name="P:InnerLibs.AJAX.Response.status">
 <summary>
 Status da requisicao
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.AJAX.Response.message">
 <summary>
 Mensagem retornada ao ciente
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.AJAX.Response.response">
 <summary>
 Objeto adicionado a resposta, ele será serializado em JSON
 </summary>
 <returns></returns>
</member>
<member name="P:InnerLibs.AJAX.Response.timeout">
 <summary>
 Tempo que a API demora para responder (calculado automaticamente no metodo <see cref="M:InnerLibs.AJAX.Response.ToJSON(System.String)"/>)
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.AJAX.Response.SerializeJSON(System.String)">
 <summary>
 Processa a resposta e retorna um JSON deste objeto. É um alias para <see cref="M:InnerLibs.AJAX.Response.ToJSON(System.String)"/>
 </summary>
</member>
<member name="M:InnerLibs.AJAX.Response.ToJSON(System.String)">
 <summary>
 Processa a resposta e retorna um JSON deste objeto
 </summary>
</member>
<member name="T:InnerLibs.Web">
 <summary>
 Modulo Web
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.Web.IsConnected(System.String)">
 <summary>
 Verifica se o computador está conectado com a internet
 </summary>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.CreateFromAjax``1(``0@,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Text.Encoding)">
 <summary>
 Cria um objeto a partir de uma requisiçao AJAX
 </summary>
 <typeparam name="Type">Tipo do objeto</typeparam>
 <param name="TheObject">  Objeto</param>
 <param name="URL">        URL de requisiçao</param>
 <param name="Parameters"> Parametros da URL</param>
 <param name="ContentType">Conteudo</param>
 <param name="Encoding">   Codificação</param>
</member>
<member name="M:InnerLibs.Web.DestroySessionAndCookies(System.Web.UI.Page)">
 <summary>
 Destroi a Sessão e todos os cookies de uma aplicação ASP.NET
 </summary>
 <param name="Page">Pagina atual</param>
</member>
<member name="M:InnerLibs.Web.ToCookie(System.Web.SessionState.HttpSessionState,System.String,System.String[])">
 <summary>
 Cria um cookie guardando valores especificos da sessão atual (1 dia de duração)
 </summary>
 <param name="Session">    Sessão</param>
 <param name="CookieName"> Nome do Cookie</param>
 <param name="SessionKeys">As keys especificas que você quer guardar</param>
 <returns>Um cookie com os valores da sessão</returns>
</member>
<member name="M:InnerLibs.Web.ToCookie(System.Web.SessionState.HttpSessionState,System.String,System.DateTime,System.String[])">
 <summary>
 Cria um cookie guardando valores especificos da sessão atual
 </summary>
 <param name="Session">    Sessão</param>
 <param name="CookieName"> Nome do Cookie</param>
 <param name="Expires">    Data de expiração</param>
 <param name="SessionKeys">As keys especificas que você quer guardar</param>
 <returns>Um cookie com os valores da sessão</returns>
</member>
<member name="M:InnerLibs.Web.ToCookie(System.Web.SessionState.HttpSessionState,System.String,System.DateTime)">
 <summary>
 Cria um cookie guardando todos os valores da sessão atual
 </summary>
 <param name="Session">   Sessão</param>
 <param name="CookieName">Nome do Cookie</param>
 <param name="Expires">   Data de expiração</param>
 <returns>Um cookie com os valores da sessão</returns>
</member>
<member name="M:InnerLibs.Web.AddParameter(System.Uri,System.String,System.String)">
 <summary>
 Adciona um parametro a Query String de uma URL
 </summary>
 <param name="Url">  Uri</param>
 <param name="Key">  Nome do parâmetro</param>
 <param name="Value">Valor do Parâmetro</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.RewriteUrl(System.Web.HttpApplication,System.String,System.String)">
 <summary>
 Reescreve a URL original a partir de uma REGEX aplicada em uma URL amigavel
 </summary>
 <param name="App">       Aplicaçao HTTP</param>
 <param name="URLPattern">REGEX da URL</param>
 <param name="URL">       URL original</param>
</member>
<member name="M:InnerLibs.Web.ToProcedure(System.Web.HttpRequest,System.String,System.String[])">
 <summary>
 Monta um Comando SQL para executar uma procedure especifica e trata parametros espicificos de
 uma URL como parametros da procedure
 </summary>
 <param name="Request">        Requisicao HTTP</param>
 <param name="ProcedureName">  Nome da Procedure</param>
 <param name="QueryStringKeys">Parametros da URL que devem ser utilizados</param>
 <returns>Uma string com o comando montado</returns>
</member>
<member name="M:InnerLibs.Web.ToProcedure(System.Web.HttpRequest,System.String)">
 <summary>
 Monta um Comando SQL para executar uma procedure especifica e trata todos os parametros de
 uma URL como parametros da procedure
 </summary>
 <param name="Request">      Requisicao HTTP</param>
 <param name="ProcedureName">Nome da Procedure</param>
 <returns>Uma string com o comando montado</returns>
</member>
<member name="M:InnerLibs.Web.ToUPDATE(System.Web.HttpRequest,System.String,System.String,System.String[])">
 <summary>
 Monta um Comando SQL para executar um INSERT e trata parametros espicificos de
 uma URL como as colunas da tabela de destino
 </summary>
 <param name="Request">        Requisicao HTTP</param>
 <param name="TableName">  Nome da Procedure</param>
 <param name="QueryStringKeys">Parametros da URL que devem ser utilizados</param>
 <returns>Uma string com o comando montado</returns>
</member>
<member name="M:InnerLibs.Web.ToUPDATE(System.Web.HttpRequest,System.String,System.String)">
 <summary>
 Monta um Comando SQL para executar um INSERT e trata parametros espicificos de
 uma URL como as colunas da tabela de destino
 </summary>
 <param name="Request">        Requisicao HTTP</param>
 <param name="TableName">  Nome da Procedure</param>
 <returns>Uma string com o comando montado</returns>
</member>
<member name="M:InnerLibs.Web.ToINSERT(System.Web.HttpRequest,System.String,System.String[])">
 <summary>
 Monta um Comando SQL para executar um INSERT e trata parametros espicificos de
 uma URL como as colunas da tabela de destino
 </summary>
 <param name="Request">        Requisicao HTTP</param>
 <param name="TableName">  Nome da Procedure</param>
 <param name="QueryStringKeys">Parametros da URL que devem ser utilizados</param>
 <returns>Uma string com o comando montado</returns>
</member>
<member name="M:InnerLibs.Web.ToINSERT(System.Web.HttpRequest,System.String)">
 <summary>
 Monta um Comando SQL para executar um INSERT e trata parametros espicificos de
 uma URL como as colunas da tabela de destino
 </summary>
 <param name="Request">        Requisicao HTTP</param>
 <param name="TableName">  Nome da Tabela</param>
 <returns>Uma string com o comando montado</returns>
</member>
<member name="M:InnerLibs.Web.WriteEnd(System.Web.HttpResponse,System.String)">
 <summary>
 Escreve um texto e finaliza um HttpResponse
 </summary>
 <param name="Response">HttpResponse</param>
 <param name="Text">    Texto</param>
</member>
<member name="M:InnerLibs.Web.WriteCSV(System.Web.HttpResponse,System.String,System.String)">
 <summary>
 Escreve um arquivo CSV e finaliza um HttpResponse
 </summary>
 <param name="Response"> HttpResponse</param>
 <param name="CSVString">String com o conteudo do arquivo CSV</param>
 <param name="FileName"> Nome do arquivo CSV</param>
</member>
<member name="M:InnerLibs.Web.WriteJSON(System.Web.HttpResponse,System.String)">
 <summary>
 Escreve um JSON e finaliza um HttpResponse
 </summary>
 <param name="Response">HttpResponse</param>
 <param name="JSON">    String JSON</param>
</member>
<member name="M:InnerLibs.Web.WriteImage(System.Web.HttpResponse,System.Byte[],System.String)">
 <summary>
 Escreve uma imagem e finaliza um HttpResponse
 </summary>
 <param name="Response">HttpResponse</param>
 <param name="Image">   Imagem</param>
 <param name="MimeType">Formato MIME Type</param>
</member>
<member name="M:InnerLibs.Web.WriteImage(System.Web.HttpResponse,System.Byte[],InnerLibs.FileType)">
 <summary>
 Escreve uma imagem e finaliza um HttpResponse
 </summary>
 <param name="Response">HttpResponse</param>
 <param name="Image">   Imagem</param>
 <param name="MimeType">Formato MIME Type</param>
</member>
<member name="M:InnerLibs.Web.WriteImage(System.Web.HttpResponse,System.Drawing.Image)">
 <summary>
 Escreve uma imagem e finaliza um HttpResponse
 </summary>
 <param name="Response">HttpResponse</param>
 <param name="Image">   Imagem</param>
</member>
<member name="M:InnerLibs.Web.WriteJSON(System.Web.HttpResponse,InnerLibs.AJAX.Response)">
 <summary>
 Escreve um JSON e finaliza um HttpResponse
 </summary>
 <param name="Response">HttpResponse</param>
 <param name="JSON">    Objeto de resposta AJAX</param>
</member>
<member name="M:InnerLibs.Web.WriteJSON``1(System.Web.HttpResponse,``0)">
 <summary>
 Escreve um JSON e finaliza um HttpResponse
 </summary>
<typeparam name="Type">Tipo de Objeto que será Serializado em JSON</typeparam>
 <param name="Response">HttpResponse</param>
 <param name="JSON">Objeto de resposta AJAX</param>
</member>
<member name="M:InnerLibs.Web.WriteJSON(System.Web.HttpResponse,System.String,System.String,System.Object)">
 <summary>
 Escreve um JSON e finaliza um HttpResponse
 </summary>
 <param name="HttpResponse">Response</param>
 <param name="Response">Objeto anexado ao JSON</param>
<param name="Message">Mensagem</param>
<param name="Status">Status</param>
</member>
<member name="M:InnerLibs.Web.WriteXML(System.Web.HttpResponse,System.String)">
 <summary>
 Escreve um XML e finaliza um HttpResponse
 </summary>
 <param name="Response">HttpResponse</param>
 <param name="XML">     String XML</param>
</member>
<member name="M:InnerLibs.Web.WriteXML(System.Web.HttpResponse,System.Xml.XmlDocument)">
 <summary>
 Escreve um XML e finaliza um HttpResponse
 </summary>
 <param name="Response">HttpResponse</param>
 <param name="XML">     String XML</param>
</member>
<member name="M:InnerLibs.Web.WriteScript(System.Web.HttpResponse,System.String)">
 <summary>
 Escreve um script na página
 </summary>
 <param name="Response">   HttpResponse</param>
 <param name="ScriptOrURL">Texto ou URL absoluta do Script</param>
</member>
<member name="M:InnerLibs.Web.GetFacebookUsername(System.String)">
 <summary>
 Captura o Username ou UserID de uma URL do Facebook
 </summary>
 <param name="URL">URL do Facebook</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.GetFacebookUsername(System.Uri)">
 <summary>
 Captura o Username ou UserID de uma URL do Facebook
 </summary>
 <param name="URL">URL do Facebook</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.GetYoutubeThumbnail(System.String)">
 <summary>
 Captura a Thumbnail de um video do youtube
 </summary>
 <param name="URL">Url do Youtube</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.GetYoutubeThumbnail(System.Uri)">
 <summary>
 Captura a Thumbnail de um video do youtube
 </summary>
 <param name="URL">Url do Youtube</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.GetVideoId(System.String)">
 <summary>
 Captura o ID de um video do YOUTUBE ou VIMEO em uma URL
 </summary>
 <param name="URL">URL do video</param>
 <returns>ID do video do youtube ou Vimeo</returns>
</member>
<member name="M:InnerLibs.Web.GetVideoId(System.Uri)">
 <summary>
 Captura o ID de um video do youtube em uma URL
 </summary>
 <param name="URL">URL do video</param>
 <returns>ID do video do youtube</returns>
</member>
<member name="M:InnerLibs.Web.IsDown(System.String)">
 <summary>
 Verifica se um site está indisponível usando o serviço IsUp.Me
 </summary>
 <param name="Url">Url</param>
 <returns>True para site fora do Ar</returns>
</member>
<member name="M:InnerLibs.Web.IsUp(System.String)">
 <summary>
 Verifica se um site está disponível usando o serviço IsUp.Me
 </summary>
 <param name="Url">Url</param>
 <returns>False para site fora do Ar</returns>
</member>
<member name="M:InnerLibs.Web.IsDown(System.Uri)">
 <summary>
 Verifica se um site está indisponível usando o serviço IsUp.Me
 </summary>
 <param name="Url">Url</param>
 <returns>True para site fora do Ar</returns>
</member>
<member name="M:InnerLibs.Web.IsUp(System.Uri)">
 <summary>
 Verifica se um site está disponível usando o serviço IsUp.Me
 </summary>
 <param name="Url">Url</param>
 <returns>False para site fora do Ar</returns>
</member>
<member name="M:InnerLibs.Web.ExtractOptions(System.Web.UI.HtmlControls.HtmlSelect)">
 <summary>
 Retorna uma string HTML com os options de um <see cref="T:System.Web.UI.HtmlControls.HtmlSelect"/>
 </summary>
 <param name="Control">COntrole HTMLSelect</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.SelectValues(System.Web.UI.HtmlControls.HtmlSelect,System.String[])">
 <summary>
 Seleciona Valores de um <see cref="T:System.Web.UI.HtmlControls.HtmlSelect"/>
 </summary>
 <param name="Control">Controle <see cref="T:System.Web.UI.HtmlControls.HtmlSelect"/></param>
 <param name="Values"> Valores que devem receber a propriedade select</param>
</member>
<member name="M:InnerLibs.Web.DisselectValues(System.Web.UI.HtmlControls.HtmlSelect,System.String[])">
 <summary>
 Desseleciona Valores de um <see cref="T:System.Web.UI.HtmlControls.HtmlSelect"/>
 </summary>
 <param name="Control">Controle <see cref="T:System.Web.UI.HtmlControls.HtmlSelect"/></param>
 <param name="Values"> Valores que devem receber a propriedade select</param>
</member>
<member name="M:InnerLibs.Web.AddItem(System.Web.UI.HtmlControls.HtmlSelect,System.String,System.String,System.Boolean)">
 <summary>
 Adiciona um novo <see cref="T:System.Web.UI.WebControls.ListItem"/> ao <see cref="T:System.Web.UI.HtmlControls.HtmlSelect"/>
 </summary>
 <param name="Control"> Controle <see cref="T:System.Web.UI.HtmlControls.HtmlSelect"/></param>
 <param name="Text">    Texto do Item</param>
 <param name="Value">   Valor do Item</param>
 <param name="Selected">Indica se o item está selecionado ou não</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.Web.RangeDownload(System.Web.HttpContext@,System.Byte[]@,InnerLibs.FileType)">
 <summary>
 Realiza um download parcial de um <see cref="T:System.Byte"/>
 </summary>
 <param name="Context">Context HTTP</param>
 <param name="Bytes">Byte array</param>
 <param name="FileType">Tipo do Arquivo</param>
</member>
<member name="M:InnerLibs.Web.RangeDownload(System.Web.HttpContext@,System.Byte[]@,System.String)">
 <summary>
 Realiza um download parcial de um <see cref="T:System.Byte"/>
 </summary>
 <param name="Context">Context HTTP</param>
 <param name="Bytes">Byte array</param>
 <param name="ContentType">MIME Type do Download</param>
</member>
<member name="T:InnerLibs.WinForms">
 <summary>
 Módulo de controle de formulários
 </summary>
 <remarks></remarks>
</member>
<member name="M:InnerLibs.WinForms.RestartAsAdmin(System.Boolean)">
 <summary>
 Reinicia a aplicação solicitando acesso administrativo se a mesma já não estiver em modo administrativo
 </summary>
<param name="ForceRestart">Força o reinicio da aplicação mesmo se ela estiver em modo administrativo</param>
</member>
<member name="M:InnerLibs.WinForms.Notify(System.String,System.EventHandler,System.String,System.Drawing.Size,System.Int32,System.Boolean,InnerLibs.RemainTimeBehavior)">
 <summary>
 Exibe uma notificação com uma mensagem
 </summary>
 <param name="Text">           Texto da notiicação</param>
 <param name="Action">         Ação do botão OK</param>
 <param name="OKButtonText">   texto do botão OK</param>
 <param name="Size">           Tamanho do Form</param>
 <param name="LifeTimeSeconds">Tempo e que a notificação demora para fechar automaticamente</param>
 <param name="ShowRemainTime"> Exibir/Esconder o contador da notificação</param>
</member>
<member name="M:InnerLibs.WinForms.CreateFontFromFile(System.String,System.Int32,System.Drawing.FontStyle)">
 <summary>
 Cria uma Font a partir de um arquivo
 </summary>
 <param name="Path">caminho do arquivo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.WinForms.GetAllNodes(System.Windows.Forms.TreeNode)">
 <summary>
 Traz todos os nós descendentes de um nó pai
 </summary>
 <param name="Node">nó</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.WinForms.GetAllNodes(System.Windows.Forms.TreeView)">
 <summary>
 Traz todos os nós descendentes de um TreeView
 </summary>
 <param name="Node">nó</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.WinForms.CreateFontFromResource(System.Byte[],System.Int32,System.Drawing.FontStyle)">
 <summary>
 Cria uma Font a partir de um arquivo embutido
 </summary>
 <param name="Resource">Resource (Bytes()) do arquivo</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.WinForms.Alert(System.String)">
 <summary>
 Exibe uma caixa de alerta com uma mensagem
 </summary>
 <param name="Message">Texto da caixa de alerta</param>
</member>
<member name="M:InnerLibs.WinForms.Confirm(System.String)">
 <summary>
 Exibe uma caixa de comfirmação com uma mensagem
 </summary>
 <param name="Message">Texto da caixa de confirmação</param>
 <returns>TRUE ou FALSE</returns>
</member>
<member name="M:InnerLibs.WinForms.Prompt(System.String,System.String)">
 <summary>
 Exibe uma caixa de mensagem ao usuário esperando uma resposta
 </summary>
 <param name="Message">Mensagem String</param>
 <returns></returns>
</member>
<member name="M:InnerLibs.WinForms.ToFullScreen(System.Windows.Forms.Form,System.Int32)">
 <summary>
 Deixa o Form em tela cheia.
 </summary>
 <param name="Form">     O formulario</param>
 <param name="TheScreen">Qual tela o form será aplicado</param>
</member>
<member name="M:InnerLibs.WinForms.SetTelephoneMask(System.Windows.Forms.MaskedTextBox)">
 <summary>
 Aplica máscara de telefone com ou sem o nono dígito automaticamente de acordo com o número
 inputado. Utilize este metodo no Evento GotFocus e LostFocus simultaneamente
 </summary>
 <param name="theTextBox">A MaskedTextBox</param>
</member>
<member name="M:InnerLibs.WinForms.AddClick(System.Windows.Forms.Control@,System.EventHandler)">
 <summary>
 Adiciona funções ao clique de algum controle
 </summary>
 <param name="Control">Controle</param>
 <param name="Action"> Ação</param>
</member>
<member name="M:InnerLibs.WinForms.RemoveClick(System.Windows.Forms.Control@,System.EventHandler)">
 <summary>
 Remove funções do clique de algum controle
 </summary>
 <param name="Control">Controle</param>
 <param name="Action"> Ação</param>
</member>
<member name="M:InnerLibs.WinForms.GetAllControls``1(System.Windows.Forms.Control)">
 <summary>
 Pega todos os controles filhos de um controle pai
 </summary>
 <typeparam name="ControlType">Tipo de controle</typeparam>
 <param name="Control">Controle Pai</param>
 <returns>Uma lista com os controles</returns>
</member>
<member name="M:InnerLibs.WinForms.GetAllControls``1(System.Web.UI.Control)">
 <summary>
 Pega todos os controles filhos de um controle pai
 </summary>
 <typeparam name="ControlType">Tipo de controle</typeparam>
 <param name="Control">Controle Pai</param>
 <returns>Uma lista com os controles</returns>
</member>
<member name="M:InnerLibs.WinForms.CastControl(System.Object@,System.Object)">
 <summary>
 Aplica um valor a um controle dependendo do seu tipo
 </summary>
 <param name="Control">Controle</param>
 <param name="Value">  Valor</param>
</member>
<member name="M:InnerLibs.WinForms.GetQueryableValue(System.Object@)">
 <summary>
 Retorna uma string contendo o valor do controle pronto para uma Query SQL dependendo do seu tipo
 </summary>
 <param name="Control">Controle</param>
 <returns></returns>
</member>
</members>
</doc>
